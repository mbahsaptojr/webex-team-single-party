{"version":3,"sources":["request.js"],"names":["MeetingRequest","request","api","API","LOCUS","resource","RESOURCE","LOCI","then","res","determineRedirections","body","catch","error","console","responseBody","remoteLocusClusterUrls","length","all","map","url","method","GET","runWhitelistedDomains","loci","push","locusUrls","resolve","StatelessSparkPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;AAMA;;;IAGqBA,c;;;;;;;;;;;AACnB;;;;wCAIoB;AAAA;;AAClB,aAAO,KAAKC,OAAL,CAAa;AAClBC,aAAKC,eAAIC,KADS;AAElBC,kBAAUC,oBAASC;AAFD,OAAb,EAIJC,IAJI,CAIC,UAACC,GAAD;AAAA,eAAS,OAAKC,qBAAL,CAA2BD,IAAIE,IAA/B,CAAT;AAAA,OAJD,EAKJC,KALI,CAKE,UAACC,KAAD,EAAW;AAChBC,gBAAQD,KAAR,CAAc,sDAAd,EAAsEA,KAAtE;AACD,OAPI,CAAP;AAQD;;AAED;;AAEA;;;;;;;;0CAKsBE,Y,EAAc;AAAA;;AAClC,UAAIA,aAAaC,sBAAb,IAAuCD,aAAaC,sBAAb,CAAoCC,MAA/E,EAAuF;AACrF,eAAO,kBAAQC,GAAR,CAAYH,aAAaC,sBAAb,CAAoCG,GAApC,CAAwC,UAACC,GAAD;AAAA,iBAAS,OAAKnB,OAAL,CAAa;AAC/EoB,oBAAQC,cADuE;AAE/EF,oBAF+E;AAG/EG,mCAAuB,IAHwD,CAGnD;AAHmD,WAAb,EAKjEf,IALiE,CAK5D,UAACC,GAAD,EAAS;AAAA;;AACb,+CAAae,IAAb,EAAkBC,IAAlB,4DAA0BhB,IAAIE,IAAJ,CAASa,IAAnC;AACA,kDAAaE,SAAb,EAAuBD,IAAvB,+DAA+BhB,IAAIE,IAAJ,CAASe,SAAxC;AACD,WARiE,EASjEd,KATiE,CAS3D,UAACC,KAAD,EAAW;AAChBC,oBAAQD,KAAR,CAAc,oCAAd,EAAoDO,GAApD,EAAyD,WAAzD,EAAsEP,KAAtE;AACD,WAXiE,CAAT;AAAA,SAAxC,CAAZ,EAYJL,IAZI,CAYC;AAAA,iBAAM,kBAAQmB,OAAR,CAAgBZ,YAAhB,CAAN;AAAA,SAZD,CAAP;AAaD;AACD,aAAO,kBAAQY,OAAR,CAAgBZ,YAAhB,CAAP;AACD;;;EAxCyCa,+B;;kBAAvB5B,c","file":"request.js","sourcesContent":["import {StatelessSparkPlugin} from '@ciscospark/spark-core';\n\nimport {\n  GET,\n  API,\n  RESOURCE\n} from '../constants';\n\n/**\n * @class MeetingRequest\n */\nexport default class MeetingRequest extends StatelessSparkPlugin {\n  /**\n     *  get all the active meetings for the user\n     * @returns {Array} return locus array\n    */\n  getActiveMeetings() {\n    return this.request({\n      api: API.LOCUS,\n      resource: RESOURCE.LOCI\n    })\n      .then((res) => this.determineRedirections(res.body))\n      .catch((error) => {\n        console.error('meeting-adapter: failed to get locus details error: ', error);\n      });\n  }\n\n  // locus federation, determines and populate locus if the responseBody has remote URLs to fetch locus details\n\n  /**\n   *  Fetches indivdual locus rather then getting all at once\n   * @param {object} responseBody determine the locus and fetch them if a remoteUrl is given\n   * @returns {Promise}  returns locusObject array\n   */\n  determineRedirections(responseBody) {\n    if (responseBody.remoteLocusClusterUrls && responseBody.remoteLocusClusterUrls.length) {\n      return Promise.all(responseBody.remoteLocusClusterUrls.map((url) => this.request({\n        method: GET,\n        url,\n        runWhitelistedDomains: true // allows auth token for whitelisted domain\n      })\n        .then((res) => {\n          responseBody.loci.push(...res.body.loci);\n          responseBody.locusUrls.push(...res.body.locusUrls);\n        })\n        .catch((error) => {\n          console.error('failed to get locus details from: ', url, ' Reason: ', error);\n        })))\n        .then(() => Promise.resolve(responseBody));\n    }\n    return Promise.resolve(responseBody);\n  }\n}\n"]}