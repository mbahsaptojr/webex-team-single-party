{"version":3,"sources":["collection.js"],"names":["MeetingCollection","meetings","get","meetingId","set","meeting","id","remove","deleted","getAll","options","active","value","getByKey","key"],"mappings":";;;;;;;;;;;;;;;;AAEA;;;;;AAKA,IAAMA,oBAAoB;AACxBC,YAAU,EADc;;AAGxB;;;;;;;AAOAC,KAVwB,eAUpBC,SAVoB,EAUT;AACb,WAAO,KAAKF,QAAL,CAAcE,SAAd,CAAP;AACD,GAZuB;;;AAcxB;;;;;;;AAOAC,KArBwB,eAqBpBC,OArBoB,EAqBX;AACX,SAAKJ,QAAL,CAAcI,QAAQC,EAAtB,IAA4BD,OAA5B;AACA,WAAO,KAAKJ,QAAL,CAAcI,QAAQC,EAAtB,CAAP;AACD,GAxBuB;;;AA0BxB;;;;;;;AAOAC,QAjCwB,kBAiCjBJ,SAjCiB,EAiCN;AAChB,QAAMK,UAAU,KAAKP,QAAL,CAAcE,SAAd,CAAhB;AACA,WAAO,KAAKF,QAAL,CAAcE,SAAd,CAAP;AACA,WAAOK,OAAP;AACD,GArCuB;;;AAuCxB;;;;;;;;AAQAC,QA/CwB,oBA+CU;AAAA,QAA3BC,OAA2B,uEAAjB,EAACC,QAAQ,KAAT,EAAiB;;AAChC,QAAID,QAAQC,MAAZ,EAAoB;AAClB,aAAO,sBAAO,KAAKV,QAAZ,EAAsB,UAACW,KAAD;AAAA,eAAWA,MAAMD,MAAjB;AAAA,OAAtB,CAAP;AACD;;AAED,WAAO,KAAKV,QAAZ;AACD,GArDuB;;;AAwDxB;;;;;;;;AAQAY,UAhEwB,oBAgEfC,GAhEe,EAgEVF,KAhEU,EAgEH;AACnB,QAAIE,OAAOF,KAAX,EAAkB;AAChB,aAAO,oBAAK,KAAKX,QAAV,EAAoB,UAACI,OAAD;AAAA,eAAcA,QAAQS,GAAR,MAAiBF,KAA/B;AAAA,OAApB,CAAP;AACD;AACD,WAAO,IAAP;AACD;AArEuB,CAA1B;;kBAwEeZ,iB","file":"collection.js","sourcesContent":["import {pickBy, find} from 'lodash';\n\n/**\n * The Meeting Collection manager\n * a basic object map of meetings\n * @export\n */\nconst MeetingCollection = {\n  meetings: {},\n\n  /**\n   * get the meeting at the id\n   * @param {String} meetingId ID of the meeting you wish to retreive\n   * @returns {Meeting} returns a meeting object\n   * @public\n   * @memberof MeetingCollection\n   */\n  get(meetingId) {\n    return this.meetings[meetingId];\n  },\n\n  /**\n   * set the meeting at the id\n   * @param {Meeting} meeting An instance of a Meeting to add to the collection\n   * @returns {Meeting} returns the meeting that was added\n   * @public\n   * @memberof MeetingCollection\n   */\n  set(meeting) {\n    this.meetings[meeting.id] = meeting;\n    return this.meetings[meeting.id];\n  },\n\n  /**\n   * remove the meeting at the id\n   * @param {String} meetingId ID of the meeting you wish to remove from the collection\n   * @returns {Meeting} returns the meeting that was removed\n   * @public\n   * @memberOf\n   */\n  remove(meetingId) {\n    const deleted = this.meetings[meetingId];\n    delete this.meetings[meetingId];\n    return deleted;\n  },\n\n  /**\n   * get all the meetings with optional filters\n   * @param {Object} options An object containg properties to filter by\n   * @param {Boolean} options.active Only return active meetings\n   * @returns {Meeting} returns an object map of Meeting instances\n   * @public\n   * @memberof MeetingCollection\n   */\n  getAll(options = {active: false}) {\n    if (options.active) {\n      return pickBy(this.meetings, (value) => value.active);\n    }\n\n    return this.meetings;\n  },\n\n\n  /**\n   * get a specific meeting searching for key\n   * @param {String} key\n   * @param {Any} value\n   * @returns {Meeting} if found, else returns null\n   * @public\n   * @memberof MeetingCollection\n   */\n  getByKey(key, value) {\n    if (key && value) {\n      return find(this.meetings, (meeting) => (meeting[key] === value));\n    }\n    return null;\n  }\n};\n\nexport default MeetingCollection;\n"]}