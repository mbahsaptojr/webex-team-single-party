'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _pickBy2 = require('lodash/pickBy');

var _pickBy3 = _interopRequireDefault(_pickBy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The Meeting Collection manager
 * a basic object map of meetings
 * @export
 */
var MeetingCollection = {
  meetings: {},

  /**
   * get the meeting at the id
   * @param {String} meetingId ID of the meeting you wish to retreive
   * @returns {Meeting} returns a meeting object
   * @public
   * @memberof MeetingCollection
   */
  get: function get(meetingId) {
    return this.meetings[meetingId];
  },


  /**
   * set the meeting at the id
   * @param {Meeting} meeting An instance of a Meeting to add to the collection
   * @returns {Meeting} returns the meeting that was added
   * @public
   * @memberof MeetingCollection
   */
  set: function set(meeting) {
    this.meetings[meeting.id] = meeting;
    return this.meetings[meeting.id];
  },


  /**
   * remove the meeting at the id
   * @param {String} meetingId ID of the meeting you wish to remove from the collection
   * @returns {Meeting} returns the meeting that was removed
   * @public
   * @memberOf
   */
  remove: function remove(meetingId) {
    var deleted = this.meetings[meetingId];
    delete this.meetings[meetingId];
    return deleted;
  },


  /**
   * get all the meetings with optional filters
   * @param {Object} options An object containg properties to filter by
   * @param {Boolean} options.active Only return active meetings
   * @returns {Meeting} returns an object map of Meeting instances
   * @public
   * @memberof MeetingCollection
   */
  getAll: function getAll() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { active: false };

    if (options.active) {
      return (0, _pickBy3.default)(this.meetings, function (value) {
        return value.active;
      });
    }

    return this.meetings;
  },


  /**
   * get a specific meeting searching for key
   * @param {String} key
   * @param {Any} value
   * @returns {Meeting} if found, else returns null
   * @public
   * @memberof MeetingCollection
   */
  getByKey: function getByKey(key, value) {
    if (key && value) {
      return (0, _find3.default)(this.meetings, function (meeting) {
        return meeting[key] === value;
      });
    }
    return null;
  }
};

exports.default = MeetingCollection;
//# sourceMappingURL=collection.js.map
