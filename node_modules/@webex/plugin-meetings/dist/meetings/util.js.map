{"version":3,"sources":["util.js"],"names":["MeetingsUtil","extractDestination","destination","type","dest","LOCUS_ID","url","Error","temp","split","length","getMeetingAddedType","INCOMING","CREATED","handleRoapMercury","envelope","data","eventType","LOCUSEVENT","MESSAGE_ROAP","meeting","MeetingCollection","getByKey","CORRELATION_ID","correlationId","roap","roapEvent","console","error"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,eAAe,EAArB;;AAEAA,aAAaC,kBAAb,GAAkC,UAACC,WAAD,EAAcC,IAAd,EAAuB;AACvD,MAAIC,OAAOF,WAAX;AACA,MAAIC,SAASE,mBAAb,EAAuB;AACrB,QAAI,EAAEH,eAAeA,YAAYI,GAA7B,CAAJ,EAAuC;AACrC,YAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;AACD;AACD,QAAMC,OAAON,YAAYI,GAAZ,CAAgBG,KAAhB,CAAsB,GAAtB,CAAb;AACAL,WAAOI,KAAKA,KAAKE,MAAL,GAAc,CAAnB,CAAP;AACD;AACD,SAAON,IAAP;AACD,CAVD;;AAYAJ,aAAaW,mBAAb,GAAmC,UAACR,IAAD;AAAA,SAAWA,SAASE,mBAAT,GAAoBO,mBAApB,GAA+BC,kBAA1C;AAAA,CAAnC;;AAEAb,aAAac,iBAAb,GAAiC,UAACC,QAAD,EAAc;AAAA,MACtCC,IADsC,GAC9BD,QAD8B,CACtCC,IADsC;AAAA,MAEtCC,SAFsC,GAEzBD,IAFyB,CAEtCC,SAFsC;;AAG7C,MAAIA,cAAcC,sBAAWC,YAA7B,EAA2C;AACzC,QAAMC,UAAUC,qBAAkBC,QAAlB,CAA2BC,yBAA3B,EAA2CP,KAAKQ,aAAhD,CAAhB;AACA,QAAIJ,OAAJ,EAAa;AACXA,cAAQK,IAAR,CAAaC,SAAb,CAAuBV,IAAvB;AACD,KAFD,MAGK;AACHW,cAAQC,KAAR,CAAc,qCAAd;AACA;AACD;AACF;AACF,CAbD;;kBAee5B,Y","file":"util.js","sourcesContent":["import {LOCUS_ID, INCOMING, CREATED, LOCUSEVENT, CORRELATION_ID} from '../constants';\nimport MeetingCollection from './collection';\n\nconst MeetingsUtil = {};\n\nMeetingsUtil.extractDestination = (destination, type) => {\n  let dest = destination;\n  if (type === LOCUS_ID) {\n    if (!(destination && destination.url)) {\n      throw new Error('You cannot create a meeting by locus without a locus.url defined');\n    }\n    const temp = destination.url.split('/');\n    dest = temp[temp.length - 1];\n  }\n  return dest;\n};\n\nMeetingsUtil.getMeetingAddedType = (type) => (type === LOCUS_ID ? INCOMING : CREATED);\n\nMeetingsUtil.handleRoapMercury = (envelope) => {\n  const {data} = envelope;\n  const {eventType} = data;\n  if (eventType === LOCUSEVENT.MESSAGE_ROAP) {\n    const meeting = MeetingCollection.getByKey(CORRELATION_ID, data.correlationId);\n    if (meeting) {\n      meeting.roap.roapEvent(data);\n    }\n    else {\n      console.error('no meeting associated to roap event');\n      // This should never happen\n    }\n  }\n};\n\nexport default MeetingsUtil;\n"]}