'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.STATUSES = exports.TYPES = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint-disable */

var TYPES = exports.TYPES = {
  application: 'application',
  screen: 'screen',
  stream: 'stream',
  whiteboard: 'whiteboard'
};

var STATUSES = exports.STATUSES = {
  idle: 'idle',
  ongoing: 'ongoing',
  terminating: 'terminating',
  share_failed: 'share_failed',
  stop_share_failed: 'stop_share_failed',
  starting: 'starting'
};

/**
 * Events to emit
 * ==============
 *
 * - change (object):
 *   - status (string): See STATUSES.
 *   - reason (string)
 */

var Share = function () {
  /**
   * Create a Share.
   *
   * TODO: It may be more appropriate for this class
   * to be comprised of helpful static methods.
   * @param {object} options
   * @param {object} options.resolution
   * @param {object} options.framerate
   * @param {string} options.type
   */
  function Share(_ref) {
    var resolution = _ref.resolution,
        framerate = _ref.framerate,
        type = _ref.type;
    (0, _classCallCheck3.default)(this, Share);

    this.resolution = resolution;
    this.framerate = framerate;
    this.status = STATUSES.idle;
    if ((0, _values2.default)(TYPES).includes(type)) {
      this.type = type;
    } else {
      throw new Error('Must be one of the following types: ' + (0, _values2.default)(TYPES));
    }
  }

  /**
   * Start a screenshare.
   * @returns {Promise}
   */


  (0, _createClass3.default)(Share, [{
    key: 'startScreenShare',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var mediaStream;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                mediaStream = {};
                _context.next = 3;
                return this.start(mediaStream);

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function startScreenShare() {
        return _ref2.apply(this, arguments);
      }

      return startScreenShare;
    }()

    /**
     * Start an application share.
     * @returns {Promise}
     */

  }, {
    key: 'startApplicationShare',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var mediaStream;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                mediaStream = {};
                _context2.next = 3;
                return this.start(mediaStream);

              case 3:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function startApplicationShare() {
        return _ref3.apply(this, arguments);
      }

      return startApplicationShare;
    }()

    /**
     * Start a whiteboard share for a Webex Teams meeting.
     *
     * TODO: Define parameters with Saurabh.
     * TODO: Will all meetings created by the SDK also create a space
     * if one does not exist? This would provide people with features like the whiteboard.
     * @returns {Promise}
     */

  }, {
    key: 'startWhiteboardShare',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        var mediaStream;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Check that this is a Teams meeting. Webex Meetings does not have whiteboards.
                mediaStream = {};
                _context3.next = 3;
                return this.start(mediaStream);

              case 3:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function startWhiteboardShare() {
        return _ref4.apply(this, arguments);
      }

      return startWhiteboardShare;
    }()

    /**
     * Start the share.
     *
     * A {https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/MediaStream MediaStream}
     * can be constructed. For example, entire browser tabs and entire screens can be converted to streams.
     * A *MediaStream* can also be retrieved with {https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia getUserMedia}.
     * @param {MediaStream} mediaStream
     * @returns {Promise}
     */

  }, {
    key: 'start',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(mediaStream) {
        var _this = this;

        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt('return', new _promise2.default(function () {
                  var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(resolve) {
                    return _regenerator2.default.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            // Correlate with ROAP; must depend on locus events
                            resolve(mediaStream);

                          case 1:
                          case 'end':
                            return _context4.stop();
                        }
                      }
                    }, _callee4, _this);
                  }));

                  return function (_x2) {
                    return _ref6.apply(this, arguments);
                  };
                }()));

              case 1:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function start(_x) {
        return _ref5.apply(this, arguments);
      }

      return start;
    }()

    /**
     * Stop this share.
     * @returns {Promise}
     */

  }, {
    key: 'stop',
    value: function stop() {
      return new _promise2.default(function (resolve) {
        resolve();
      });
    }
  }]);
  return Share;
}();

exports.default = Share;
//# sourceMappingURL=share.js.map
