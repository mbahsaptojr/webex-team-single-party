'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _javascriptStateMachine = require('javascript-state-machine');

var _javascriptStateMachine2 = _interopRequireDefault(_javascriptStateMachine);

var _history = require('javascript-state-machine/lib/history');

var _history2 = _interopRequireDefault(_history);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MeetingStateMachine = {
  /**
   * Initializes the StateMachine for the meeting
   * @param {Meeting} meeting A meeting instance
   * @returns {StateMachine}
   */
  create: function create(meeting) {
    var _this = this;

    return new _javascriptStateMachine2.default({
      init: _constants.MEETING_STATE_MACHINE.STATES.IDLE,
      transitions: [{
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.START,
        from: _constants.MEETING_STATE_MACHINE.STATES.IDLE,
        to: _constants.MEETING_STATE_MACHINE.STATES.ON_GOING
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.START,
        from: _constants.MEETING_STATE_MACHINE.STATES.IDLE,
        to: _constants.MEETING_STATE_MACHINE.STATES.INCOMING
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.JOIN,
        from: _constants.MEETING_STATE_MACHINE.STATES.IDLE,
        to: _constants.MEETING_STATE_MACHINE.STATES.DIALING
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.JOIN,
        from: _constants.MEETING_STATE_MACHINE.STATES.ON_GOING,
        to: _constants.MEETING_STATE_MACHINE.STATES.DIALING
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.JOIN,
        from: _constants.MEETING_STATE_MACHINE.STATES.INCOMING,
        to: _constants.MEETING_STATE_MACHINE.STATES.DIALING
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.LOCAL,
        from: _constants.MEETING_STATE_MACHINE.STATES.DIALING,
        to: _constants.MEETING_STATE_MACHINE.STATES.CONNECTING_MEDIA_LOCAL
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.CONNECT,
        from: _constants.MEETING_STATE_MACHINE.STATES.CONNECTING_MEDIA_LOCAL,
        to: _constants.MEETING_STATE_MACHINE.STATES.CONNECTING_MEDIA_REMOTE
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.ESTABLISH,
        from: _constants.MEETING_STATE_MACHINE.STATES.CONNECTING_MEDIA_REMOTE,
        to: _constants.MEETING_STATE_MACHINE.STATES.ESTABLISHED_MEDIA
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.LEAVE,
        from: _constants.MEETING_STATE_MACHINE.STATES.ESTABLISHED_MEDIA,
        to: _constants.MEETING_STATE_MACHINE.STATES.TERMINATING
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.END,
        from: _constants.MEETING_STATE_MACHINE.STATES.TERMINATING,
        to: _constants.MEETING_STATE_MACHINE.STATES.ENDED
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.CLEAN,
        from: _constants.MEETING_STATE_MACHINE.STATES.ENDED,
        to: _constants.MEETING_STATE_MACHINE.STATES.IDLE
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.CLEAN,
        from: _constants.MEETING_STATE_MACHINE.STATES.ERROR,
        to: _constants.MEETING_STATE_MACHINE.STATES.IDLE
      }, {
        name: _constants.MEETING_STATE_MACHINE.TRANSITIONS.ERROR,
        from: '*',
        to: _constants.MEETING_STATE_MACHINE.STATES.ERROR
      }],
      methods: {
        onInit: function onInit(transition) {
          meeting.logger.log('Meeting:index#onInit->' + transition.event + ' fired! State changed from \'' + transition.from + '\' to \'' + transition.to + '\' with transition \'' + transition.transition + '\' on Meeting Object: \'' + _this.id + '\'.');
        },
        onError: function onError(transition) {
          meeting.logger.log('Meeting:index#onError->' + transition.event + ' fired! State changed from \'' + transition.from + '\' to \'' + transition.to + '\' with transition \'' + transition.transition + '\' on Meeting Object: \'' + _this.id + '\'.');
        },
        onClean: function onClean(transition) {
          meeting.logger.log('Meeting:index#onClean->' + transition.event + ' fired! State changed from \'' + transition.from + '\' to \'' + transition.to + '\' with transition \'' + transition.transition + '\' on Meeting Object: \'' + _this.id + '\'.');
        },
        onJoin: function onJoin(transition) {
          meeting.logger.log('Meeting:index#onJoin->' + transition.event + ' fired! State changed from \'' + transition.from + '\' to \'' + transition.to + '\' with transition \'' + transition.transition + '\' on Meeting Object: \'' + _this.id + '\'.');
        },
        onLocal: function onLocal(transition) {
          meeting.logger.log('Meeting:index#onLocal->' + transition.event + ' fired! State changed from \'' + transition.from + '\' to \'' + transition.to + '\' with transition \'' + transition.transition + '\' on Meeting Object: \'' + _this.id + '\'.');
        },
        onConnect: function onConnect(transition) {
          meeting.logger.log('Meeting:index#onConnect->' + transition.event + ' fired! State changed from \'' + transition.from + '\' to \'' + transition.to + '\' with transition \'' + transition.transition + '\' on Meeting Object: \'' + _this.id + '\'.');
        },
        onEstablish: function onEstablish(transition) {
          meeting.logger.log('Meeting:index#onEstablish->' + transition.event + ' fired! State changed from \'' + transition.from + '\' to \'' + transition.to + '\' with transition \'' + transition.transition + '\' on Meeting Object: \'' + _this.id + '\'.');
        }
      },
      plugins: [new _history2.default({ max: 25 })]
    });
  }
};

exports.default = MeetingStateMachine;
//# sourceMappingURL=state.js.map
