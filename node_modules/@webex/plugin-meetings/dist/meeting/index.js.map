{"version":3,"sources":["index.js"],"names":["Meeting","attrs","options","namespace","MEETINGS","getMediaStreams","mediaDirection","Media","getUserMedia","id","uuid","v4","userId","resource","deviceUrl","roapSeq","meetingInfo","members","Members","parent","spark","roap","Roap","reconnectionManager","audio","video","state","MeetingStateMachine","create","stats","convoId","locusUrl","locus","url","sipUri","partner","type","owner","hostId","policy","meetingRequest","MeetingRequest","locusInfo","LocusInfo","updateMeetingObject","bind","mediaProperties","MediaProperties","setUpLocusInfoListeners","setUpLocusInfoSelfListener","Events","on","EVENTS","SELF_UNADMITTED_GUEST","payload","trigger","EVENT_TRIGGERS","MEETING_SELF_LOBBY_WAITING","SELF_ADMITTED_GUEST","MEETING_SELF_GUEST_ADMITTED","object","length","forEach","key","invitee","alertIfActive","addMember","memberIds","admitMembers","createStats","WebRTCStats","isMuted","isSelf","body","errors","sipMeetingUri","setLocus","participants","self","MeetingUtil","getLocusPartner","ONE_ON_ONE","person","sipUrl","emailAddress","email","seq","mtgLocus","mediaConnections","locusId","selfId","mediaId","host","initialSetup","pc","ontrack","event","streams","remoteStream","MEDIA_READY","EVENT_TYPES","REMOTE","stream","unsetRemoteStream","stopStream","then","MEDIA_STOPPED","remoteShare","REMOTE_SHARE","localStream","setLocalStream","LOCAL","localShare","setLocalShare","contentTracks","getVideoTracks","track","onended","stopShare","LOCAL_SHARE","unsetLocalStream","unsetLocalShare","mediaPeerConnection","sharePeerConnection","setPeerConnections","config","reconnection","detection","ReconnectionManager","PeerConnectionManager","detectFailures","reconnect","internal","mercury","ONLINE","all","close","unsetPeerConnections","off","correlationId","toggle","reject","Error","mute","joinOptions","mediaOptions","streamsOptions","join","joinResponse","addMedia","mediaSettings","mediaResponse","resolve","media","local","catch","error","MEETING_RECONNECTION_SUCCESS","MEETING_RECONNECTION_FAILURE","ReconnectionError","finally","reset","ringing","STOP","resourceId","setCorrelationId","cleanOptions","joinMeeting","response","err","isPinOrGuest","hasOwner","IntentToJoinError","logger","log","JoinMeetingError","setMediaDirection","AudioStateMachine","VideoStateMachine","attachMedia","updatedsharePeerConnection","setContentSlides","setRemoteStream","setShareStream","sendRoapMediaRequest","sdps","getSdps","meeting","MEETING_RINGING","INCOMING","acknowledgeMeeting","message","reason","BUSY","declineMeeting","emit","DESTROY_MEETING_1_1","leaveMeeting","closeLocalStream","closeLocalShare","closePeerConnections","stop","end","clean","content","mediaShares","find","element","name","CONTENT","changeMeetingFloor","disposition","FLOOR_ACTION","GRANTED","personUrl","uri","resourceUrl","RELEASED","StatelessSparkPlugin"],"mappings":"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","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport {StatelessSparkPlugin} from '@ciscospark/spark-core';\n\nimport Events from '../events';\nimport Roap from '../roap/index';\nimport Media from '../media';\nimport MediaProperties from '../media/properties';\nimport MeetingStateMachine from '../meeting/state';\nimport AudioStateMachine from '../meeting/audio';\nimport VideoStateMachine from '../meeting/video';\nimport LocusInfo from '../locus-info';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport ReconnectionManager from '../reconnection-manager';\nimport MeetingRequest from '../meeting/request';\nimport Members from '../members/index';\nimport MeetingUtil from '../meeting/util';\nimport WebRTCStats from '../stats/index';\nimport IntentToJoinError from '../errors/intent-to-join';\nimport JoinMeetingError from '../errors/join-meeting';\nimport ReconnectionError from '../errors/reconnection';\nimport {MEETINGS, EVENT_TRIGGERS, EVENT_TYPES, EVENTS, FLOOR_ACTION, BUSY, INCOMING, STOP, ONLINE, ONE_ON_ONE, CONTENT} from '../constants';\n\n/**\n  * Media Ready Event\n  * Emitted when a stream is ready to be rendered\n  * @event media:ready\n  * @instance\n  * @type {Object}\n  * @property {MediaStream} stream the media stream\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meetings\n  */\n\n/**\n  * Media Stopped Event\n  * Emitted when a stream has stopped sending\n  * @event media:stopped\n  * @instance\n  * @type {Object}\n  * @property {String} type what type of stream, remote, local\n  * @memberof Meetings\n  */\n\n/**\n  * Reconnection Success Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionSuccess\n  * @instance\n  * @type {Object}\n  * @property {Object} reconnect\n  * @memberof Meetings\n  */\n\n/**\n  * Reconnection Failure Event\n  * Emitted when reconnection of media to the active meeting was successful\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {Error} error\n  * @memberof Meetings\n  */\n\n/**\n  * Ringing Event\n  * Emitted when a ring should occur or stop, outgoing or incoming\n  * @event meeting:reconnectionFailure\n  * @instance\n  * @type {Object}\n  * @property {String} type indicating if it's out or in\n  * @property {Boolean} ringing if it should ring or not\n  * @memberof Meetings\n  */\n\n/**\n * @class Meeting\n */\nexport default class Meeting extends StatelessSparkPlugin {\n  namespace = MEETINGS;\n\n  /**\n   * Create an instance of Meeting\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   * @constructor\n   * @memberof Meeting\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.attrs = attrs;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.options = options;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.id = uuid.v4();\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.userId = attrs.userId;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.resource = attrs.resource;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.deviceUrl = attrs.deviceUrl;\n    /**\n     * @instance\n     * @type {Number}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roapSeq = 0;\n    /**\n     * @instance\n     * @type {Object}\n     * @readonly\n     * @public\n     * @todo needs to be defined as a class\n     * @memberof Meeting\n     */\n    this.meetingInfo = {};\n    /**\n     * @instance\n     * @type {Members}\n     * @public\n     * @memberof Meeting\n     */\n    this.members = new Members({}, {parent: this.spark});\n    /**\n     * @instance\n     * @type {Roap}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.roap = new Roap({}, options);\n    /**\n     * created later\n     * @instance\n     * @type {ReconnectionManager}\n     * @readonly\n     * @private\n     * @memberof Meeting\n     */\n    this.reconnectionManager = null;\n    /**\n     * created later\n     * @instance\n     * @type {AudioStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.audio = null;\n    /**\n     * created later\n     * @instance\n     * @type {VideoStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.video = null;\n    /**\n     * @instance\n     * @type {MeetingStateMachine}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.state = MeetingStateMachine.create(this);\n    /**\n     * created later on user demand\n     * @instance\n     * @type {WebRTCStats}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.stats = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.convoId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.locusUrl = (attrs.locus && attrs.locus.url) || null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.sipUri = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.partner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.type = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.owner = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.hostId = null;\n    /**\n     * @instance\n     * @type {String}\n     * @readonly\n     * @public\n     * @memberof Meeting\n     */\n    this.policy = null;\n    /**\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.meetingRequest = new MeetingRequest({}, options);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MeetingRequest}\n     * @private\n     * @memberof Meeting\n     */\n    this.locusInfo = new LocusInfo(this.updateMeetingObject.bind(this), attrs.locus ? attrs.locus : {}, this.spark);\n    /**\n     * Passing only info as we send basic info for meeting added event\n     * @instance\n     * @type {MediaProperties}\n     * @public\n     * @memberof Meeting\n     */\n    this.mediaProperties = new MediaProperties();\n    this.setUpLocusInfoListeners();\n  }\n\n  /**\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoListeners() {\n    this.setUpLocusInfoSelfListener();\n  }\n\n  /**\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setUpLocusInfoSelfListener() {\n    Events.on(EVENTS.SELF_UNADMITTED_GUEST, (payload) => {\n      if (payload) {\n        this.trigger(EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING, {\n          payload\n        });\n      }\n    });\n    Events.on(EVENTS.SELF_ADMITTED_GUEST, (payload) => {\n      if (payload) {\n        this.trigger(EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED, {\n          payload\n        });\n      }\n    });\n  }\n\n  /**\n   * @param {Object} object\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   * // TODO: is this function necessary?\n   */\n  updateMeetingObject(object) {\n    // Validate if these are valid meeting object property\n    // TODO: add a check to make sure the value passed in the constructor\n    // is not changed by any delta event\n    if (object && Object.keys(object).length) {\n      Object.keys(object).forEach((key) => {\n        this[key] = object[key];\n      });\n    }\n  }\n\n  /**\n   * invite a guest to the call that isn't normally part of this call\n   * @param {Object} invitee\n   * @param {String} invitee.emailAddress\n   * @param {String} invitee.email\n   * @param {Boolean} alertIfActive optional\n   * @returns {Promise} see #members.addMember\n   * @public\n   * @memberof Meeting\n   */\n  invite(invitee, alertIfActive = true) {\n    return this.members.addMember(invitee, alertIfActive);\n  }\n\n  /**\n   * admit the guest(s) to the call once they are waiting\n   * @param {Array} memberIds\n   * @returns {Promise} see #members.admitMembers\n   * @public\n   * @memberof Meeting\n   */\n  admit(memberIds) {\n    return this.members.admitMembers(memberIds);\n  }\n\n  /**\n   * Reference to the Members object\n   * @returns {Members}\n   * @public\n   * @memberof Meeting\n   */\n  getMembers() {\n    return this.members;\n  }\n\n  /**\n   * Reference to the stats builder object\n   * @param {Object} options - optional\n   * @param {Object} options.media\n   * @param {Object} options.screen\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  getStats(options) {\n    if (!this.stats) {\n      return this.createStats(options);\n    }\n    return this.stats;\n  }\n\n  /**\n   * Overwrite the stats builder object\n   * @param {Object} options - optional\n   * @param {Object} options.media\n   * @param {Object} options.screen\n   * @returns {WebRTCStats}\n   * @public\n   * @memberof Meeting\n   */\n  createStats(options = {}) {\n    this.stats = new WebRTCStats(this.attrs, this.options, options);\n    return this.stats;\n  }\n\n  /**\n   * Convenience function to tell whether a meeting is muted\n   * @returns {Boolean} if meeting audio muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isAudioMuted() {\n    return this.audio && this.audio.isMuted();\n  }\n\n  /**\n   * Convenience function to tell if the end user last changed the audio state\n   * @returns {Boolean} if audio was manipulated by the end user\n   * @public\n   * @memberof Meeting\n   */\n  isAudioSelf() {\n    return this.audio && this.audio.isSelf();\n  }\n\n  /**\n   * Convenience function to tell whether video is muted\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoMuted() {\n    return this.video && this.video.isMuted();\n  }\n\n  /**\n   * Convenience function to tell whether the end user changed the video state\n   * @returns {Boolean} if meeting video is muted or not\n   * @public\n   * @memberof Meeting\n   */\n  isVideoSelf() {\n    return this.video && this.video.isSelf();\n  }\n\n  /**\n   * Sets the meeting info on the class instance\n   * @param {Object} meetingInfo\n   * @param {String} meetingInfo.convoId\n   * @param {String} meetingInfo.locusUrl\n   * @param {String} meetingInfo.sipUri\n   * @param {Object} meetingInfo.owner\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseMeetingInfo(meetingInfo) {\n    // MeetingInfo will be undefined for 1:1 calls\n    if (meetingInfo && meetingInfo.body && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {\n      this.convoId = meetingInfo.body.convoId || this.convoId;\n      this.locusUrl = meetingInfo.body.locusUrl || this.locusUrl;\n      this.sipUri = meetingInfo.body.sipMeetingUri || this.sipUri;\n      this.owner = meetingInfo.body.owner || this.owner;\n    }\n  }\n\n  /**\n   * Sets the first locus info on the class instance\n   * @param {Object} locus\n   * @param {String} locus.url\n   * @param {Array} locus.participants\n   * @param {Object} locus.self\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  parseLocus(locus) {\n    if (locus) {\n      this.locusUrl = locus.url;\n      // TODO: move this to parse participants module\n      this.setLocus(locus);\n\n      // check if we can extract this info from partner\n      // Parsing of locus object must be finished at this state\n      if (locus.participants && locus.self) {\n        this.partner = MeetingUtil.getLocusPartner(locus.participants, locus.self);\n      }\n\n      // For webex meeting the sipUrl gets updated in info parser\n      if (!this.sipUri && this.partner && this.type === ONE_ON_ONE) {\n        this.sipUri = this.partner.person.sipUrl || this.partner.person.emailAddress || this.partner.person.email;\n      }\n    }\n  }\n\n  /**\n   * Sets the sip uri on the class instance\n   * uses meeting info as precedence\n   * @param {String} sipUri\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setSipUri(sipUri) {\n    // This can be tel no, device id or a sip uri, user Id\n    this.sipUri = sipUri;\n  }\n\n  /**\n   * Set the roap seq on the class instance\n   * @param {Number} seq\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setRoapSeq(seq) {\n    if (seq) {\n      this.roapSeq = seq;\n    }\n  }\n\n  /**\n   * Set the locus info the class instance\n   * @param {Object} locus\n   * @param {Array} locus.mediaConnections\n   * @param {String} locus.locusUrl\n   * @param {String} locus.locusId\n   * @param {String} locus.mediaId\n   * @param {Object} locus.host\n   * @todo change name to genertic parser\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setLocus(locus) {\n    const mtgLocus = locus.locus || locus;\n    // LocusInfo object saves the locus object\n    // this.locus = mtgLocus;\n    this.mediaConnections = locus.mediaConnections;\n    this.locusUrl = locus.locusUrl || locus.url;\n    this.locusId = locus.locusId;\n    this.selfId = locus.selfId;\n    this.mediaId = locus.mediaId;\n    this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;\n    this.locusInfo.initialSetup(mtgLocus);\n  }\n\n  /**\n   * Sets the remote stream on the class instance and emits and\n   * event to developers\n   * @param {Object} pc The remote stream peer connection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setRemoteStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      [this.mediaProperties.remoteStream] = event.streams;\n\n      // eslint-disable-next-line no-warning-comments\n      // TODO: It's possible for media to not be present\n      // so we might need to either\n      // A) wait until we have media flowing\n      // B) trigger a second event when video is flowing\n      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {\n        type: EVENT_TYPES.REMOTE,\n        stream: this.mediaProperties.remoteStream\n      });\n    };\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetRemoteStream() {\n    this.mediaProperties.unsetRemoteStream();\n  }\n\n  /**\n   * Removes the remote stream on the class instance and triggers an event\n   * to developers\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  closeRemoteStream() {\n    return Media.stopStream(this.mediaProperties.remoteStream).then(() => {\n      this.trigger(EVENT_TRIGGERS.MEDIA_STOPPED, {\n        type: EVENT_TYPES.REMOTE\n      });\n    });\n  }\n\n  /**\n   * Sets the sceen stream on the class instance and triggers and event to developers\n   * @param {Object} pc a peer connection instance for the screen\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setShareStream(pc) {\n    if (!pc) {\n      return;\n    }\n    // eslint-disable-next-line no-param-reassign\n    pc.ontrack = (event) => {\n      [this.mediaProperties.remoteShare] = event.streams;\n\n      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {\n        type: EVENT_TYPES.REMOTE_SHARE,\n        stream: this.mediaProperties.remoteShare\n      });\n    };\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localStream the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalStream(localStream) {\n    if (localStream) {\n      this.mediaProperties.setLocalStream(localStream);\n      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {\n        type: EVENT_TYPES.LOCAL,\n        stream: this.mediaProperties.localStream\n      });\n    }\n  }\n\n  /**\n   * Sets the local media stream on the class and emits an event to the developer\n   * @param {Stream} localShare the local media stream\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setLocalShare(localShare) {\n    if (localShare) {\n      this.mediaProperties.setLocalShare(localShare);\n      const contentTracks = this.mediaProperties.localShare.getVideoTracks();\n      contentTracks.forEach((track) => {\n        track.onended = () => {\n          this.stopShare();\n        };\n      });\n\n      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {\n        type: EVENT_TYPES.LOCAL_SHARE,\n        stream: this.mediaProperties.localShare\n      });\n    }\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalStream() {\n    return Media.stopStream(this.mediaProperties.localStream).then(() => {\n      this.trigger(EVENT_TRIGGERS.MEDIA_STOPPED, {\n        type: EVENT_TYPES.LOCAL\n      });\n    });\n  }\n\n  /**\n   * Closes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @event media:stopped\n   * @public\n   * @memberof Meeting\n   */\n  closeLocalShare() {\n    return Media.stopStream(this.mediaProperties.localShare).then(() => {\n      this.trigger(EVENT_TRIGGERS.MEDIA_STOPPED, {\n        type: EVENT_TYPES.LOCAL_SHARE\n      });\n    });\n  }\n\n  /**\n   * Removes the local stream from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalStream() {\n    this.mediaProperties.unsetLocalStream();\n  }\n\n  /**\n   * Removes the local share from the class and emits an event to the developer\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetLocalShare() {\n    this.mediaProperties.unsetLocalShare();\n  }\n\n  /**\n   * Sets the peer connections on the class\n   * sets up reconnection logic\n   * @param {PeerConnection} mediaPeerConnection\n   * @param {PeerConnection} sharePeerConnection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  setPeerConnections(mediaPeerConnection, sharePeerConnection) {\n    this.mediaProperties.setPeerConnections(mediaPeerConnection, sharePeerConnection);\n    // TODO: need to test more with the triggers for reconnect, we also need to add triggers based on getStats reports\n    if (this.config.reconnection.detection) {\n      this.reconnectionManager = new ReconnectionManager(this);\n      PeerConnectionManager.detectFailures(\n        this.mediaProperties.mediaPeerConnection,\n        this.mediaProperties.sharePeerConnection,\n        this.reconnect\n      );\n      // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury\n      // if the meeting has active peer connections, it should try to reconnect.\n      this.spark.internal.mercury.on(ONLINE, () => {\n        this.reconnect();\n      });\n    }\n  }\n\n  /**\n   * Close the peer connections and remove them from the class. Triggers an event\n   * when each is closed.\n   * @returns {Promise} returns a resolved promise with an array of closed peer connections\n   * @public\n   * @memberof Meeting\n   */\n  closePeerConnections() {\n    return Promise.all([\n      PeerConnectionManager.close(this.mediaProperties.mediaPeerConnection),\n      PeerConnectionManager.close(this.mediaProperties.sharePeerConnection)\n    ]);\n  }\n\n  /**\n   * Unsets the peer connections on the class\n   * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST\n   * @param {PeerConnection} mediaPeerConnection\n   * @param {PeerConnection} sharePeerConnection\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  unsetPeerConnections() {\n    this.mediaProperties.unsetPeerConnections();\n    if (this.config.reconnection.detection) {\n      this.spark.internal.mercury.off(ONLINE);\n    }\n  }\n\n  /**\n   * Convenience method to set the correlation id for the Meeting\n   * @param {String} id correlation id to set on the class\n   * @returns {undefined}\n   * @private\n   * @memberof Meeting\n   */\n  setCorrelationId(id) {\n    this.correlationId = id;\n  }\n\n  /**\n   * Mute the audio for a meeting\n   * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  muteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new Error('no audio control associated to the meeting'));\n    }\n    return this.audio.toggle({\n      mute: true,\n      self: true\n    });\n  }\n\n  /**\n   * Unmute meeting audio\n   * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteAudio() {\n    if (!this.audio || (this.audio && !this.audio.toggle)) {\n      return Promise.reject(new Error('no audio control associated to the meeting'));\n    }\n    return this.audio.toggle({\n      mute: false,\n      self: true\n    });\n  }\n\n  /**\n   * Mute the video for a meeting\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  muteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new Error('no video control associated to the meeting'));\n    }\n    return this.video.toggle({\n      mute: true,\n      self: true\n    });\n  }\n\n  /**\n   * Unmute meeting video\n   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set\n   * @public\n   * @memberof Meeting\n   */\n  unmuteVideo() {\n    if (!this.video || (this.video && !this.video.toggle)) {\n      return Promise.reject(new Error('no audio control associated to the meeting'));\n    }\n    const options = {};\n    options.mute = false;\n    options.self = true;\n    return this.video.toggle({\n      mute: false,\n      self: true\n    });\n  }\n\n  /**\n   * @param {Object} joinOptions - see #join()\n   * @param {Object} mediaOptions - see #addMedia()\n   * @param {object} streamsOptions - see #getMediaStreams()\n   * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}\n   * @public\n   * @memberof Meeting\n   */\n  joinWithMedia(joinOptions, mediaOptions, streamsOptions) {\n    this.join(joinOptions)\n      .then((joinResponse) =>\n        this.getMediaStreams(streamsOptions).then(([localStream, localShare]) =>\n          this.addMedia({\n            mediaSettings: mediaOptions,\n            localShare,\n            localStream\n          }).then((mediaResponse) => {\n            Promise.resolve({\n              join: joinResponse,\n              media: mediaResponse,\n              local: [localStream, localShare]\n            });\n          })))\n      .catch((error) => Promise.reject(error));\n  }\n\n  /**\n   * initiates the reconnection of the media in the meeting\n   * @returns {Promise} resolves with {reconnect} or errors with {error}\n   * @public\n   * @memberof Meeting\n   */\n  reconnect() {\n    if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {\n      throw new Error('Cannot reconnect, ReconnectionManager must first be defined.');\n    }\n    return this.reconnectionManager\n      .reconnect(this)\n      .then((reconnect) => {\n        this.trigger(EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS, {\n          reconnect\n        });\n        return Promise.resolve(reconnect);\n      })\n      .catch((error) => {\n        this.trigger(EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE, {\n          error: new ReconnectionError(error)\n        });\n        return Promise.reject(new ReconnectionError(error));\n      })\n      .finally((reconnect) => {\n        this.reconnectionManager.reset();\n        return Promise.resolve(reconnect);\n      });\n  }\n\n  /**\n   *\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {Object} options A configurable options object for joining a meeting\n   * @param {String} options.resourceId pass the deviceId\n   * @param {Number} options.hostPin pass the host pin\n   * @param {Boolean} options.moderator pass the moderator flag\n   * @returns {Promise} the join response\n   * @public\n   * @memberof Meeting\n   * Scenario A: Joining own claimed personal meeting room, don't pass hostPin, do pass moderator\n   * Scenario B: Joining other's claimed personal meeting room, do pass hostPin (if desired to join as host, or nullify), do pass moderator\n   * Scenario C: Joining an unclaimed personal meeting room, -do not- pass hostPin or moderator on first try, -do- pass hostPin and moderator\n   *             if joining as host on second loop, -do not- pass hostPin do pass moderator if joining as guest on second loop\n   * Scenario D: Joining any other way (sip, pstn, convoId, link just need to specify resourceId)\n   */\n  join(options = {}) {\n    this.ringing(STOP, false);\n    this.resourceId = this.resourceId || options.resourceId;\n    this.setCorrelationId(this.id);\n    // this.state.join();\n    // TODO: this should be removed following locus changes.\n    options = MeetingUtil.cleanOptions(options, this.meetingInfo, this.owner, this.userId);\n    // normal join meeting, scenario A, D\n    return MeetingUtil.joinMeeting(this, options)\n      .then((response) => {\n        this.setLocus(response);\n        return response;\n        // this.state.connect();\n      })\n      .catch((err) => {\n        // joining a claimed PMR that is not my own, scenario B\n        if (MeetingUtil.isPinOrGuest(err)) {\n          if (MeetingUtil.hasOwner(this.meetingInfo)) {\n            return MeetingUtil.joinMeeting(this, options).then((response) => {\n              this.setLocus(response);\n              return response;\n              // this.state.connect();\n            });\n          }\n          // request host pin or non host for unclaimed PMR, start of Scenario C\n          // see https://sqbu-github.cisco.com/WebExSquared/locus/wiki/Locus-Lobby-and--IVR-Feature\n          return Promise.reject(new IntentToJoinError(err));\n        }\n        this.logger.log('Meeting:index#join --> Error joining the call on getLocalMedia, ', err);\n        return Promise.reject(new JoinMeetingError(err, options));\n      });\n  }\n\n  /**\n   * get local media streams based on options passed\n   * @param {Object} mediaDirection A configurable options object for joining a meeting\n   * @returns {Promise} see #Media.getUserMedia\n   * @public\n   * @todo should be static\n   * @memberof Meeting\n   */\n  getMediaStreams = (mediaDirection) => Media.getUserMedia(mediaDirection);\n\n  /**\n   * Specify joining via audio (option: pstn), video, screenshare\n   * @param {Object} options A configurable options object for joining a meeting\n   * @param {Object} options.resourceId pass the deviceId\n   * @param {MediaStream} options.localStream\n   * @param {MediaStream} options.localShare\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  addMedia(options = {}) {\n    const {localStream, localShare} = options;\n    // eslint-disable-next-line no-warning-comments\n    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register\n    this.mediaProperties.setMediaDirection(Object.assign(this.config.mediaSettings, options.mediaSettings));\n    // add a setup a function move the create and setup media in future\n    // TODO: delete old audio and video if stale\n    this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);\n    this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);\n    // this.state.local();\n    this.setLocalStream(localStream);\n    this.setLocalShare(localShare);\n    return Media.attachMedia(this.mediaProperties.mediaDirection, PeerConnectionManager, localStream, localShare, {\n      mediaPeerConnection: this.mediaProperties.mediaPeerConnection,\n      sharePeerConnection: this.mediaProperties.sharePeerConnection\n    })\n      .then(([mediaPeerConnection, sharePeerConnection]) => {\n        const updatedsharePeerConnection = PeerConnectionManager.setContentSlides(sharePeerConnection);\n        this.setPeerConnections(mediaPeerConnection, updatedsharePeerConnection);\n        this.setRemoteStream(this.mediaProperties.mediaPeerConnection);\n        this.setShareStream(this.mediaProperties.sharePeerConnection);\n      })\n      .catch((err) => {\n        this.logger.log('Meeting:index#join --> Error joining the call on roap initialization, ', err);\n        throw err;\n      })\n      .then(() =>\n        this.roap\n          .sendRoapMediaRequest({\n            sdps: MeetingUtil.getSdps(this),\n            roapSeq: this.roapSeq,\n            meeting: this // or can pass meeting ID\n          })\n          .catch((err) => {\n            this.logger.error('Meeting:index#join --> Error joining the call on send roap media request, ', err);\n            throw err;\n          }))\n      .then(() => {\n        // this.state.establish();\n      });\n  }\n\n  /**\n   * @param {String} type should be null if ringing is false\n   * @param {Boolean} ringing coerced to null if false\n   * @returns {undefined}\n   * @event meeting:ringing\n   * @memberof Meeting\n   * TODO: move this to meeting state machine to manage ringing state\n   */\n  ringing(type, ringing = true) {\n    this.trigger(EVENT_TRIGGERS.MEETING_RINGING, {\n      type,\n      ringing\n    });\n  }\n\n  /**\n   * acknowledge the meeting, outgoing or incoming\n   * @param {String} type\n   * @param {Boolean} ringing optional\n   * @returns {Promise} resolve {message, ringing, response}\n   * @public\n   * @memberof Meeting\n   */\n  acknowledge(type, ringing = true) {\n    if (!type) {\n      return Promise.reject(new Error('Type must be set to acknowledge the meeting.'));\n    }\n    if (type === INCOMING) {\n      return this.meetingRequest\n        .acknowledgeMeeting({\n          locusUrl: this.locusUrl,\n          deviceUrl: this.deviceUrl,\n          id: this.id\n        })\n        .then((response) => Promise.resolve(response))\n        .then((response) => {\n          this.ringing(type, ringing);\n          return Promise.resolve({\n            message: `Meeting type: ${type} is acknowledged. Triggered ringing with: ${ringing}.`,\n            ringing,\n            response\n          });\n        });\n    }\n    // TODO: outside of 1:1 incoming, and all outgoing calls\n    return Promise.resolve({\n      message: 'noop'\n    });\n  }\n\n  /**\n   * Decline this meeting\n   * @param {String} reason\n   * @returns {undefined}\n   * @public\n   * @memberof Meeting\n   */\n  decline(reason = BUSY) {\n    return this.meetingRequest\n      .declineMeeting({\n        locusUrl: this.locusUrl,\n        deviceUrl: this.deviceUrl,\n        reason\n      })\n      .then((response) => {\n        this.ringing(STOP, false);\n        Events.emit(EVENTS.DESTROY_MEETING_1_1, {\n          meeting: this,\n          response,\n          type: EVENTS.DESTROY_MEETING_1_1\n        });\n      });\n  }\n\n  /**\n   * Leave the current meeting\n   * @param {Object} options An object of options\n   * @param {Boolean} options.keepLocalMedia Whether to tear down the local media connections or not.\n   * @returns {Promise}\n   * @public\n   * @memberof Meeting\n   */\n  leave() {\n    // this.state.leave();\n    return this.meetingRequest\n      .leaveMeeting({\n        locusUrl: this.locusUrl,\n        selfId: this.selfId,\n        correlationId: this.correlationId,\n        resourceId: null,\n        deviceUrl: this.deviceUrl\n      })\n      .then(() => this.closeLocalStream())\n      .then(() => this.closeLocalShare())\n      .then(() => this.closePeerConnections())\n      .then(() => {\n        this.unsetLocalStream();\n        this.unsetLocalShare();\n        this.unsetRemoteStream();\n        this.unsetPeerConnections();\n      })\n      .then(() => {\n        this.roap.stop(this.correlationId, this.roapSeq);\n      })\n      .then(() => {\n        this.state.end();\n      })\n      .catch((err) => {\n        this.state.error();\n        this.logger.error(`An error occured while trying to leave meeting with an id of ${this.id}`, err);\n      })\n      .finally(() => {\n        this.state.clean();\n      });\n  }\n  // /**\n  //  *\n  //  * Move this meeting to a given device\n  //  * only possible if you are paired with the given device\n  //  * @param {string} deviceID\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // moveToDevice(deviceID) {\n  //   return new Promise((resolve) => resolve(deviceID));\n  // }\n\n  // /**\n  //  *\n  //  * Move this meeting back to the current client device, e.g., personal laptop.\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // moveToClient() {\n  //   return new Promise((resolve) => resolve({}));\n  // }\n\n  // /**\n  //  *\n  //  * Update the audio options of this meeting\n  //  * @param {string} status\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // updateAudio(status) {\n  //   return new Promise((resolve) => resolve(status));\n  // }\n\n  // /**\n  //  *\n  //  * Update the video option of this meeting\n  //  * @param {string} status\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // updateVideo(status) {\n  //   return new Promise((resolve) => resolve(status));\n  // }\n\n  // /**\n  //  *\n  //  * Update screen sharing preference of this meeting\n  //  * @param {string} shareType\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // updateShare(shareType) {\n  //   return new Promise((resolve) => resolve(shareType));\n  // }\n\n  /**\n   * start sharing content\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @public\n   * @memberof Meeting\n   */\n  share() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n    if (content) {\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.GRANTED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      });\n    }\n    return Promise.reject(new Error('Cannot share without content.'));\n  }\n\n  /**\n   * stops the screen share\n   * @returns {Promise} see #meetingRequest.changeMeetingFloor\n   * @public\n   * @memberof Meeting\n   */\n  stopShare() {\n    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);\n    if (content) {\n      return this.meetingRequest.changeMeetingFloor({\n        disposition: FLOOR_ACTION.RELEASED,\n        personUrl: this.locusInfo.self.url,\n        deviceUrl: this.deviceUrl,\n        uri: content.url,\n        resourceUrl: this.resourceUrl\n      });\n    }\n    return Promise.reject(new Error('Cannot stop share without content'));\n  }\n\n  // /**\n  //  *\n  //  * Send this meeting to the phone system\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // sendDtmf() {\n  //   return new Promise((resolve) => resolve({}));\n  // }\n  // /**\n  //  *\n  //  * Get statistics of the current meeting\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // getStats() {\n  //   return new Promise((resolve) => resolve({}));\n  // }\n\n  // /**\n  //  *\n  //  * Lock this meeting\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // lock() {\n  //   return new Promise((resolve) => resolve({}));\n  // }\n\n  // /**\n  //  *\n  //  * Unlock this meeting\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // unlock() {\n  //   return new Promise((resolve) => resolve({}));\n  // }\n\n  // /**\n  //  *\n  //  * Intiate a recording of this meeting\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // startRecording() {\n  //   return new Promise((resolve) => resolve({}));\n  // }\n\n  // /**\n  //  *\n  //  * End the recording of this meeting\n  //  * @returns {Promise}\n  //  * @memberof Meeting\n  //  */\n  // stopRecording() {\n  //   return new Promise((resolve) => resolve({}));\n  // }\n}\n"]}