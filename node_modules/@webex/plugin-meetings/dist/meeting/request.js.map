{"version":3,"sources":["request.js"],"names":["MeetingRequest","options","sipUri","deviceUrl","locusUrl","resourceId","correlationId","ensureConversation","moderator","hostPin","url","body","usingResource","respOnlySdp","allowMultiDevice","supportsNativeLobby","undefined","hostPIN","PARTICIPANT","spark","internal","device","services","locusServiceUrl","LOCI","CALL","invitee","address","callPreferences","requestedMedia","request","method","POST","uri","qs","alternateRedirect","desync","syncUrl","concat","split","LOCUS","SYNCDEBUG","GET","catch","err","console","error","reject","selfId","LEAVE","PUT","ALERT","id","DECLINE","reason","MEDIA","localMedias","floorReq","disposition","FLOOR_ACTION","GRANTED","beneficiary","personUrl","devices","requester","floor","resourceUrl","StatelessSparkPlugin"],"mappings":"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","file":"request.js","sourcesContent":["import {StatelessSparkPlugin} from '@ciscospark/spark-core';\n\nimport {\n  PARTICIPANT,\n  LOCI,\n  CALL,\n  POST,\n  PUT,\n  LEAVE,\n  MEDIA,\n  FLOOR_ACTION,\n  DECLINE,\n  ALERT,\n  GET,\n  LOCUS\n} from '../constants';\n\n/**\n * @class MeetingRequest\n */\nexport default class MeetingRequest extends StatelessSparkPlugin {\n  /**\n   * Make a network request to join a meeting\n   * @param {Object} options\n   * @param {String} options.sipUri\n   * @param {String} options.deviceUrl\n   * @param {String} options.locusUrl\n   * @param {String} options.resourceId,\n   * @param {String} options.correlationId\n   * @returns {Promise}\n   */\n  joinMeeting(options) {\n    const {\n      sipUri, deviceUrl, locusUrl, resourceId, correlationId, ensureConversation, moderator, hostPin\n    } = options;\n\n    let url = '';\n\n    const body = {\n      deviceUrl,\n      usingResource: resourceId || null,\n      correlationId,\n      respOnlySdp: true,\n      allowMultiDevice: true,\n      ensureConversation: ensureConversation || false,\n      supportsNativeLobby: 1\n    };\n\n    if (moderator !== undefined) {\n      body.moderator = moderator;\n    }\n\n    if (hostPin !== undefined) {\n      body.hostPIN = hostPin;\n    }\n\n    if (locusUrl) {\n      url = `${locusUrl}/${PARTICIPANT}`;\n    }\n    else if (sipUri) {\n      // eslint-lin-disable-next-line no-warning-comments\n      // TODO switch to use the locus object and look into federation?\n      url = `${this.spark.internal.device.services.locusServiceUrl}/${LOCI}/${CALL}`;\n      body.invitee = {\n        address: sipUri\n      };\n    }\n\n    if (resourceId === sipUri) {\n      body.callPreferences = {\n        requestedMedia: ['SLIDES']\n      };\n    }\n\n    return this.spark.request({\n      method: POST,\n      uri: url,\n      qs: {alternateRedirect: true}, // for handling locus URL redirections\n      body\n    });\n  }\n\n  /**\n   * Syns the missed delta event\n   * @param {Object} options\n   * @param {boolen} options.desync flag to get partial or whole locus object\n   * @param {String} options.syncUrl sync url to get ht elatest locus delta\n   * @returns {Promise}\n   */\n  syncMeeting(options) {\n    /* eslint-disable no-else-return */\n    const {desync} = options;\n    let {syncUrl} = options;\n    /* istanbul ignore else */\n    if (desync) {\n      // check for existing URL parameters\n      syncUrl = syncUrl.concat(syncUrl.split('?')[1] ? '&' : '?').concat(`${LOCUS.SYNCDEBUG}=${desync}`);\n    }\n    return this.request({\n      method: GET,\n      uri: syncUrl\n    })// TODO: Handle if delta sync failed . Get the full locus object\n      .catch((err) =>\n        err);\n  }\n\n  /**\n   * Request to get the complete locus object\n   * @param {Object} options\n   * @param {boolen} options.desync flag to get partial or whole locus object\n   * @param {String} options.locusUrl sync url to get ht elatest locus delta\n   * @returns {Promise}\n   */\n\n  getFullLocus(options) {\n    let {locusUrl} = options;\n    const {desync} = options;\n\n    if (locusUrl) {\n      if (desync) {\n        locusUrl += `?${LOCUS.SYNCDEBUG}=${desync}`;\n      }\n      return this.request({\n        method: GET,\n        uri: locusUrl\n      })\n        .catch((err) => {\n          console.error('error getting full locus object', err);\n        });\n    }\n    return Promise.reject();\n  }\n\n  /**\n   * Make a network request to leave a meeting\n   * @param {Object} options\n   * @param {String} options.deviceUrl\n   * @param {String} options.resourceId,\n   * @param {String} options.correlationId\n   * @returns {Promise}\n   */\n  leaveMeeting(options) {\n    const url = `${options.locusUrl}/${PARTICIPANT}/${options.selfId}/${LEAVE}`;\n    const body = {\n      deviceUrl: options.deviceUrl,\n      usingResource: options.resourceId,\n      correlationId: options.correlationId\n    };\n    return this.request({\n      method: PUT,\n      uri: url,\n      body\n    });\n  }\n\n  /**\n   * Make a network request to acknowledge a meeting\n   * @param {Object} options\n   * @param {String} options.locusUrl\n   * @param {String} options.deviceUrl\n   * @param {String} options.id\n   * @returns {Promise}\n   */\n  acknowledgeMeeting(options) {\n    const uri = `${options.locusUrl}/${PARTICIPANT}/${ALERT}`;\n    const body = {\n      deviceUrl: options.deviceUrl,\n      correlationId: options.id\n    };\n    return this.request({\n      method: PUT,\n      uri,\n      body\n    });\n  }\n\n  /**\n   * Make a network request to decline a meeting\n   * @param {Object} options\n   * @param {String} options.locusUrl\n   * @param {String} options.deviceUrl\n   * @param {String} options.reason\n   * @returns {Promise}\n   */\n  declineMeeting(options) {\n    const uri = `${options.locusUrl}/${PARTICIPANT}/${DECLINE}`;\n    const body = {\n      deviceUrl: options.deviceUrl,\n      reason: options.reason\n    };\n    return this.request({\n      method: PUT,\n      uri,\n      body\n    });\n  }\n\n  /**\n   * Toggle remote audio and/or video\n   * @param {Object} options options for toggling\n   * @param {String} options.selfId Locus self id??\n   * @param {String} options.locusUrl Locus url\n   * @param {String} options.deviceUrl Url of a device\n   * @param {String} options.resourceId Populated if you are paired to a device\n   * @param {String} options.localMedias local sdps\n   * @returns {Promise}\n   */\n  remoteAudioVideoToggle(options) {\n    const url = `${options.locusUrl}/${PARTICIPANT}/${options.selfId}/${MEDIA}`;\n    const body = {\n      deviceUrl: options.deviceUrl,\n      usingResource: options.resourceId || null,\n      correlationId: options.correlationId,\n      respOnlySdp: true,\n      localMedias: options.localMedias\n    };\n    return this.request({\n      method: PUT,\n      uri: url,\n      body\n    });\n  }\n\n  /**\n   * change the content floor grant\n   * @param {Object} options options for floor grant\n   * @param {String} options.disposition floor action (granted/released)\n   * @param {String} options.personUrl personUrl who is requesting floor\n   * @param {String} options.deviceUrl Url of a device\n   * @param {String} options.resourceId Populated if you are paired to a device\n   * @param {String} options.uri floor grant uri\n   * @returns {Promise}\n   */\n  changeMeetingFloor(options) {\n    let floorReq = {disposition: options.disposition};\n    /* istanbul ignore else */\n    if (options.disposition === FLOOR_ACTION.GRANTED) {\n      floorReq = {\n        beneficiary: {\n          url: options.personUrl,\n          devices: [{url: options.deviceUrl}]\n        },\n        disposition: options.disposition,\n        requester: {\n          url: options.personUrl\n        }\n      };\n    }\n\n    return this.request({\n      uri: options.uri,\n      method: PUT,\n      body: {\n        floor: floorReq,\n        resourceUrl: options.resourceUrl\n      }\n    });\n  }\n}\n"]}