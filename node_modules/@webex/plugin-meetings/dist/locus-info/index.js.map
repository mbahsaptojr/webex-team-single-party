{"version":3,"sources":["index.js"],"names":["LocusInfo","callback","locus","spark","updateMeeting","controls","conversationUrl","created","fullState","host","mediaShares","participantsUrl","replaces","url","aclUrl","baseSequence","sequence","membership","identities","emitChange","parsedLocus","updateMeetingInfo","info","updateSelf","self","participants","meeting","Parser","updateWithDeltaLocus","onFullLocus","data","eventType","LOCUSEVENT","PARTICIPANT_JOIN","PARTICIPANT_LEFT","CONTROLS_UPDATED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_AUDIO_UNMUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_UNMUTED","SELF_CHANGED","PARTICIPANT_UPDATED","PARTICIPANT_CONTROLS_UPDATED","PARTICIPANT_ROLES_UPDATED","PARTICIPANT_DECLINED","FLOOR_GRANTED","FLOOR_RELEASED","DIFFERENCE","type","object","Events","emit","updateLocusInfo","updateParticipants","updateControls","updateConversationUrl","updateCreated","updateFullState","state","updateHostInfo","updateMediaShares","updateParticipantsUrl","updateReplace","replace","updateLocusUrl","updateAclUrl","updateBasequence","updateSequence","updateMemberShip","updateIdentifiers","deltaParticpantFlag","console","log","emitChanges","EVENTS","LOCUS_INFO_UPDATE_PARTICIPANTS","selfId","id","hostId","CONVERSATION_URL_UPDATE","parsedHosts","HostUtils","getHosts","current","updates","isNewHost","LOCUS_INFO_UPDATE_HOST","newHost","oldHost","previous","parsedInfo","InfoUtils","parse","parsedMediaShares","MediaSharesUtils","getMediaShares","LOCUS_INFO_UPDATE_MEDIA_SHARES","parsedSelves","SelfUtils","getSelves","getSipUrl","isUnadmittedGuest","SELF_UNADMITTED_GUEST","isAdmittedGuest","SELF_ADMITTED_GUEST","LOCUS_INFO_UPDATE_SELF","oldSelf","newSelf","LOCUS_INFO_UPDATE_URL"],"mappings":"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","file":"index.js","sourcesContent":["import {isEqual} from 'lodash';\n\nimport Events from '../events';\nimport {EVENTS, LOCUSEVENT} from '../constants';\nimport InfoUtils from '../locus-info/infoUtils';\nimport SelfUtils from '../locus-info/selfUtils';\nimport HostUtils from '../locus-info/hostUtils';\nimport MediaSharesUtils from '../locus-info/mediaSharesUtils';\nimport Parser from '../locus-info/parser';\n\n/**\n * @export\n * @class LocusInfo\n */\nexport default class LocusInfo {\n  constructor(callback, locus = {}, spark) {\n    // TODO: remove the locus as for delta its always incomplete\n    this.updateMeeting = callback;\n    this.controls = locus.controls || null;\n    this.conversationUrl = locus.conversationUrl || null;\n    this.created = locus.created || null;\n    this.fullState = locus.fullState || null;\n    this.host = locus.host || null;\n    this.mediaShares = locus.mediaShares || null;\n    this.participantsUrl = locus.participantsUrl || null;\n    this.replaces = locus.replaces || null;\n    this.url = locus.url || null;\n    this.aclUrl = locus.aclUrl || null;\n    this.baseSequence = locus.baseSequence || null;\n    this.sequence = locus.sequence || null;\n    this.membership = locus.membership || null;\n    this.identities = locus.identities || null;\n    this.emitChange = false;\n    this.parsedLocus = {};\n    this.spark = spark;\n\n    this.updateMeetingInfo(locus.info);\n    // self and participants generate sipUrl for 1:1 meeting\n    this.updateSelf(locus.self, locus.participants);\n    // this.self = locus.self || null;\n    // this.info = locus.info || null;\n  }\n\n  initialSetup(locus, meeting) {\n    // meeting already exisits just do an update\n    if (meeting) {\n      // Its a new delta event fetch the whole meeting object\n      Parser.updateWithDeltaLocus(locus, meeting);\n    }\n    else {\n      this.onFullLocus(locus);\n    }\n\n    // Change it to true after it recives it first locus object\n    this.emitChange = true;\n  }\n\n  parse(meeting, data) {\n    const {eventType} = data;\n    switch (eventType) {\n      case LOCUSEVENT.PARTICIPANT_JOIN:\n      case LOCUSEVENT.PARTICIPANT_LEFT:\n      case LOCUSEVENT.CONTROLS_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_AUDIO_MUTED:\n      case LOCUSEVENT.PARTICIPANT_AUDIO_UNMUTED:\n      case LOCUSEVENT.PARTICIPANT_VIDEO_MUTED:\n      case LOCUSEVENT.PARTICIPANT_VIDEO_UNMUTED:\n      case LOCUSEVENT.SELF_CHANGED:\n      case LOCUSEVENT.PARTICIPANT_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_CONTROLS_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_ROLES_UPDATED:\n      case LOCUSEVENT.PARTICIPANT_DECLINED:\n      case LOCUSEVENT.FLOOR_GRANTED:\n      case LOCUSEVENT.FLOOR_RELEASED:\n        this.onFullLocus(data.locus);\n        break;\n      case LOCUSEVENT.DIFFERENCE:\n        Parser.updateWithDeltaLocus(data.locus, meeting);\n        break;\n\n      default:\n        // Why will there be a event with no eventType ????\n        // we may not need this, we can get full locus\n        Parser.updateWithDeltaLocus(data.locus, meeting);\n    }\n  }\n\n  emitChanges(type, object) {\n    Events.emit(type, object);\n    // TODO: This will get triggred all the time when there is a\n    // Valid object change but we need to decide when to emit it\n\n    // {MeetingInfo} ploicyChange and type change\n    // this.policy //\n    // this.type: //\n  }\n\n  /**\n   * updates the locus with full locus object\n   * @param {object} locus locus object\n   * @returns {object} null\n   */\n  onFullLocus(locus) {\n    this.updateLocusInfo(locus);\n    this.updateParticipants(locus.participants);\n  }\n\n  onDeltaLocus(locus) {\n    this.updateLocusInfo(locus);\n    this.updateParticipants(locus.participants, true);\n  }\n\n  updateLocusInfo(locus) {\n    this.updateControls(locus.controls);\n    this.updateConversationUrl(locus.conversationUrl);\n    this.updateCreated(locus.created);\n    this.updateFullState(locus.state);\n    this.updateHostInfo(locus.host);\n    this.updateMeetingInfo(locus.info);\n    this.updateMediaShares(locus.mediaShares);\n    this.updateParticipantsUrl(locus.participantsUrl);\n    this.updateReplace(locus.replace);\n    this.updateSelf(locus.self, locus.participants);\n    this.updateLocusUrl(locus.url);\n    this.updateAclUrl(locus.aclUrl);\n    this.updateBasequence(locus.baseSequence);\n    this.updateSequence(locus.sequence);\n    this.updateMemberShip(locus.membership);\n    this.updateIdentifiers(locus.identities);\n    // update which required to compare different objects from locus\n  }\n\n  /**\n   *\n   * @param {Object} participants new participants object\n   * @param {boolen} deltaParticpantFlag  delta event\n   * @returns {Array} updatedParticipants\n   */\n  updateParticipants(participants, deltaParticpantFlag) {\n    if (deltaParticpantFlag) {\n      console.log('Delta participants came through');\n    }\n    else {\n      console.log('Full locus participants came through');\n    }\n    this.emitChanges(EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, {\n      participants,\n      selfId: this.parsedLocus.self.id,\n      hostId: this.parsedLocus.host.id\n    });\n  }\n\n  // // TODO: check if this causes any perfomance issue\n  // findChangedParticipants(newParticipants) {\n  //   // TODO: Handle case where if a user got added and removed then find the one added or removed\n  //   if (newParticipants.length < 25) {\n  //     const changedParticipants = [];\n  //     this.participants.forEach((participant, index) => {\n  //       // find if participant is in the array\n  //       // find if any of the participant  got missed\n  //       if (participant && !isEqual(participant, newParticipants[participant.id])) {\n  //         this.participants[index] = newParticipants[participant.id];\n  //         changedParticipants[participant.id] = participant;\n  //       }\n  //     });\n  //     return changedParticipants;\n  //   }\n  //   // If more then 25 and we got fullLocus send Everything\n  //   return this.participants;\n  //   // TODO: find an alternate way or just replace the whole object\n  //   // Tell customers that more then 25 we will just send an update\n  // }\n\n  updateControls(controls) {\n    if (controls && !isEqual(this.controls, controls)) {\n      this.controls = controls;\n      console.info('LocusInfo:controls got updated');\n    }\n  }\n\n  updateConversationUrl(conversationUrl) {\n    if (conversationUrl && !isEqual(this.conversationUrl, conversationUrl)) {\n      this.conversationUrl = conversationUrl;\n      this.emitChanges(EVENTS.CONVERSATION_URL_UPDATE, conversationUrl);\n      console.info('LocusInfo:conversationUrl got updated');\n    }\n  }\n\n  updateCreated(created) {\n    if (created && !isEqual(this.created, created)) {\n      this.created = created;\n      console.info('LocusInfo:created got updated');\n    }\n  }\n\n  updateFullState(fullState) {\n    if (fullState && !isEqual(this.fullState, fullState)) {\n      // TODO: check what exactly is needed\n      // active: true\n      // count: 1\n      // lastActive: \"2019-02-01T16:52:26.764Z\"\n      // locked: false\n      // sessionIds: []\n      // state: \"ACTIVE\"\n      // type: \"CALL\"\n\n      // {\n      //   'CALL'; // For 1:1 calls the type is CALL\n      //   'MEETING'; // When Guest added the type is meeting\n      //   'CALL'; // When guest user leaves\n      // }\n      this.fullState = fullState;\n      console.info('LocusInfo:fullState got updated');\n    }\n  }\n\n  /**\n   * handles when the locus.host is updated\n   * @param {Object} host the locus.host property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal event locus_info_update_host\n   */\n  updateHostInfo(host) {\n    if (host && !isEqual(this.host, host)) {\n      const parsedHosts = HostUtils.getHosts(this.host, host);\n      this.updateMeeting(parsedHosts.current);\n      this.parsedLocus.host = parsedHosts.current;\n      if (parsedHosts.updates.isNewHost) {\n        this.emitChanges(EVENTS.LOCUS_INFO_UPDATE_HOST, {newHost: parsedHosts.current, oldHost: parsedHosts.previous});\n      }\n      this.host = host;\n      console.info('LocusInfo:host got updated');\n    }\n  }\n\n  updateMeetingInfo(info) {\n    if (info && !isEqual(this.info, info)) {\n      this.info = info;\n      const parsedInfo = InfoUtils.parse(info);\n      this.parsedLocus.info = parsedInfo;\n      // Parses the info and adds necessary values\n      this.updateMeeting(parsedInfo);\n      console.info('LocusInfo:info got updated');\n      this.emitChanges('infoUpdated');\n    }\n  }\n\n  /**\n   * handles when the locus.mediaShares is updated\n   * @param {Object} mediaShares the locus.mediaShares property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal event locus_info_update_media_shares\n   */\n  updateMediaShares(mediaShares) {\n    if (mediaShares && !isEqual(this.mediaShares, mediaShares)) {\n      const parsedMediaShares = MediaSharesUtils.getMediaShares(this.mediaShares, mediaShares);\n      this.updateMeeting(parsedMediaShares.current);\n      this.emitChanges(EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, {current: parsedMediaShares.current, previous: parsedMediaShares.previous});\n      this.parsedLocus.mediaShares = parsedMediaShares.current;\n      this.mediaShares = mediaShares;\n      console.info('LocusInfo:mediaShares got updated');\n    }\n  }\n\n  updateParticipantsUrl(participantsUrl) {\n    if (participantsUrl && !isEqual(this.participantsUrl, participantsUrl)) {\n      this.participantsUrl = participantsUrl;\n      console.info('LocusInfo:participantsUrl got updated');\n    }\n  }\n\n  updateReplace(replace) {\n    if (replace && !isEqual(this.replace, replace)) {\n      this.replace = replace;\n      console.info('LocusInfo:replace got updated');\n    }\n  }\n\n  /**\n   * handles when the locus.self is updated\n   * @param {Object} self the locus.mediaShares property\n   * @param {Array} participants the locus.participants property\n   * @returns {undefined}\n   * @memberof LocusInfo\n   * emits internal events self_admitted_guest, self_unadmitted_guest, locus_info_update_self\n   */\n  updateSelf(self, participants) {\n    if (self && !isEqual(this.self, self)) {\n      const parsedSelves = SelfUtils.getSelves(this.self, self, this.spark);\n      this.updateMeeting(parsedSelves.current);\n      this.updateMeeting(SelfUtils.getSipUrl(self, participants, this.parsedLocus.info));\n      if (parsedSelves.updates.isUnadmittedGuest) {\n        this.emitChanges(EVENTS.SELF_UNADMITTED_GUEST, self);\n      }\n      if (parsedSelves.updates.isAdmittedGuest) {\n        this.emitChanges(EVENTS.SELF_ADMITTED_GUEST, self);\n      }\n      this.emitChanges(EVENTS.LOCUS_INFO_UPDATE_SELF, {oldSelf: parsedSelves.previous, newSelf: parsedSelves.current});\n      this.parsedLocus.self = parsedSelves.current;\n      this.self = self;\n      console.info('LocusInfo:self got updated');\n    }\n  }\n\n  /**\n   * handles when the locus.url is updated\n   * @param {String} url\n   * @returns {undefined}\n   * emits internal event locus_info_update_url\n   */\n  updateLocusUrl(url) {\n    if (url && this.url !== url) {\n      this.url = url;\n      this.emitChanges(EVENTS.LOCUS_INFO_UPDATE_URL, url);\n      console.info('LocusInfo:url got updated');\n    }\n  }\n\n  updateAclUrl(aclUrl) {\n    if (aclUrl && !isEqual(this.aclUrl, aclUrl)) {\n      this.aclUrl = aclUrl;\n      console.info('LocusInfo:aclUrl got updated');\n    }\n  }\n\n  updateBasequence(baseSequence) {\n    if (baseSequence && !isEqual(this.baseSequence, baseSequence)) {\n      this.baseSequence = baseSequence;\n      console.info('LocusInfo:baseSequence got updated');\n    }\n  }\n\n  updateSequence(sequence) {\n    if (sequence && !isEqual(this.sequence, sequence)) {\n      this.sequence = sequence;\n      console.info('LocusInfo:sequence got updated');\n    }\n  }\n\n  updateMemberShip(membership) {\n    if (membership && !isEqual(this.membership, membership)) {\n      this.membership = membership;\n      console.info('LocusInfo:membership got updated');\n    }\n  }\n\n  updateIdentifiers(identities) {\n    if (identities && !isEqual(this.identities, identities)) {\n      this.identities = identities;\n      console.info('LocusInfo:identities got updated');\n    }\n  }\n}\n"]}