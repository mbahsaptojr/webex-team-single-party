'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constants = require('../constants');

var mediaSharesUtils = {};

/**
 * parses the relevant values for mediaShares: contentId, disposition
 * @param {Object} mediaShares
 * @returns {undefined}
 */
mediaSharesUtils.parse = function (mediaShares) {
  if (mediaShares) {
    return {
      contentId: mediaSharesUtils.getContentId(mediaShares),
      disposition: mediaSharesUtils.getDisposition(mediaShares)
    };
  }
  return null;
};

/**
 * get the previous and current mediaShares values parsed, as well as the boolean updates
 * @param {Object} oldShare
 * @param {Object} newShare
 * @returns {Object}
 * previous: {Object} old share, current: {Object} new share,
 */
mediaSharesUtils.getMediaShares = function (oldShare, newShare) {
  var previous = oldShare && mediaSharesUtils.parse(oldShare);
  var current = newShare && mediaSharesUtils.parse(newShare);
  return {
    previous: previous,
    current: current
  };
};

/**
 * get the floor disposition (released, granted)
 * @param {Object} mediaShares
 * @returns {Boolean} disposition
 */
mediaSharesUtils.getDisposition = function (mediaShares) {
  var contentFloor = mediaSharesUtils.extractContentFloor(mediaShares);
  return contentFloor ? contentFloor.disposition : null;
};

/**
 * extract the content property from media shares
 * @param {Object} mediaShares
 * @returns {Object}
 */
mediaSharesUtils.extractContent = function (mediaShares) {
  if (!mediaShares || !mediaShares.length) {
    return null;
  }
  var supposed = mediaShares[0];
  if (supposed && supposed.name === _constants.CONTENT) {
    return supposed;
  }
  return null;
};

/**
 * extract the floor property from content object
 * @param {Object} content
 * @returns {Object}
 */
mediaSharesUtils.extractFloor = function (content) {
  if (!content) {
    return null;
  }
  return content.floor;
};

/**
 * extract the content's floor from media shares
 * @param {Object} mediaShares
 * @returns {Object}
 */
mediaSharesUtils.extractContentFloor = function (mediaShares) {
  var content = mediaSharesUtils.extractContent(mediaShares);
  return mediaSharesUtils.extractFloor(content);
};

/**
 * get who is sharing from media shares
 * @param {Object} mediaShares
 * @returns {Object}
 */
mediaSharesUtils.getContentId = function (mediaShares) {
  var contentFloor = mediaSharesUtils.extractContentFloor(mediaShares);
  if (!contentFloor || !contentFloor.beneficiary) {
    return null;
  }
  return contentFloor.beneficiary.id;
};

exports.default = mediaSharesUtils;
//# sourceMappingURL=mediaSharesUtils.js.map
