{"version":3,"sources":["hostUtils.js"],"names":["hostUtils","parse","host","id","getId","getHosts","oldHost","newHost","previous","current","updates","isNewHost","isDifferentHosts","previousId","currentId"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,YAAY,EAAlB;;AAEA;;;;;AAKAA,UAAUC,KAAV,GAAkB,UAACC,IAAD,EAAU;AAC1B,MAAIA,IAAJ,EAAU;AACR,WAAO;AACLC,UAAIH,UAAUI,KAAV,CAAgBF,IAAhB;AADC,KAAP;AAGD;AACD,SAAO,IAAP;AACD,CAPD;;AASA;;;;;;;AAOAF,UAAUK,QAAV,GAAqB,UAACC,OAAD,EAAUC,OAAV,EAAsB;AACzC,MAAMC,WAAWF,WAAWN,UAAUC,KAAV,CAAgBK,OAAhB,CAA5B;AACA,MAAMG,UAAUF,WAAWP,UAAUC,KAAV,CAAgBM,OAAhB,CAA3B;AACA,SAAO;AACLC,sBADK;AAELC,oBAFK;AAGLC,aAAS;AACPC,iBAAWH,YAAYC,OAAZ,GAAsBT,UAAUY,gBAAV,CAA2BJ,SAASL,EAApC,EAAwCM,QAAQN,EAAhD,CAAtB,GAA4E;AADhF;AAHJ,GAAP;AAOD,CAVD;;AAYA;;;;;;AAMAH,UAAUY,gBAAV,GAA6B,UAACC,UAAD,EAAaC,SAAb;AAAA,SAA2BD,eAAeC,SAA1C;AAAA,CAA7B;;AAEA;;;;;AAKAd,UAAUI,KAAV,GAAkB,UAACF,IAAD,EAAU;AAC1B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,IAAP;AACD;AACD,SAAOA,KAAKC,EAAZ;AACD,CALD;;kBAOeH,S","file":"hostUtils.js","sourcesContent":["import {} from '../constants';\n\nconst hostUtils = {};\n\n/**\n * parse the relevant host values that we care about: id\n * @param {Object} host\n * @returns {Object} parsed host or null if host was undefined\n */\nhostUtils.parse = (host) => {\n  if (host) {\n    return {\n      id: hostUtils.getId(host)\n    };\n  }\n  return null;\n};\n\n/**\n * get the previous and current host values parsed, as well as the boolean updates\n * @param {Object} oldHost\n * @param {Object} newHost\n * @returns {Object}\n * previous: {Object} old host, current: {Object} new host, updates: {isNewHost: {boolean}} boolean update values\n */\nhostUtils.getHosts = (oldHost, newHost) => {\n  const previous = oldHost && hostUtils.parse(oldHost);\n  const current = newHost && hostUtils.parse(newHost);\n  return {\n    previous,\n    current,\n    updates: {\n      isNewHost: previous && current ? hostUtils.isDifferentHosts(previous.id, current.id) : true\n    }\n  };\n};\n\n/**\n * determine by id if 2 hosts are different\n * @param {String} previousId\n * @param {String} currentId\n * @returns {Boolean}\n */\nhostUtils.isDifferentHosts = (previousId, currentId) => previousId !== currentId;\n\n/**\n * Extract the id from the host object\n * @param {Object} host\n * @returns {String}\n */\nhostUtils.getId = (host) => {\n  if (!host) {\n    return null;\n  }\n  return host.id;\n};\n\nexport default hostUtils;\n"]}