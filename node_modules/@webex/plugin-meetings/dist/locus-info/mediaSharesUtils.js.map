{"version":3,"sources":["mediaSharesUtils.js"],"names":["mediaSharesUtils","parse","mediaShares","contentId","getContentId","disposition","getDisposition","getMediaShares","oldShare","newShare","previous","current","contentFloor","extractContentFloor","extractContent","length","supposed","name","CONTENT","extractFloor","content","floor","beneficiary","id"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,mBAAmB,EAAzB;;AAEA;;;;;AAKAA,iBAAiBC,KAAjB,GAAyB,UAACC,WAAD,EAAiB;AACxC,MAAIA,WAAJ,EAAiB;AACf,WAAO;AACLC,iBAAWH,iBAAiBI,YAAjB,CAA8BF,WAA9B,CADN;AAELG,mBAAaL,iBAAiBM,cAAjB,CAAgCJ,WAAhC;AAFR,KAAP;AAID;AACD,SAAO,IAAP;AACD,CARD;;AAUA;;;;;;;AAOAF,iBAAiBO,cAAjB,GAAkC,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACxD,MAAMC,WAAWF,YAAYR,iBAAiBC,KAAjB,CAAuBO,QAAvB,CAA7B;AACA,MAAMG,UAAUF,YAAYT,iBAAiBC,KAAjB,CAAuBQ,QAAvB,CAA5B;AACA,SAAO;AACLC,sBADK;AAELC;AAFK,GAAP;AAID,CAPD;;AASA;;;;;AAKAX,iBAAiBM,cAAjB,GAAkC,UAACJ,WAAD,EAAiB;AACjD,MAAMU,eAAeZ,iBAAiBa,mBAAjB,CAAqCX,WAArC,CAArB;AACA,SAAOU,eAAeA,aAAaP,WAA5B,GAA0C,IAAjD;AACD,CAHD;;AAKA;;;;;AAKAL,iBAAiBc,cAAjB,GAAkC,UAACZ,WAAD,EAAiB;AACjD,MAAI,CAACA,WAAD,IAAgB,CAACA,YAAYa,MAAjC,EAAyC;AACvC,WAAO,IAAP;AACD;AACD,MAAMC,WAAWd,YAAY,CAAZ,CAAjB;AACA,MAAIc,YAAYA,SAASC,IAAT,KAAkBC,kBAAlC,EAA2C;AACzC,WAAOF,QAAP;AACD;AACD,SAAO,IAAP;AACD,CATD;;AAWA;;;;;AAKAhB,iBAAiBmB,YAAjB,GAAgC,UAACC,OAAD,EAAa;AAC3C,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;AACD,SAAOA,QAAQC,KAAf;AACD,CALD;;AAOA;;;;;AAKArB,iBAAiBa,mBAAjB,GAAuC,UAACX,WAAD,EAAiB;AACtD,MAAMkB,UAAUpB,iBAAiBc,cAAjB,CAAgCZ,WAAhC,CAAhB;AACA,SAAOF,iBAAiBmB,YAAjB,CAA8BC,OAA9B,CAAP;AACD,CAHD;;AAKA;;;;;AAKApB,iBAAiBI,YAAjB,GAAgC,UAACF,WAAD,EAAiB;AAC/C,MAAMU,eAAeZ,iBAAiBa,mBAAjB,CAAqCX,WAArC,CAArB;AACA,MAAI,CAACU,YAAD,IAAiB,CAACA,aAAaU,WAAnC,EAAgD;AAC9C,WAAO,IAAP;AACD;AACD,SAAOV,aAAaU,WAAb,CAAyBC,EAAhC;AACD,CAND;;kBAQevB,gB","file":"mediaSharesUtils.js","sourcesContent":["import {CONTENT} from '../constants';\n\nconst mediaSharesUtils = {};\n\n/**\n * parses the relevant values for mediaShares: contentId, disposition\n * @param {Object} mediaShares\n * @returns {undefined}\n */\nmediaSharesUtils.parse = (mediaShares) => {\n  if (mediaShares) {\n    return {\n      contentId: mediaSharesUtils.getContentId(mediaShares),\n      disposition: mediaSharesUtils.getDisposition(mediaShares)\n    };\n  }\n  return null;\n};\n\n/**\n * get the previous and current mediaShares values parsed, as well as the boolean updates\n * @param {Object} oldShare\n * @param {Object} newShare\n * @returns {Object}\n * previous: {Object} old share, current: {Object} new share,\n */\nmediaSharesUtils.getMediaShares = (oldShare, newShare) => {\n  const previous = oldShare && mediaSharesUtils.parse(oldShare);\n  const current = newShare && mediaSharesUtils.parse(newShare);\n  return {\n    previous,\n    current\n  };\n};\n\n/**\n * get the floor disposition (released, granted)\n * @param {Object} mediaShares\n * @returns {Boolean} disposition\n */\nmediaSharesUtils.getDisposition = (mediaShares) => {\n  const contentFloor = mediaSharesUtils.extractContentFloor(mediaShares);\n  return contentFloor ? contentFloor.disposition : null;\n};\n\n/**\n * extract the content property from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nmediaSharesUtils.extractContent = (mediaShares) => {\n  if (!mediaShares || !mediaShares.length) {\n    return null;\n  }\n  const supposed = mediaShares[0];\n  if (supposed && supposed.name === CONTENT) {\n    return supposed;\n  }\n  return null;\n};\n\n/**\n * extract the floor property from content object\n * @param {Object} content\n * @returns {Object}\n */\nmediaSharesUtils.extractFloor = (content) => {\n  if (!content) {\n    return null;\n  }\n  return content.floor;\n};\n\n/**\n * extract the content's floor from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nmediaSharesUtils.extractContentFloor = (mediaShares) => {\n  const content = mediaSharesUtils.extractContent(mediaShares);\n  return mediaSharesUtils.extractFloor(content);\n};\n\n/**\n * get who is sharing from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nmediaSharesUtils.getContentId = (mediaShares) => {\n  const contentFloor = mediaSharesUtils.extractContentFloor(mediaShares);\n  if (!contentFloor || !contentFloor.beneficiary) {\n    return null;\n  }\n  return contentFloor.beneficiary.id;\n};\n\nexport default mediaSharesUtils;\n"]}