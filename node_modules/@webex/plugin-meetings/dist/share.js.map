{"version":3,"sources":["share.js"],"names":["TYPES","application","screen","stream","whiteboard","STATUSES","idle","ongoing","terminating","share_failed","stop_share_failed","starting","Share","resolution","framerate","type","status","includes","Error","mediaStream","start","resolve"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;;AAEO,IAAMA,wBAAQ;AACnBC,eAAa,aADM;AAEnBC,UAAQ,QAFW;AAGnBC,UAAQ,QAHW;AAInBC,cAAY;AAJO,CAAd;;AAOA,IAAMC,8BAAW;AACtBC,QAAM,MADgB;AAEtBC,WAAS,SAFa;AAGtBC,eAAa,aAHS;AAItBC,gBAAc,cAJQ;AAKtBC,qBAAmB,mBALG;AAMtBC,YAAU;AANY,CAAjB;;AASP;;;;;;;;;IAQqBC,K;AACnB;;;;;;;;;;AAUA,uBAA2C;AAAA,QAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,QAAlBC,SAAkB,QAAlBA,SAAkB;AAAA,QAAPC,IAAO,QAAPA,IAAO;AAAA;;AACzC,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKE,MAAL,GAAcX,SAASC,IAAvB;AACA,QAAI,sBAAcN,KAAd,EAAqBiB,QAArB,CAA8BF,IAA9B,CAAJ,EAAyC;AACvC,WAAKA,IAAL,GAAYA,IAAZ;AACD,KAFD,MAEO;AACL,YAAM,IAAIG,KAAJ,0CAAiD,sBAAclB,KAAd,CAAjD,CAAN;AACD;AACF;;AAED;;;;;;;;;;;;;;;AAKQmB,2B,GAAc,E;;uBACd,KAAKC,KAAL,CAAWD,WAAX,C;;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;;;;;AAKQA,2B,GAAc,E;;uBACd,KAAKC,KAAL,CAAWD,WAAX,C;;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;;;;;;;;;AASE;AACMA,2B,GAAc,E;;uBACd,KAAKC,KAAL,CAAWD,WAAX,C;;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;;;;6GASYA,W;;;;;;;kDAEH;AAAA,uGAAY,kBAAOE,OAAP;AAAA;AAAA;AAAA;AAAA;AACjB;AACAA,oCAAQF,WAAR;;AAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAZ;;AAAA;AAAA;AAAA;AAAA,oB;;;;;;;;;;;;;;;;;AAMT;;;;;;;2BAIO;AACL,aAAO,sBAAY,UAACE,OAAD,EAAa;AAC9BA;AACD,OAFM,CAAP;AAGD;;;;;kBA/EkBT,K","file":"share.js","sourcesContent":["/*!\n * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint-disable */\n\nexport const TYPES = {\n  application: 'application',\n  screen: 'screen',\n  stream: 'stream',\n  whiteboard: 'whiteboard'\n};\n\nexport const STATUSES = {\n  idle: 'idle',\n  ongoing: 'ongoing',\n  terminating: 'terminating',\n  share_failed: 'share_failed',\n  stop_share_failed: 'stop_share_failed',\n  starting: 'starting'\n};\n\n/**\n * Events to emit\n * ==============\n *\n * - change (object):\n *   - status (string): See STATUSES.\n *   - reason (string)\n */\nexport default class Share {\n  /**\n   * Create a Share.\n   *\n   * TODO: It may be more appropriate for this class\n   * to be comprised of helpful static methods.\n   * @param {object} options\n   * @param {object} options.resolution\n   * @param {object} options.framerate\n   * @param {string} options.type\n   */\n  constructor({resolution, framerate, type}) {\n    this.resolution = resolution;\n    this.framerate = framerate;\n    this.status = STATUSES.idle;\n    if (Object.values(TYPES).includes(type)) {\n      this.type = type;\n    } else {\n      throw new Error(`Must be one of the following types: ${Object.values(TYPES)}`);\n    }\n  }\n\n  /**\n   * Start a screenshare.\n   * @returns {Promise}\n   */\n  async startScreenShare() {\n    const mediaStream = {};\n    await this.start(mediaStream);\n  }\n\n  /**\n   * Start an application share.\n   * @returns {Promise}\n   */\n  async startApplicationShare() {\n    const mediaStream = {};\n    await this.start(mediaStream);\n  }\n\n  /**\n   * Start a whiteboard share for a Webex Teams meeting.\n   *\n   * TODO: Define parameters with Saurabh.\n   * TODO: Will all meetings created by the SDK also create a space\n   * if one does not exist? This would provide people with features like the whiteboard.\n   * @returns {Promise}\n   */\n  async startWhiteboardShare() {\n    // Check that this is a Teams meeting. Webex Meetings does not have whiteboards.\n    const mediaStream = {};\n    await this.start(mediaStream);\n  }\n\n  /**\n   * Start the share.\n   *\n   * A {https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/MediaStream MediaStream}\n   * can be constructed. For example, entire browser tabs and entire screens can be converted to streams.\n   * A *MediaStream* can also be retrieved with {https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia getUserMedia}.\n   * @param {MediaStream} mediaStream\n   * @returns {Promise}\n   */\n  async start(mediaStream) {\n    // Call relevant APIs, e.g., connect to locus -> calliope -> mercury\n    return new Promise(async (resolve) => {\n      // Correlate with ROAP; must depend on locus events\n      resolve(mediaStream);\n    });\n  }\n\n  /**\n   * Stop this share.\n   * @returns {Promise}\n   */\n  stop() {\n    return new Promise((resolve) => {\n      resolve();\n    });\n  }\n}\n"]}