{"version":3,"sources":["index.js"],"names":["PersonalMeetingRoom","attrs","options","namespace","MEETINGS","pmr","sipUri","link","userId","name","meetingInfoRequest","MeetingInfoRequest","personalMeetingRoomRequest","PersonalMeetingRoomRequest","pin","preferred","spark","internal","device","passcode","meetingAddress","claimPmr","then","body","set","reject","Error","sipMeetingUri","meetingLink","webExMeetingLink","owner","meetingName","number","meetingNumber","type","PERSONAL_ROOM","destination","fetchMeetingInfo","isPmr","StatelessSparkPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;AAEA;;;;;;AAEA;;;IAGqBA,mB;;;AAGnB;;;;;AAKA,+BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,gKACpB,EADoB,EAChBA,OADgB;;AAAA,UAP5BC,SAO4B,GAPhBC,mBAOgB;;AAE1B,UAAKC,GAAL,GAAW,IAAX;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,IAAL,GAAY,IAAZ;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,IAAL,GAAY,IAAZ;AACA,UAAKC,kBAAL,GAA0B,IAAIC,iBAAJ,CAAuB,EAAvB,EAA2BT,OAA3B,CAA1B;AACA,UAAKU,0BAAL,GAAkC,IAAIC,iBAAJ,CAA+B,EAA/B,EAAmCX,OAAnC,CAAlC;AAR0B;AAS3B;;AAED;;;;;;;;;;;;0BAQMK,I,EAAMO,G,EAAuB;AAAA;;AAAA,UAAlBC,SAAkB,uEAAN,IAAM;;AACjC,UAAMb,UAAU;AACdM,gBAAQ,KAAKQ,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BV,MADrB;AAEdW,kBAAUL,GAFI;AAGdM,wBAAgBb,IAHF;AAIdQ;AAJc,OAAhB;AAMA,aAAO,KAAKH,0BAAL,CAAgCS,QAAhC,CAAyCnB,OAAzC,EAAkDoB,IAAlD,CAAuD,UAACjB,GAAD,EAAS;AACrE,YAAIA,OAAOA,IAAIkB,IAAf,EAAqB;AACnB,iBAAKC,GAAL,CAASnB,IAAIkB,IAAb;AACD,SAFD,MAGK;AACH,iBAAO,kBAAQE,MAAR,CAAe,IAAIC,KAAJ,CAAU,+CAAV,CAAf,CAAP;AACD;AACD,eAAOrB,IAAIkB,IAAX;AACD,OARM,CAAP;AASD;;AAED;;;;;;;;wBAKIA,I,EAAM;AACR,WAAKlB,GAAL,GAAWkB,IAAX;AACA,WAAKjB,MAAL,GAAciB,KAAKI,aAAnB;AACA,WAAKC,WAAL,GAAmBL,KAAKM,gBAAL,IAAyBN,KAAKK,WAAjD;AACA,WAAKpB,MAAL,GAAce,KAAKO,KAAnB;AACA,WAAKrB,IAAL,GAAYc,KAAKQ,WAAjB;AACA,WAAKC,MAAL,GAAcT,KAAKU,aAAnB;AACD;;AAED;;;;;;;;;0BAMM;AAAA;;AACJ,UAAM/B,UAAU;AACdgC,cAAMC,wBADQ;AAEdC,qBAAa,KAAKpB,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BV;AAF1B,OAAhB;AAIA,aAAO,KAAKE,kBAAL,CAAwB2B,gBAAxB,CAAyCnC,OAAzC,EAAkDoB,IAAlD,CAAuD,UAACjB,GAAD,EAAS;AACrE,YAAIA,OAAOA,IAAIkB,IAAX,IAAmBlB,IAAIkB,IAAJ,CAASe,KAAhC,EAAuC;AACrC,iBAAKd,GAAL,CAASnB,IAAIkB,IAAb;AACD,SAFD,MAGK;AACH,iBAAO,kBAAQE,MAAR,CAAe,IAAIC,KAAJ,CAAU,qDAAV,CAAf,CAAP;AACD;AACD,eAAOrB,IAAIkB,IAAX;AACD,OARM,CAAP;AASD;;;EA/E8CgB,+B;;kBAA5BvC,mB","file":"index.js","sourcesContent":["import {StatelessSparkPlugin} from '@ciscospark/spark-core';\n\nimport {MEETINGS, PERSONAL_ROOM} from '../constants';\nimport MeetingInfoRequest from '../meeting-info/request';\n\nimport PersonalMeetingRoomRequest from './request';\n\n/**\n * @class PersonalMeetingRoom\n */\nexport default class PersonalMeetingRoom extends StatelessSparkPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    this.pmr = null;\n    this.sipUri = null;\n    this.link = null;\n    this.userId = null;\n    this.name = null;\n    this.meetingInfoRequest = new MeetingInfoRequest({}, options);\n    this.personalMeetingRoomRequest = new PersonalMeetingRoomRequest({}, options);\n  }\n\n  /**\n   * claims a pmr and updates the cached PMR values\n   * @param {String} link\n   * @param {String} pin\n   * @param {Boolean} preferred optional, defaults to true to set this claimed PMR as the preferred\n   * @returns {Promise}\n   * @memberof PersonalMeetingRoom\n   */\n  claim(link, pin, preferred = true) {\n    const options = {\n      userId: this.spark.internal.device.userId,\n      passcode: pin,\n      meetingAddress: link,\n      preferred\n    };\n    return this.personalMeetingRoomRequest.claimPmr(options).then((pmr) => {\n      if (pmr && pmr.body) {\n        this.set(pmr.body);\n      }\n      else {\n        return Promise.reject(new Error('No PMR body provided. PMR values not updated.'));\n      }\n      return pmr.body;\n    });\n  }\n\n  /**\n   * @param {Object} body the response body from meeting info request\n   * @returns {undefined}\n   * @memberof PersonalMeetingRoom\n   */\n  set(body) {\n    this.pmr = body;\n    this.sipUri = body.sipMeetingUri;\n    this.meetingLink = body.webExMeetingLink || body.meetingLink;\n    this.userId = body.owner;\n    this.name = body.meetingName;\n    this.number = body.meetingNumber;\n  }\n\n  /**\n   * TODO: implement TTL for syncing and caching so to not request again and again\n   * @param {Object} options\n   * @returns {Promise}\n   * @memberof PersonalMeetingRoom\n   */\n  get() {\n    const options = {\n      type: PERSONAL_ROOM,\n      destination: this.spark.internal.device.userId\n    };\n    return this.meetingInfoRequest.fetchMeetingInfo(options).then((pmr) => {\n      if (pmr && pmr.body && pmr.body.isPmr) {\n        this.set(pmr.body);\n      }\n      else {\n        return Promise.reject(new Error('The PMR requested is NOT a PMR. PMR values not set.'));\n      }\n      return pmr.body;\n    });\n  }\n}\n"]}