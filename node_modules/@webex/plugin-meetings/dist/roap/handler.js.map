{"version":3,"sources":["handler.js"],"names":["checkForAndHandleErrors","action","meeting","correlationId","type","msg","messageType","errorType","RoapUtil","findError","handleError","mediaProperties","mediaPeerConnection","then","res","RoapCollection","deleteSessionSequence","seq","catch","err","logger","info","ensureMeeting","handleSessionStep","roap","session","sequenceId","OFFER","GLARE_OFFER","remote","console","state","RoapHandler","ROAP","ROAP_STATE","WAIT_TX_ANSWER","shouldHandleMedia","updatePeerConnection","answerSdps","Events","emit","EVENTS","ROAP_ANSWER","locusId","locusSelfId","locusInfo","self","id","mediaId","sdps","audioMuted","isAudioMuted","videoMuted","isVideoMuted","error","WAIT_TX_OK","setRemoteDescription","ROAP_OK","ERROR","GLARE","tieBreaker","step","ROAP_SIGNAL","GLARE_RESOLVED","perform","signal","prefix","RECEIVE_ROAP_MSG","execute","RX_","SEND_ROAP_MSG","local","TX_","SEND_ROAP_MSG_SUCCESS","getSessionSequence","ANSWER","RX_ANSWER","deleteSession","RESET_ROAP_STATE","MeetingCollection","get","handleAction","StatelessSparkPlugin"],"mappings":"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","file":"handler.js","sourcesContent":["/* eslint-disable no-console,no-param-reassign */\nimport {StatelessSparkPlugin} from '@ciscospark/spark-core';\n\nimport MeetingCollection from '../meetings/collection';\nimport Events from '../events';\nimport {ROAP, EVENTS, OFFER} from '../constants';\nimport RoapUtil from '../roap/util';\nimport RoapCollection from '../roap/collection';\n\nconst checkForAndHandleErrors = (action, meeting, correlationId) => {\n  if (action && action.type) {\n    if (action.msg && action.msg.messageType && action.msg.errorType) {\n      if (RoapUtil.findError(action.msg.messageType, action.msg.errorType, action.type)) {\n        RoapUtil.handleError(meeting.mediaProperties.mediaPeerConnection)\n          .then((res) => {\n            if (res) {\n              RoapCollection.deleteSessionSequence(correlationId, action.msg.seq);\n            }\n          })\n          .catch((err) => {\n            this.logger.info('Cannot reset the peer connection', err);\n          });\n        return true;\n      }\n    }\n    if (!RoapUtil.ensureMeeting(meeting, action.type)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst handleSessionStep = (roap, session) => {\n  const {seq: sequenceId, messageType} = roap.msg;\n  if (session.OFFER && messageType === OFFER) {\n    session.GLARE_OFFER = roap.msg;\n    session.GLARE_OFFER.remote = !!roap.remote;\n    console.info(`Its a GLARE condition seq:${sequenceId} new mercury event`);\n  }\n  else {\n    console.info(\n      `Save OFFER/ANSWER seq:${sequenceId} new mercury event ${messageType}local state: ${JSON.stringify(\n        session.state.state,\n        null,\n        2\n      )}`\n    );\n    session[messageType] = roap.msg;\n    session[messageType].remote = !!roap.remote;\n  }\n};\n/**\n * @class RoapHandler\n */\nexport default class RoapHandler extends StatelessSparkPlugin {\n  /**\n   *\n   * @param {Object} session\n   * @param {Meeting} meeting\n   * @param {Object} action\n   * @returns {null}\n   */\n  perform(session, meeting, action) {\n    switch (session.state.state) {\n      // case ROAP.ROAP_STATE.INIT:\n      // case ROAP.ROAP_STATE.WAIT_RX_OFFER:\n      // case ROAP.ROAP_STATE.WAIT_RX_ANSWER:\n      // case ROAP.ROAP_STATE.WAIT_RX_OK:\n      case ROAP.ROAP_STATE.WAIT_TX_ANSWER:\n        // eslint-disable-next-line no-warning-comments\n        // TODO: sometime the you get an answer while you are creating an offer so SKIP\n        // Server will send the mercury event comes back\n        if (RoapUtil.shouldHandleMedia(meeting)) {\n          RoapUtil.updatePeerConnection(meeting, session)\n            .then((answerSdps) => {\n              Events.emit(EVENTS.ROAP_ANSWER, {\n                locusId: meeting.locusId,\n                locusSelfId: meeting.locusInfo.self.id,\n                mediaId: meeting.mediaId,\n                sdps: answerSdps,\n                seq: session.OFFER.seq,\n                correlationId: meeting.correlationId,\n                audioMuted: meeting.isAudioMuted(),\n                videoMuted: meeting.isVideoMuted()\n              });\n            })\n            .catch((err) => {\n              this.logger.error(err);\n            });\n        }\n        break;\n      case ROAP.ROAP_STATE.WAIT_TX_OK:\n        RoapUtil.setRemoteDescription(meeting, session).then((res) => {\n          Events.emit(EVENTS.ROAP_OK, res);\n        });\n        break;\n      // case ROAP.ROAP_STATE.IDLE_LOCAL_OFFER:\n      case ROAP.ROAP_STATE.ERROR:\n        this.logger.error('Call-RoapHandler#ERROR state=error', session);\n        break;\n      case ROAP.ROAP_STATE.GLARE:\n        session.GLARE_OFFER.tieBreaker = session.GLARE_OFFER.tieBreaker || 0;\n        session.OFFER.tieBreaker = session.OFFER.tieBreaker || 0;\n        this.logger.error('Resolve the GLARE condition');\n        if (session.GLARE_OFFER.tieBreaker < session.OFFER.tieBreaker) {\n          // 2\n          this.logger.error('local offer wins');\n        }\n        else {\n          this.logger.error('remote offer wins', session);\n        }\n        session.state.step(ROAP.ROAP_SIGNAL.GLARE_RESOLVED, meeting, action);\n        this.perform(session, meeting);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   *\n   * @param {String} signal\n   * @param {Object} session\n   * @param {Object} action\n   * @param {Meeting} meeting\n   * @param {String} prefix\n   * @returns {null}\n   */\n  execute(signal, session, action, meeting, prefix) {\n    if (session && session.state) {\n      handleSessionStep(action, session);\n      signal = ROAP.ROAP_SIGNAL[`${prefix}${action.msg.messageType}`];\n      session.state.step(signal, meeting, action);\n      this.perform(session, meeting, action);\n    }\n  }\n\n  /**\n   *\n   * @param {Object} session\n   * @param {Object} action\n   * @param {Meeting} meeting\n   * @param {String} correlationId\n   * @returns {Boolean}\n   */\n  handleAction(session, action, meeting, correlationId) {\n    let signal;\n    switch (action.type) {\n      case ROAP.RECEIVE_ROAP_MSG:\n        action.remote = true;\n        this.execute(signal, session, action, meeting, ROAP.RX_);\n        break;\n      case ROAP.SEND_ROAP_MSG:\n        action.local = true;\n        this.execute(signal, session, action, meeting, ROAP.TX_);\n        break;\n      case ROAP.SEND_ROAP_MSG_SUCCESS:\n        // This means we got and answer and waiting for 200 ok for /participants\n        if (RoapCollection.getSessionSequence(correlationId, action.seq).ANSWER) {\n          signal = ROAP.ROAP_SIGNAL.RX_ANSWER;\n          // NOTE: When server send back an answer via mercury the\n          // remote SDP is already saved sent and ok message is sent back\n          // We dont have to indicate the roapHandler about the RX_ANSWER via SEND_ROAP_MSG_SUCCESS\n          // RoapHandler.transition(signal, session, meeting);\n        }\n        break;\n      case 'RECEIVE_CALL_LEAVE':\n        RoapCollection.deleteSession(correlationId);\n        console.info('Call-this#RECEIVE_CALL_LEAVE: cleaning up the RoapHandler', correlationId);\n        break;\n      case ROAP.RESET_ROAP_STATE:\n        RoapCollection.deleteSessionSequence(correlationId, action.msg.seq);\n        console.info('Call-RoapHandler#RESET_ROAP_STATE: resetting the RoapHandler state', action.msg.seq);\n        break;\n      default:\n        return true;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param {Object} action\n   * @returns {Boolean}\n   */\n  submit(action) {\n    const {correlationId} = action;\n    const session = RoapCollection.getSessionSequence(correlationId, action.seq || action.msg.seq);\n    const meeting = MeetingCollection.get(correlationId);\n    if (checkForAndHandleErrors(action, meeting, correlationId)) {\n      return true;\n    }\n    return this.handleAction(session, action, meeting, correlationId);\n  }\n}\n"]}