'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _isNan = require('babel-runtime/core-js/number/is-nan');

var _isNan2 = _interopRequireDefault(_isNan);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _sparkCore = require('@ciscospark/spark-core');

var _constants = require('../constants');

var _collection = require('../meetings/collection');

var _collection2 = _interopRequireDefault(_collection);

var _events = require('../events');

var _events2 = _interopRequireDefault(_events);

var _handler = require('./handler');

var _handler2 = _interopRequireDefault(_handler);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class Roap
 */
var Roap = function (_StatelessSparkPlugin) {
  (0, _inherits3.default)(Roap, _StatelessSparkPlugin);

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  function Roap(attrs, options) {
    (0, _classCallCheck3.default)(this, Roap);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Roap.__proto__ || (0, _getPrototypeOf2.default)(Roap)).call(this, {}, options));

    _this.roapHandler = new _handler2.default({}, options);
    _this.roapRequest = new _request2.default({}, options);
    _this.lastRoapOffer = {};

    _events2.default.on(_constants.EVENTS.ROAP_OK, _this.sendRoapOK.bind(_this));
    _events2.default.on(_constants.EVENTS.ROAP_ANSWER, _this.sendRoapAnswer.bind(_this));
    return _this;
  }

  /**
   * Starts listening to mercury events for Roap messages
   * @param {object} data event object
   * @returns {Promise}
   */


  (0, _createClass3.default)(Roap, [{
    key: 'roapEvent',
    value: function roapEvent(data) {
      var msg = data.message;
      var correlationId = data.correlationId;

      console.log('Call-Mercury->-App: receives Roap Message [' + (0, _stringify2.default)(msg, null, 2) + ']');
      this.roapHandler.submit({
        type: _constants.ROAP.RECEIVE_ROAP_MSG,
        msg: msg,
        correlationId: correlationId
      });
    }

    /**
     *
     * @param {String} correlationId correlation id of a meeting
     * @param {Number} seq ROAP sequence number
     * @returns {Promise}
     */

  }, {
    key: 'stop',
    value: function stop(correlationId, seq) {
      this.roapHandler.submit({
        type: _constants.ROAP.RECEIVE_CALL_LEAVE,
        seq: seq,
        correlationId: correlationId
      });

      return _promise2.default.resolve();
    }

    /**
     *
     * @param {Object} options
     * @returns {null}
     */

  }, {
    key: 'sendRoapOK',
    value: function sendRoapOK(options) {
      var _this2 = this;

      return _promise2.default.resolve().then(function () {
        var meeting = _collection2.default.get(options.correlationId);

        var roapMessage = {
          messageType: _constants.ROAP.ROAP_TYPES.OK,
          version: _constants.ROAP.ROAP_VERSION,
          seq: options.seq
        };

        console.log('ROAP:sendRoapOK ', options.seq);
        return _this2.roapRequest.sendRoap({
          roapMessage: roapMessage,
          locusId: options.locusId,
          locusSelfId: options.locusSelfId,
          mediaId: options.mediaId,
          correlationId: options.correlationId,
          audioMuted: meeting.isAudioMuted(),
          videoMuted: meeting.isVideoMuted()
        }).then(function () {
          _this2.roapHandler.submit({
            type: _constants.ROAP.SEND_ROAP_MSG,
            msg: roapMessage,
            correlationId: options.correlationId
          });
          console.log('ROAP:sendRoapOK out', options.seq);
          meeting.setRoapSeq(options.seq);
        });
      });
    }

    // eslint-disable-next-line no-warning-comments
    // TODO: try to merge sendRoapOk and roapAnswer
    /**
     * Sends a ROAP answer...
     * @param {Object} options
     * @returns {Promise}
     */

  }, {
    key: 'sendRoapAnswer',
    value: function sendRoapAnswer(options) {
      var _this3 = this;

      var meeting = _collection2.default.get(options.correlationId);
      var roapMessage = {
        messageType: _constants.ROAP.ROAP_TYPES.ANSWER,
        sdps: options.sdps,
        version: _constants.ROAP.ROAP_VERSION,
        seq: options.seq
      };
      return this.roapRequest.sendRoap({
        roapMessage: roapMessage,
        locusId: options.locusId,
        locusSelfId: options.locusSelfId,
        mediaId: options.mediaId,
        correlationId: options.correlationId,
        audioMuted: options.audioMuted,
        videoMuted: options.videoMuted
      }).then(function () {
        meeting.setRoapSeq(options.seq);
        _this3.roapHandler.submit({
          type: _constants.ROAP.SEND_ROAP_MSG,
          msg: roapMessage,
          correlationId: options.correlationId
        });
      });
    }

    /**
     * Sends a ROAP error...
     * @param {Object} session
     * @param {Object} locus
     * @param {String} errorType
     * @returns {Promise}
     */

  }, {
    key: 'sendRoapError',
    value: function sendRoapError(session, locus, errorType) {
      var msg = {
        messageType: _constants.ROAP.ROAP_TYPES.ERROR,
        version: _constants.ROAP.ROAP_VERSION,
        errorType: errorType,
        seq: session.OFFER.seq
      };

      return this.roapRequest.sendRoap(msg, locus);
    }

    /**
     * sends a roap media request
     * @param {Object} options
     * @returns {Promise}
     */

  }, {
    key: 'sendRoapMediaRequest',
    value: function sendRoapMediaRequest(options) {
      var _this4 = this;

      var meeting = options.meeting;

      var roapMessage = {
        messageType: _constants.ROAP.ROAP_TYPES.OFFER,
        sdps: options.sdps,
        version: _constants.ROAP.ROAP_VERSION,
        seq: typeof options.roapSeq !== 'number' && (0, _isNan2.default)(parseFloat(options.roapSeq)) ? 0 : options.roapSeq + 1,
        tieBreaker: 4294967294 // Math.floor(Math.random() * (2 ** 32) - 1) // TODO: Handle the roap  conflict scenario
      };

      this.roapHandler.submit({
        type: _constants.ROAP.SEND_ROAP_MSG,
        msg: roapMessage,
        correlationId: meeting.correlationId
      });

      return this.roapRequest.sendRoap({
        roapMessage: roapMessage,
        correlationId: meeting.correlationId,
        locusId: meeting.locusId,
        locusSelfId: meeting.selfId, // locusSelfId ???
        mediaId: meeting.mediaId,
        audioMuted: meeting.isAudioMuted(),
        videoMuted: meeting.isVideoMuted()
      }).then(function (locus) {
        _this4.roapHandler.submit({
          type: _constants.ROAP.SEND_ROAP_MSG_SUCCESS,
          seq: roapMessage.seq,
          correlationId: meeting.correlationId
        });
        meeting.setRoapSeq(roapMessage.seq);
        // eslint-disable-next-line no-warning-comments
        // TODO: we need to attach peerconenction to locus not sure if we need to pass everything here
        return locus;
        // eslint-disable-next-line no-warning-comments
        // TODO: check where to update the sequence number
      });
    }
  }]);
  return Roap;
}(_sparkCore.StatelessSparkPlugin);

exports.default = Roap;
//# sourceMappingURL=index.js.map
