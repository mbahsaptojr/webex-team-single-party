{"version":3,"sources":["util.js"],"names":["RoapUtil","ROAP_ANSWER","ANSWER","toLowerCase","shouldHandleMedia","meeting","mediaOffer","mediaProperties","mediaPeerConnection","signalingState","SDP","HAVE_LOCAL_OFFER","screenOffer","sharePeerConnection","handleError","pc","PeerConnectionManager","rollBackLocalDescription","then","resolve","catch","err","reject","findError","messageType","errorType","type","ROAP","RECEIVE_ROAP_MSG","SEND_ROAP_MSG","ERROR","CONFLICT","ensureMeeting","SEND_ROAP_MSG_SUCCESS","compareLastRemoteOffer","currentOffer","previousOffer","index1","index2","difference","length","console","log","slice","forEach","sdp","index","indexOf","substring","updatePeerConnection","session","res","OFFER","sdps","roap","lastRoapOffer","sdpPromises","push","offerSdp","offerToReceiveAudio","offerToReceiveVideo","setRemoteDescription","info","correlationId","error","Error","promise","all","setRemoteSessionDetails","clientIdentifiers","seq","locusId","locusSelfId","locusInfo","self","id","mediaId"],"mappings":"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","file":"util.js","sourcesContent":["/* eslint-disable no-console */\n// we need to figure out how to pass a spark logger instace to these util files\n\nimport PeerConnectionManager from '../peer-connection-manager';\nimport {ANSWER, ERROR, CONFLICT, ROAP, SDP} from '../constants';\n\nconst RoapUtil = {};\nconst ROAP_ANSWER = ANSWER.toLowerCase();\n\nRoapUtil.shouldHandleMedia = (meeting) => {\n  const mediaOffer\n    = meeting.mediaProperties.mediaPeerConnection\n    && meeting.mediaProperties.mediaPeerConnection.signalingState === SDP.HAVE_LOCAL_OFFER;\n  const screenOffer\n    = meeting.mediaProperties.sharePeerConnection\n    && meeting.mediaProperties.sharePeerConnection.signalingState === SDP.HAVE_LOCAL_OFFER;\n  if (mediaOffer || screenOffer) {\n    return false;\n  }\n  return true;\n};\n\nRoapUtil.handleError = (pc) =>\n  PeerConnectionManager.rollBackLocalDescription({mediaPeerConnection: pc})\n    .then(() => Promise.resolve(true))\n    .catch((err) => Promise.reject(err));\n\nRoapUtil.findError = (messageType, errorType, type) =>\n  (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG) && messageType === ERROR && errorType === CONFLICT;\n\nRoapUtil.ensureMeeting = (meeting, type) => {\n  if (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG || type === ROAP.SEND_ROAP_MSG_SUCCESS) {\n    if (!meeting) {\n      return false;\n    }\n  }\n  return true;\n};\n\nRoapUtil.compareLastRemoteOffer = (currentOffer, previousOffer) => {\n  let index1, index2;\n  let difference = false;\n\n  if (previousOffer.length > 0 && previousOffer.length === currentOffer.length) {\n    console.log('previous offer', previousOffer[0].slice(0, 20));\n    console.log('current offer', currentOffer[0].slice(0, 20));\n    previousOffer.forEach((sdp, index) => {\n      index1 = sdp.indexOf('IN');\n      index2 = currentOffer[index].indexOf('IN');\n\n      if (sdp.substring(index1) !== currentOffer[index].substring(index2)) {\n        difference = true;\n      }\n    });\n  }\n  return difference;\n};\n\nRoapUtil.updatePeerConnection = (meeting, session) => {\n  const res = RoapUtil.compareLastRemoteOffer(session.OFFER.sdps, meeting.roap.lastRoapOffer);\n  if (!res) {\n    const sdpPromises = [];\n    if (meeting.mediaProperties.mediaPeerConnection) {\n      sdpPromises.push(meeting.mediaProperties.mediaPeerConnection.sdp);\n    }\n    if (meeting.mediaProperties.sharePeerConnection) {\n      sdpPromises.push(meeting.mediaProperties.sharePeerConnection.sdp);\n    }\n    return Promise.resolve(sdpPromises);\n  }\n  return PeerConnectionManager.updatePeerConnection({\n    offerSdp: session.OFFER.sdps,\n    pc: meeting.mediaProperties.mediaPeerConnection,\n    sharePeerConnection: meeting.mediaProperties.sharePeerConnection,\n    offerToReceiveAudio: true,\n    offerToReceiveVideo: true\n  })\n    .then((res) => {\n      meeting.roap.lastRoapOffer = session.OFFER.sdps;\n      return res;\n    });\n};\n\n\nRoapUtil.setRemoteDescription = (meeting, session) => {\n  console.info('Call-RoapHandler: Transmite WAIT_TX_OK', meeting.correlationId);\n  if (!(meeting && (meeting.mediaProperties.mediaPeerConnection || meeting.mediaProperties.sharePeerConnection))) {\n    console.error('Call-RoapHandler: DANGER no media or screen peer connection', meeting.correlationId);\n    return Promise.reject(new Error('Must provide a media or screen peer connection'));\n  }\n  let promise;\n  if (meeting.mediaProperties.mediaPeerConnection && meeting.mediaProperties.sharePeerConnection) {\n    promise = Promise.all([\n      PeerConnectionManager.setRemoteSessionDetails(\n        meeting.mediaProperties.mediaPeerConnection,\n        ROAP_ANSWER,\n        session.ANSWER.sdps[0],\n        meeting.clientIdentifiers\n      ),\n      PeerConnectionManager.setRemoteSessionDetails(\n        meeting.mediaProperties.sharePeerConnection,\n        ROAP_ANSWER,\n        session.ANSWER.sdps[1],\n        meeting.clientIdentifiers\n      )\n    ]);\n  }\n  else if (meeting.mediaProperties.sharePeerConnection) {\n    promise = PeerConnectionManager.setRemoteSessionDetails(\n      meeting.mediaProperties.sharePeerConnection,\n      ROAP_ANSWER,\n      session.ANSWER.sdps[0],\n      meeting.clientIdentifiers\n    );\n  }\n  return promise\n    .then(() => {\n      console.info('Call-RoapHandler: setRemote Description successfull', meeting.correlationId);\n      return {\n        seq: session.ANSWER.seq,\n        locusId: meeting.locusId,\n        locusSelfId: meeting.locusInfo.self.id,\n        mediaId: meeting.mediaId,\n        correlationId: meeting.correlationId\n      };\n    })\n    .catch((err) => {\n      console.error('Call-RoapHandler: Error setting remote and sending Roap Message', err);\n      throw err;\n    });\n};\n\nexport default RoapUtil;\n"]}