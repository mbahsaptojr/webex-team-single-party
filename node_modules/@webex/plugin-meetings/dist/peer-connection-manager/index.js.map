{"version":3,"sources":["index.js"],"names":["PC","insertBandwidthLimit","sdpLines","index","limit","search","AUDIO","AUDIO_BANDWIDTH_LIMIT","VIDEO_BANDWIDTH_LIMIT","splice","SDP","B_LINE","setMaxFs","sdp","replaceSdp","payloadTypes","match","forEach","payload","replace","MAX_FS_8160","checkH264Support","videoPresent","h264Present","validateSdp","parsedSdp","sdpTransform","parse","media","mediaLine","candidates","length","console","error","BAD_MEDIA_PORTS","includes","port","icePwd","iceUfrag","limitBandwidth","offerSdp","split","CARRIAGE_RETURN","i","M_LINE","join","iceFailListener","pc","fn","name","oniceconnectionstatechange","iceConnectionState","ICE_STATE","FAILED","DISCONNECTED","Date","setTimeout","ICE_FAIL_TIMEOUT","detectFailures","spc","reconnectFn","MEDIA_PEER_CONNECTION_NAME","SHARE_PEER_CONNECTION_NAME","setContentSlides","screenPc","A_CONTENT_SLIDES","iceCandidate","resolve","timeout","localDescription","RETRY_TIMEOUT","ICE_TIMEOUT","onicecandidate","evt","candidate","clearTimeout","replaceTrack","track","senders","getSenders","sender","kind","err","addStream","stream","info","bowser","msedge","tracksPresent","find","getTracks","addTrack","setRemoteSessionDetails","typeStr","remoteSdp","sharePeerConnection","signalingState","promiseSdp","mlines","contentSdp","push","setRemoteDescription","window","RTCSessionDescription","type","HAVE_LOCAL_OFFER","STABLE","OFFER","all","catch","reject","createOffer","params","peerConnection","RTCPeerConnection","firefox","RTC_CONFIGURATION_FIREFOX","RTC_CONFIGURATION","streams","Array","isArray","sdpConstraints","offerToReceiveAudio","receiveAudio","offerToReceiveVideo","receiveVideo","then","description","setLocalDescription","Error","close","rollBackLocalDescription","ROLLBACK","updatePeerConnection","screenConstraints","undefined","createAnswer","updatedScreenPc","updatedPc","answer","warn"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable */\n// We need to figure out how to pass a spark logger instance to these util files\n\n/* globals window, RTCSessionDescription */\n\nimport bowser from 'bowser';\nimport sdpTransform from 'sdp-transform'; // https://github.com/clux/sdp-transform\n\nimport {\n  AUDIO_BANDWIDTH_LIMIT,\n  VIDEO_BANDWIDTH_LIMIT,\n  RTC_CONFIGURATION,\n  RTC_CONFIGURATION_FIREFOX,\n  RETRY_TIMEOUT,\n  ICE_TIMEOUT,\n  AUDIO,\n  SDP,\n  MEDIA_PEER_CONNECTION_NAME,\n  SHARE_PEER_CONNECTION_NAME,\n  ICE_STATE,\n  ICE_FAIL_TIMEOUT\n} from '../constants';\n\nconst PC = {};\n\nconst insertBandwidthLimit = (sdpLines, index) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser\n  let limit;\n  if (sdpLines[index].search(AUDIO) !== -1) {\n    limit = AUDIO_BANDWIDTH_LIMIT;\n  } else {\n    limit = VIDEO_BANDWIDTH_LIMIT;\n  }\n  sdpLines.splice(index + 1, 0, `${SDP.B_LINE}:${limit}`);\n  return sdpLines;\n};\n\nconst setMaxFs = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert with sdp parser, no munging\n  let replaceSdp = sdp;\n  const payloadTypes = sdp.match(/\\na=fmtp:(\\d+).*level-asymmetry-allowed=1.*/g);\n  if (payloadTypes) {\n    payloadTypes.forEach((payload) => {\n      replaceSdp = replaceSdp.replace(payload, `${payload};${SDP.MAX_FS_8160}`);\n    });\n  }\n  return replaceSdp;\n};\n\nconst checkH264Support = (sdp) => {\n  // eslint-disable-next-line no-warning-comments\n  // TODO convert to sdp parser to read rtp.codec\n  const videoPresent = sdp.match(/\\nm=video.*/g);\n  const h264Present = sdp.match(/\\na=rtpmap:\\d+\\sH264.*/g);\n\n  if (videoPresent) {\n    return !!h264Present;\n  }\n  return true;\n};\n\nconst validateSdp = (sdp) => {\n  const parsedSdp = sdpTransform.parse(sdp);\n\n  parsedSdp.media.forEach((mediaLine) => {\n    if (mediaLine.candidates && mediaLine.candidates.length === 0) {\n      console.error('iceCandidate: Ice candadate never completed');\n      return false;\n    }\n    if (SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {\n      console.error('iceCandidate: Found invalid port number for the ice candidate');\n      return false;\n    }\n    if (!mediaLine.icePwd || !mediaLine.iceUfrag) {\n      console.error('iceCandidate: ice ufrag and password not found');\n      return false;\n    }\n    return true;\n  });\n};\n\nconst limitBandwidth = (sdp) => {\n  // TODO convert to sdp parser\n  let offerSdp = sdp;\n  let sdpLines = offerSdp.split(SDP.CARRIAGE_RETURN);\n\n  for (let i = 0; i < sdpLines.length; i += 1) {\n    if (sdpLines[i].search(SDP.M_LINE) !== -1) {\n      sdpLines = insertBandwidthLimit(sdpLines, i);\n    }\n  }\n  offerSdp = sdpLines.join(SDP.CARRIAGE_RETURN);\n  return offerSdp;\n};\n\nPC.iceFailListener = (pc, fn, name) => {\n  if (!pc) {\n    return;\n  }\n  pc.oniceconnectionstatechange = () => {\n    switch (pc.iceConnectionState) {\n      case ICE_STATE.FAILED:\n      case ICE_STATE.DISCONNECTED:\n        console.error(`${name} Interactive Connectivity Establishment(ICE)${pc.iceConnectionState}!`, new Date());\n        setTimeout(() => {\n          switch (pc.iceConnectionState) {\n            case ICE_STATE.FAILED:\n            case ICE_STATE.DISCONNECTED:\n              // if ice is still failed after some time, do the reconnect\n              // else the browser resolves the ice failure on its own\n              fn();\n              break;\n            default:\n            break;\n          }\n        }, ICE_FAIL_TIMEOUT);\n        break;\n      default:\n        break;\n    }\n  };\n};\n\nPC.detectFailures = (pc, spc, reconnectFn = () => {console.error('Ice failed, no function to reconnect with.')}) => {\n  PC.iceFailListener(pc, reconnectFn, MEDIA_PEER_CONNECTION_NAME);\n  PC.iceFailListener(spc, reconnectFn, SHARE_PEER_CONNECTION_NAME);\n};\n\nPC.setContentSlides = (screenPc) => {\n  if (screenPc && screenPc.sdp) {\n    screenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;\n  }\n  return screenPc;\n};\n\n/**\n * handles ice trickling and establishes ICE connection onto peer connection object\n * @param {Object} pc\n * @returns {RTCPeerConnection}\n */\nPC.iceCandidate = (pc) =>\n  new Promise((resolve) => {\n    // TODO: we dont need timeout as we can check the api state and validate.\n    const timeout = setTimeout(() => {\n      pc.sdp = limitBandwidth(pc.localDescription.sdp);\n      pc.sdp = setMaxFs(pc.sdp);\n      pc.sdp = pc.sdp.replace(/\\na=extmap.*/g, '');\n\n      if (!validateSdp(pc.sdp)) {\n        setTimeout(() => {\n          resolve(pc);\n        }, RETRY_TIMEOUT);\n      } else {\n        resolve(pc);\n      }\n    }, ICE_TIMEOUT);\n\n    pc.onicecandidate = (evt) => {\n      if (!evt.candidate && !pc.sdp) {\n        pc.sdp = limitBandwidth(pc.localDescription.sdp);\n        pc.sdp = setMaxFs(pc.sdp);\n        pc.sdp = pc.sdp.replace(/\\na=extmap.*/g, '');\n\n        if (evt.candidate === null) {\n          validateSdp(pc.sdp);\n          clearTimeout(timeout);\n          resolve(pc);\n        }\n      }\n    };\n  });\n\n/**\n * swapping tracks\n * @param {Object} pc\n * @param {Object} track\n * @returns {undefined}\n */\nPC.replaceTrack = (pc, track) => {\n  try {\n    const senders = pc.getSenders();\n    if (senders.length > 0) {\n      senders.forEach((sender) => {\n        if (sender.track && sender.track.kind === track.kind) {\n          sender.replaceTrack(track);\n        }\n      });\n    }\n  } catch (err) {\n    console.error('replaceTrack: Error while replacing Tracks ', err);\n  }\n};\n\n/**\n * adding streams to mediaPeerConnection\n * @param {Object} pc\n * @param {Object} stream\n * @returns {undefined}\n */\nPC.addStream = (pc, stream) => {\n  console.info('addStream: adding streams to peerconnection');\n\n  try {\n    if (stream && !bowser.msedge) {\n      const tracksPresent = pc.getSenders && pc.getSenders().find((sender) => sender.track != null);\n      if (tracksPresent) {\n        stream.getTracks().forEach((track) => {\n          PC.replaceTrack(pc, track);\n        });\n        return;\n      }\n      stream.getTracks().forEach((track) => {\n        pc.addTrack(track, stream);\n      });\n      // // TODO : may come back disable addTracks for chrome they are moving back to addStream\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414\n      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7\n      //   pc.addStream(stream);\n    } else if (bowser.msedge) {\n      pc.addStream(stream);\n    } else {\n      console.error('addStream: No streams to add');\n    }\n  } catch (err) {\n    console.error('addStream: Error while adding Stream ', err);\n  }\n};\n\n/**\n * setting the remote description\n * @param {Object} pc\n * @param {String} typeStr\n * @param {String} remoteSdp\n * @returns {undefined}\n */\nPC.setRemoteSessionDetails = (pc, typeStr, remoteSdp) => {\n  const {sharePeerConnection} = pc;\n  console.info(`Setting the remote description type: ${typeStr}State: ${pc.signalingState}`);\n  const promiseSdp = [];\n  let sdp = remoteSdp;\n\n  sdp = sdp.replace(/\\na=extmap.*/g, '');\n\n  const mlines = sdp.split(SDP.M_LINE);\n  if (mlines.length === 4 && sharePeerConnection) {\n    sdp = `${mlines[0]}${SDP.M_LINE}${mlines[1]}${SDP.M_LINE}${mlines[2]}`;\n    const contentSdp = `${mlines[0]}${SDP.M_LINE}${mlines[3]}`;\n    promiseSdp.push(\n      sharePeerConnection.setRemoteDescription(\n        new window.RTCSessionDescription({\n          type: typeStr,\n          sdp: contentSdp\n        })\n      )\n    );\n  }\n\n  // making sure that the remoteDescription is only set when there is a answer for offer\n  // or there is a offer from the server\n  if (pc.signalingState === SDP.HAVE_LOCAL_OFFER || (pc.signalingState === SDP.STABLE && typeStr === SDP.OFFER)) {\n    promiseSdp.push(\n      pc.setRemoteDescription(\n        new window.RTCSessionDescription({\n          type: typeStr,\n          sdp\n        })\n      )\n    );\n  }\n  return Promise.all(promiseSdp).catch((err) => {\n    console.error('Error setting the remoteDescription', err);\n    return Promise.reject(err);\n  });\n};\n\n/**\n * create offer with a valid paramater\n * @param {Object} params\n * @returns {RTCPeerConnection}\n */\nPC.createOffer = (params = {}) => {\n  console.info('createOffer: creating a new offer');\n\n  try {\n    const pc =\n      params.peerConnection ||\n      new window.RTCPeerConnection(bowser.firefox ? RTC_CONFIGURATION_FIREFOX : RTC_CONFIGURATION);\n    if (params.streams) {\n      if (Array.isArray(params.streams)) {\n        PC.addStream(pc, params.streams[0]);\n      } else {\n        PC.addStream(pc, params.streams);\n      }\n    }\n\n    const sdpConstraints = {\n      offerToReceiveAudio: params.receiveAudio,\n      offerToReceiveVideo: params.receiveVideo\n    };\n\n    return pc\n      .createOffer(sdpConstraints)\n      .then((description) => pc.setLocalDescription(description))\n      .then(() => PC.iceCandidate(pc))\n      .then(() => {\n        pc.sdp = limitBandwidth(pc.localDescription.sdp);\n        pc.sdp = setMaxFs(pc.sdp);\n        if (!checkH264Support(pc.sdp)) {\n          throw new Error('openH264 is downloading please Wait. Upload logs if not working on second try');\n        }\n\n        pc.sdp = pc.sdp.replace(/\\na=extmap.*/g, '');\n\n        return pc;\n      })\n      .catch((err) => {\n        PC.close(pc);\n        throw err;\n      });\n  } catch (err) {\n    console.error('createOffer: error while creating a offer ', err);\n    throw err;\n  }\n};\n\n/**\n * rollBack local description in peerconnection\n * @param {Object} pc\n * @returns {RTCPeerConnection}\n */\nPC.rollBackLocalDescription = (pc) => {\n  console.info('rollBackLocalDescription: rollingbacking peerconnection');\n\n  return pc\n    .setLocalDescription(new RTCSessionDescription({type: SDP.ROLLBACK}))\n    .then(() => pc)\n    .catch((err) => {\n      console.error('rollBackLocalDescription: Error while setting the Local Description ', err);\n      return Promise.error(err);\n    });\n};\n\n/**\n * @param {Object} params {\n *  offerToReceiveAudio: {Boolean} sdp constraints\n *  offerToReceiveVideo: {Boolean} sdp constraints\n *  offerSdp: {sdp}\n *  stream: {PCStream}\n * }\n * @returns {Array} [MediaSDP, ScreenSDP]\n */\nPC.updatePeerConnection = (params) => {\n  console.info('updatePeerConnection: updating the pc');\n\n  const {pc, sharePeerConnection} = params;\n\n  const screenConstraints = {\n    offerToReceiveAudio: false,\n    offerToReceiveVideo: true\n  };\n  const sdpConstraints = {\n    offerToReceiveAudio: params.offerToReceiveAudio,\n    offerToReceiveVideo: params.offerToReceiveVideo\n  };\n\n  if (pc === undefined && sharePeerConnection) {\n    return PC.createAnswer({\n      pc: sharePeerConnection,\n      screenConstraints,\n      offerSdp: params.offerSdp[0]\n    }).then((updatedScreenPc) => {\n      updatedScreenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;\n      return [updatedScreenPc.sdp];\n    });\n  }\n\n  return Promise.all([\n    PC.createAnswer({\n      pc,\n      sdpConstraints,\n      offerSdp: params.offerSdp[0]\n    }),\n    PC.createAnswer({\n      pc: sharePeerConnection,\n      offerSdp: params.offerSdp[1],\n      sdpConstraints: screenConstraints\n    })\n  ]).then(([updatedPc, updatedScreenPc]) => {\n    sharePeerConnection.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;\n    return [updatedPc.sdp, updatedScreenPc.sdp];\n  });\n};\n\n/**\n * @param {Object} params {\n *  pc: {Object} mediaPeerConnection\n *  sdpConstraints: {Object} sdp constraints\n * }\n * @returns {RTCPeerConnection} pc\n */\nPC.createAnswer = (params) => {\n  const {pc} = params;\n\n  // TODO: Some times to many mercury event comes at the same time\n  // Need to maintain state of peerconnection\n  if (pc.signalingState === 'have-remote-offer') {\n    return Promise.resolve(pc);\n  }\n\n  return PC.setRemoteSessionDetails(pc, 'offer', params.offerSdp)\n    .then(() => pc.createAnswer(params.sdpConstraints))\n    .then((answer) =>\n      //   if (edonusHack()) {\n      //     answer.sdp = answer.sdp.replace(/recvonly.*/g, 'sendrecv');\n      //   }\n      pc.setLocalDescription(answer)\n    )\n    .then(() => PC.iceCandidate(pc))\n    .then(() => {\n      pc.sdp = limitBandwidth(pc.localDescription.sdp);\n      pc.sdp = setMaxFs(pc.sdp);\n      if (!checkH264Support(pc.sdp)) {\n        throw new Error('openH264 is downloading please Wait. Upload logs if not working on second try');\n      }\n\n      pc.sdp = pc.sdp.replace(/\\na=extmap.*/g, '');\n\n      return pc;\n    })\n    .catch((err) => {\n      console.error('updatePeerConnection: error while updating the PC ', err);\n    });\n};\n\n/**\n * shut down the peer connection\n * @param {Object} pc\n * @returns {undefined}\n */\nPC.close = (pc) => {\n  // pc.close() fails on firefox on network changes and gives a Dom exception\n  // To avoid this we have added a try catch block.\n  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information\n  console.info('PC: close() -> closing the mediaPeerConnection');\n  return Promise.resolve()\n    .then(() => {\n      if (pc && pc.close) {\n        pc.close();\n      } else {\n        console.warn('Peer connection has no close');\n      }\n    })\n    .catch((err) => {\n      console.error('Error Cleaning Up the PeerConnection', err);\n    });\n};\n\nexport default PC;\n"]}