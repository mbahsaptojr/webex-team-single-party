'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * stores the last x filtered stream datas
 */
var StatsHistory = function () {
  /**
   * instantiate our wrapped history array
   */
  function StatsHistory() {
    (0, _classCallCheck3.default)(this, StatsHistory);

    this.history = [];
  }

  /**
   * @returns {Array} the array of stats reports, read from [0] = most recent to [length - 1] = least recent
   */


  (0, _createClass3.default)(StatsHistory, [{
    key: 'get',
    value: function get() {
      return this.history;
    }

    /**
     * deletes the history array and resets it
     * @returns {undefined}
     */

  }, {
    key: 'clearHistory',
    value: function clearHistory() {
      this.history = [];
    }

    /**
     * gets the stored stat
     * @param {Number} index the location
     * @returns {Object} the stat at location index
     */

  }, {
    key: 'getHistoryAt',
    value: function getHistoryAt(index) {
      return this.history[index];
    }

    /**
     * gets the most recently stored stat
     * @returns {Object} the most recently added stat to the history recorder
     */

  }, {
    key: 'getMostRecent',
    value: function getMostRecent() {
      return this.history.length > 1 ? this.history[1] : undefined;
    }

    /**
     * adds a history entry into the array at the head, removes from the tail
     * if too large, returns the old tail if removed
     * @param {WebRTCData} data filtered stats report to add to the history array
     * @returns {Object} the removed stats report at the end that had to be removed
     * for the new stats data report to be added to the front
     */

  }, {
    key: 'addHistory',
    value: function addHistory(data) {
      var removed = void 0;
      if (this.history.length >= _constants.DEFAULT_STATS_HISTORY_MAX) {
        removed = this.history.pop();
      }
      this.history.unshift(data);
      return removed;
    }
  }]);
  return StatsHistory;
}();

exports.default = StatsHistory;
//# sourceMappingURL=history.js.map
