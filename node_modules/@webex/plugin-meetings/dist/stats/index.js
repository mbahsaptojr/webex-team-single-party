'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _sparkCore = require('@ciscospark/spark-core');

var _constants = require('../constants');

var _stats = require('../stats/stats');

var _stats2 = _interopRequireDefault(_stats);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class WebRTCStats
 */
var WebRTCStats = function (_StatelessSparkPlugin) {
  (0, _inherits3.default)(WebRTCStats, _StatelessSparkPlugin);

  /**
    *
    * @param {Object} attrs
    * @param {Object} options
    * @param {Object} optionalCreateOptions - optional {media: {}, screen: {}, see MeetingStats options}
   */
  function WebRTCStats(attrs, options, optionalCreateOptions) {
    (0, _classCallCheck3.default)(this, WebRTCStats);

    var _this = (0, _possibleConstructorReturn3.default)(this, (WebRTCStats.__proto__ || (0, _getPrototypeOf2.default)(WebRTCStats)).call(this, {}, options));

    _this.namespace = _constants.MEETINGS;

    _this.attrs = attrs;
    _this.options = options;
    _this.media = undefined;
    _this.screen = undefined;
    if (optionalCreateOptions && optionalCreateOptions.media) {
      _this.withMedia(optionalCreateOptions.media);
    }
    if (optionalCreateOptions && optionalCreateOptions.screen) {
      _this.withScreen(optionalCreateOptions.screen);
    }
    return _this;
  }

  /**
   * @returns {WebRTCStats}
   */


  (0, _createClass3.default)(WebRTCStats, [{
    key: 'build',
    value: function build() {
      return this;
    }

    /**
     * constructs a MeetingStats object on this instance for media stream
     * @param {Object} options - optional, see MeetingStats options
     * @returns {WebRTCStats}
     */

  }, {
    key: 'withMedia',
    value: function withMedia(options) {
      this.media = new _stats2.default(this.attrs, this.options, options);
      return this;
    }

    /**
     * constructs a interval object on this instance
     * @param {Object} options - optional, see MeetingStats options
     * @returns {WebRTCStats}
     */

  }, {
    key: 'withScreen',
    value: function withScreen(options) {
      this.screen = new _stats2.default(this.attrs, this.options, options);
      return this;
    }

    /**
     * @param {MeetingStats} media
     * @returns {undefined}
     */

  }, {
    key: 'setMedia',
    value: function setMedia(media) {
      this.media = media;
    }

    /**
     * @param {MeetingStats} screen
     * @returns {undefined}
     */

  }, {
    key: 'setScreen',
    value: function setScreen(screen) {
      this.screen = screen;
    }

    /**
     * @returns {MeetingStats}
     */

  }, {
    key: 'getMedia',
    value: function getMedia() {
      return this.media;
    }

    /**
     * @returns {MeetingStats}
     */

  }, {
    key: 'getScreen',
    value: function getScreen() {
      return this.screen;
    }
  }]);
  return WebRTCStats;
}(_sparkCore.StatelessSparkPlugin);

exports.default = WebRTCStats;
//# sourceMappingURL=index.js.map
