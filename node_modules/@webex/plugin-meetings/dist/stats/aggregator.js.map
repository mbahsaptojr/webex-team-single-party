{"version":3,"sources":["aggregator.js"],"names":["StatsAggregator","options","format","DEFAULT_TRANSFORM_KEYS","summary","length","forEach","key","clearSummary","data","StatsCalculator","aggregate"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;;AACA;;;;;;AAEA;;;IAGqBA,e;AACnB;;;;;;AAMA,6BAAqE;AAAA;;AAAA,QAAzDC,OAAyD,uEAA/C,EAACC,QAAQC,iCAAT,EAAiCC,SAAS,EAA1C,EAA+C;AAAA;;AACnE,SAAKA,OAAL,GAAeH,QAAQG,OAAvB;AACA,QAAI,oBAAKH,QAAQG,OAAb,EAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACtCJ,cAAQC,MAAR,CAAeI,OAAf,CAAuB,UAACC,GAAD,EAAS;AAC9B,cAAKH,OAAL,CAAaG,GAAb,IAAoB,EAApB;AACD,OAFD;AAGD;AACF;;AAED;;;;;;;;8BAIUL,M,EAAQ;AAAA;;AAChB,WAAKM,YAAL;AACAN,aAAOI,OAAP,CAAe,UAACC,GAAD,EAAS;AACtB,eAAKH,OAAL,CAAaG,GAAb,IAAoB,EAApB;AACD,OAFD;AAGD;;AAED;;;;;;0BAGM;AACJ,aAAO,KAAKH,OAAZ;AACD;;AAED;;;;;;;4BAIQ;AACN,WAAKA,OAAL,GAAe,EAAf;AACD;;AAED;;;;;;;;8BAKUK,I,EAAM;AACd,WAAKL,OAAL,GAAeM,qBAAgBC,SAAhB,CAA0BF,IAA1B,EAAgC,KAAKL,OAArC,CAAf;AACD;;;;;kBAjDkBJ,e","file":"aggregator.js","sourcesContent":["import {keys} from 'lodash';\n\nimport {DEFAULT_TRANSFORM_KEYS} from '../constants';\nimport StatsCalculator from '../stats/calculator';\n\n/**\n * simply adds up the properties from filtered stream data\n */\nexport default class StatsAggregator {\n  /**\n   * @private\n   * @param {Object} options\n   * options.format -- the format to store the stats reports as in summary form\n   * options.summary -- if it comes prebuilt with another summary\n   */\n  constructor(options = {format: DEFAULT_TRANSFORM_KEYS, summary: {}}) {\n    this.summary = options.summary;\n    if (keys(options.summary).length === 0) {\n      options.format.forEach((key) => {\n        this.summary[key] = {};\n      });\n    }\n  }\n\n  /**\n   * @param {Array} format the keys to set up for the summary to fill in later\n   * @returns {undefined}\n   */\n  setFormat(format) {\n    this.clearSummary();\n    format.forEach((key) => {\n      this.summary[key] = {};\n    });\n  }\n\n  /**\n   * @returns {Object} the aggregated summary at time of call\n   */\n  get() {\n    return this.summary;\n  }\n\n  /**\n   * reset the summary\n   * @returns {undefined}\n   */\n  clear() {\n    this.summary = {};\n  }\n\n  /**\n   * calculate a new aggregation based on the last summary and an incoming data point\n   * @param {WebRTCData} data\n   * @returns {undefined}\n   */\n  aggregate(data) {\n    this.summary = StatsCalculator.aggregate(data, this.summary);\n  }\n}\n"]}