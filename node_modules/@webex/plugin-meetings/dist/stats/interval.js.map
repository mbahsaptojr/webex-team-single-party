{"version":3,"sources":["interval.js"],"names":["StatsInterval","options","previous","undefined","updated","interval","StatsCalculator","getPrevious","getUpdated","setPrevious","setUpdated","calculateInterval","get"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;;;IAIqBA,a;AACnB;;;;;;AAMA,2BAA+E;AAAA,QAAnEC,OAAmE,uEAAzD,EAACC,UAAUC,SAAX,EAAsBC,SAASD,SAA/B,EAA0CE,UAAU,EAApD,EAAyD;AAAA;;AAC7E,SAAKH,QAAL,GAAgBD,QAAQC,QAAxB;AACA,SAAKE,OAAL,GAAeH,QAAQG,OAAvB;AACA,SAAKC,QAAL,GAAgBJ,QAAQI,QAAxB;AACD;;AAED;;;;;;;;;gCAKYH,Q,EAAU;AACpB,WAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAED;;;;;;;;+BAKWE,O,EAAS;AAClB,WAAKA,OAAL,GAAeA,OAAf;AACD;;AAED;;;;;;kCAGc;AACZ,aAAO,KAAKF,QAAZ;AACD;;AAED;;;;;;iCAGa;AACX,aAAO,KAAKE,OAAZ;AACD;;AAED;;;;;;0BAGM;AACJ,aAAO,KAAKC,QAAZ;AACD;;AAED;;;;;;;wCAIoB;AAClB,WAAKA,QAAL,GAAgBC,qBAAgBD,QAAhB,CAAyB,KAAKE,WAAL,EAAzB,EAA6C,KAAKC,UAAL,EAA7C,CAAhB;AACD;;AAED;;;;;;;;;mCAMeJ,O,EAAS;AACtB,WAAKK,WAAL,CAAiB,KAAKL,OAAtB;AACA,WAAKM,UAAL,CAAgBN,OAAhB;AACA,WAAKO,iBAAL;AACA,aAAO,KAAKC,GAAL,EAAP;AACD;;;;;kBAvEkBZ,a","file":"interval.js","sourcesContent":["import StatsCalculator from '../stats/calculator';\n\n/**\n * simply calculates the data between two points, assumes updated data is later in the time series\n * and should be subtracted from to calculate the interval\n */\nexport default class StatsInterval {\n  /**\n   * @param {Object} options\n   * options.previous - the old stats report to compare to\n   * options.updated - the new stats report to subtract from\n   * options.interval - create a new interval with an already stored interval\n   */\n  constructor(options = {previous: undefined, updated: undefined, interval: {}}) {\n    this.previous = options.previous;\n    this.updated = options.updated;\n    this.interval = options.interval;\n  }\n\n  /**\n   * sets the previous data to subtract\n   * @param {Object} previous\n   * @returns {undefined}\n   */\n  setPrevious(previous) {\n    this.previous = previous;\n  }\n\n  /**\n   * sets the updateds data to subtract from\n   * @param {Object} updated\n   * @returns {undefined}\n   */\n  setUpdated(updated) {\n    this.updated = updated;\n  }\n\n  /**\n   * @returns {Object} the previous data to subtract\n   */\n  getPrevious() {\n    return this.previous;\n  }\n\n  /**\n   * @returns {Object} the updated data to subtract from\n   */\n  getUpdated() {\n    return this.updated;\n  }\n\n  /**\n   * @returns {Object} the updated interval data where each key has been subtracted from and the result is stored\n   */\n  get() {\n    return this.interval;\n  }\n\n  /**\n   * call in to the calculator using the set instance variables\n   * @returns {undefined}\n   */\n  calculateInterval() {\n    this.interval = StatsCalculator.interval(this.getPrevious(), this.getUpdated());\n  }\n\n  /**\n   * update the interval by first passing in the new data, shifting it's spots with the previous updated\n   * then calculating the actual interval value\n   * @param {WebRTCData} updated\n   * @returns {Object} interval the stored interval values post subtraction\n   */\n  updateInterval(updated) {\n    this.setPrevious(this.updated);\n    this.setUpdated(updated);\n    this.calculateInterval();\n    return this.get();\n  }\n}\n"]}