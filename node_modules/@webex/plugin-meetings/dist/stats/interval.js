'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _calculator = require('../stats/calculator');

var _calculator2 = _interopRequireDefault(_calculator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * simply calculates the data between two points, assumes updated data is later in the time series
 * and should be subtracted from to calculate the interval
 */
var StatsInterval = function () {
  /**
   * @param {Object} options
   * options.previous - the old stats report to compare to
   * options.updated - the new stats report to subtract from
   * options.interval - create a new interval with an already stored interval
   */
  function StatsInterval() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { previous: undefined, updated: undefined, interval: {} };
    (0, _classCallCheck3.default)(this, StatsInterval);

    this.previous = options.previous;
    this.updated = options.updated;
    this.interval = options.interval;
  }

  /**
   * sets the previous data to subtract
   * @param {Object} previous
   * @returns {undefined}
   */


  (0, _createClass3.default)(StatsInterval, [{
    key: 'setPrevious',
    value: function setPrevious(previous) {
      this.previous = previous;
    }

    /**
     * sets the updateds data to subtract from
     * @param {Object} updated
     * @returns {undefined}
     */

  }, {
    key: 'setUpdated',
    value: function setUpdated(updated) {
      this.updated = updated;
    }

    /**
     * @returns {Object} the previous data to subtract
     */

  }, {
    key: 'getPrevious',
    value: function getPrevious() {
      return this.previous;
    }

    /**
     * @returns {Object} the updated data to subtract from
     */

  }, {
    key: 'getUpdated',
    value: function getUpdated() {
      return this.updated;
    }

    /**
     * @returns {Object} the updated interval data where each key has been subtracted from and the result is stored
     */

  }, {
    key: 'get',
    value: function get() {
      return this.interval;
    }

    /**
     * call in to the calculator using the set instance variables
     * @returns {undefined}
     */

  }, {
    key: 'calculateInterval',
    value: function calculateInterval() {
      this.interval = _calculator2.default.interval(this.getPrevious(), this.getUpdated());
    }

    /**
     * update the interval by first passing in the new data, shifting it's spots with the previous updated
     * then calculating the actual interval value
     * @param {WebRTCData} updated
     * @returns {Object} interval the stored interval values post subtraction
     */

  }, {
    key: 'updateInterval',
    value: function updateInterval(updated) {
      this.setPrevious(this.updated);
      this.setUpdated(updated);
      this.calculateInterval();
      return this.get();
    }
  }]);
  return StatsInterval;
}();

exports.default = StatsInterval;
//# sourceMappingURL=interval.js.map
