'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _sparkCore = require('@ciscospark/spark-core');

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _constants = require('../constants');

var _history = require('../stats/history');

var _history2 = _interopRequireDefault(_history);

var _aggregator = require('../stats/aggregator');

var _aggregator2 = _interopRequireDefault(_aggregator);

var _interval = require('../stats/interval');

var _interval2 = _interopRequireDefault(_interval);

var _stream = require('../stats/stream');

var _stream2 = _interopRequireDefault(_stream);

var _filter = require('../stats/filter');

var _filter2 = _interopRequireDefault(_filter);

var _events = require('../stats/events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class MeetingStats
 */
var MeetingStats = function (_StatelessSparkPlugin) {
  (0, _inherits3.default)(MeetingStats, _StatelessSparkPlugin);

  /**
   * @param {Object} attrs
   * @param {Object} options
   * @param {Object} optionalCreateOptions {history: true/false, interval: true/false, aggregator: true/false, stream: RTCPeerConnection, filter: PeerConnection, events: true/false, id: true/false} // if filter is set do not set stream
   */
  function MeetingStats(attrs, options, optionalCreateOptions) {
    (0, _classCallCheck3.default)(this, MeetingStats);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MeetingStats.__proto__ || (0, _getPrototypeOf2.default)(MeetingStats)).call(this, {}, options));

    _this.namespace = _constants.MEETINGS;

    _this.attrs = attrs;
    _this.options = options;
    // usable values
    _this.history = undefined;
    _this.interval = undefined;
    _this.aggregator = undefined;
    _this.stream = undefined;
    _this.filter = undefined;
    _this.events = undefined;
    _this.id = undefined;
    if (optionalCreateOptions && optionalCreateOptions.history) {
      _this.withHistory();
    }
    if (optionalCreateOptions && optionalCreateOptions.interval) {
      _this.withInterval();
    }
    if (optionalCreateOptions && optionalCreateOptions.aggregator) {
      _this.withAggregator();
    }
    if (optionalCreateOptions && optionalCreateOptions.filter && !optionalCreateOptions.stream) {
      _this.withFilter(optionalCreateOptions.filter);
    }
    if (optionalCreateOptions && optionalCreateOptions.stream && !optionalCreateOptions.filter) {
      _this.withStream(optionalCreateOptions.stream);
    }
    if (optionalCreateOptions && optionalCreateOptions.events) {
      _this.withEvents(optionalCreateOptions.events);
    }
    if (optionalCreateOptions && optionalCreateOptions.id) {
      _this.withId();
    }
    return _this;
  }

  /**
   * @param {WebRTCData} data
   * @returns {undefined}
   */


  (0, _createClass3.default)(MeetingStats, [{
    key: 'doHistory',
    value: function doHistory(data) {
      if (this.history) {
        this.history.addHistory(data);
      }
    }

    /**
     * @param {WebRTCData} data
     * @returns {undefined}
     */

  }, {
    key: 'doInterval',
    value: function doInterval(data) {
      if (this.interval) {
        this.interval.updateInterval(data);
      }
    }

    /**
     * @param {WebRTCData} data
     * @returns {undefined}
     */

  }, {
    key: 'doAggregator',
    value: function doAggregator(data) {
      if (this.aggregator) {
        this.aggregator.aggregate(data);
      }
    }

    /**
     * @param {WebRTCData} data
     * @returns {undefined}
     */

  }, {
    key: 'doEvents',
    value: function doEvents(data) {
      if (this.events) {
        this.events.event(data);
      }
    }

    /**
     * does all the work for the built properties
     * calls back a function with data from piped stream filter
     * @param {Function} cbFn
     * @returns {undefined}
     * @throws {Error} if the filter stream does not exist
     */

  }, {
    key: 'onData',
    value: function onData(cbFn) {
      var _this2 = this;

      if (!this.filter) {
        throw new Error('The stats peer connection filter must be set up before data can be worked upon.');
      }
      this.filter.on('data', function (filtered) {
        _this2.doHistory(filtered);
        _this2.doInterval(filtered);
        _this2.doAggregator(filtered);
        _this2.doEvents(filtered);
        if (cbFn) {
          cbFn(filtered);
        }
      });
    }

    /**
     * constructs an event object on this instance
     * @param {String} id - the event payloads will all be sent with this id
     * @returns {MeetingStats}
     */

  }, {
    key: 'withEvents',
    value: function withEvents() {
      var events = new _events2.default(this.attrs, this.options);
      this.setEvents(events);
      return this;
    }

    /**
     * constructs a history object on this instance
     * @returns {MeetingStats}
     */

  }, {
    key: 'withHistory',
    value: function withHistory() {
      var history = new _history2.default();
      this.setHistory(history);
      return this;
    }

    /**
     * constructs a aggregator object on this instance
     * @returns {MeetingStats}
     */

  }, {
    key: 'withAggregator',
    value: function withAggregator() {
      var aggregator = new _aggregator2.default();
      this.setAggregator(aggregator);
      return this;
    }

    /**
     * constructs a interval object on this instance
     * @returns {MeetingStats}
     */

  }, {
    key: 'withInterval',
    value: function withInterval() {
      var interval = new _interval2.default();
      this.setInterval(interval);
      return this;
    }

    /**
     * constructs a stream object on this instance
     * @param {RTCPeerConnection} peerConnection
     * @returns {MeetingStats}
     */

  }, {
    key: 'withStream',
    value: function withStream(peerConnection) {
      var stream = new _stream2.default(peerConnection);
      this.setStream(stream);
      return this;
    }

    /**
     * constructs a stream object on this instance
     * adds a filter on that stream, and pipes the stream into the filter
     * @param {RTCPeerConnection} peerConnection
     * @returns {MeetingStats}
     */

  }, {
    key: 'withFilter',
    value: function withFilter(peerConnection) {
      var stream = new _stream2.default(peerConnection);
      this.setStream(stream);
      var filter = new _filter2.default();
      this.setFilter(filter);
      stream.pipe(filter);
      return this;
    }

    /**
     * constructs an id to match this stats object
     * takes params as precedence
     * @param {String} id
     * @returns {MeetingStats}
     */

  }, {
    key: 'withId',
    value: function withId(id) {
      if (id) {
        this.setId(id);
        return this;
      }
      var guid = _uuid2.default.v4();
      this.setId(guid);
      return this;
    }

    /**
     * @returns {MeetingStats}
     */

  }, {
    key: 'build',
    value: function build() {
      return this;
    }

    /**
     * @param {String} id
     * @returns {undefined}
     */

  }, {
    key: 'setId',
    value: function setId(id) {
      this.id = id;
    }

    /**
     * @param {StatsHistory} history
     * @returns {undefined}
     */

  }, {
    key: 'setHistory',
    value: function setHistory(history) {
      this.history = history;
    }

    /**
     * @param {StatsInterval} interval
     * @returns {undefined}
     */

  }, {
    key: 'setInterval',
    value: function setInterval(interval) {
      this.interval = interval;
    }

    /**
     * @param {StatsAggregator} aggregator
     * @returns {undefined}
     */

  }, {
    key: 'setAggregator',
    value: function setAggregator(aggregator) {
      this.aggregator = aggregator;
    }

    /**
     * @param {StatsEvent} events
     * @returns {undefined}
     */

  }, {
    key: 'setEvents',
    value: function setEvents(events) {
      this.events = events;
    }

    /**
     * @param {Readable} stream
     * @returns {undefined}
     */

  }, {
    key: 'setStream',
    value: function setStream(stream) {
      this.stream = stream;
    }

    /**
     * @param {Transform} filter
     * @returns {undefined}
     */

  }, {
    key: 'setFilter',
    value: function setFilter(filter) {
      this.filter = filter;
    }

    /**
     * @returns {String}
     */

  }, {
    key: 'getId',
    value: function getId() {
      return this.id;
    }

    /**
     * @returns {StatsHistory}
     */

  }, {
    key: 'getHistory',
    value: function getHistory() {
      return this.history;
    }

    /**
     * @returns {StatsInterval}
     */

  }, {
    key: 'getInterval',
    value: function getInterval() {
      return this.interval;
    }

    /**
     * @returns {StatsAggregator}
     */

  }, {
    key: 'getAggregator',
    value: function getAggregator() {
      return this.aggregator;
    }

    /**
     * @returns {StatsEvents}
     */

  }, {
    key: 'getEvents',
    value: function getEvents() {
      return this.events;
    }

    /**
     * @returns {Readable}
     */

  }, {
    key: 'getStream',
    value: function getStream() {
      return this.stream;
    }

    /**
     * @returns {Transform}
     */

  }, {
    key: 'getFilter',
    value: function getFilter() {
      return this.filter;
    }
  }]);
  return MeetingStats;
}(_sparkCore.StatelessSparkPlugin);

exports.default = MeetingStats;
//# sourceMappingURL=stats.js.map
