'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constants = require('../constants');

var MemberUtil = {};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isUser = function (participant) {
  return participant && participant.type === _constants.USER;
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isGuest = function (participant) {
  return participant && participant.guest;
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isDevice = function (participant) {
  return participant && participant.type === _constants.RESOURCE_ROOM;
};

/**
 * checks to see if the participant id is the same as the passed id
 * there are multiple ids that can be used
 * @param {Object} participant the locus participant
 * @param {String} id
 * @returns {Boolean}
 */
MemberUtil.isSame = function (participant, id) {
  return participant && (participant.id === id || participant.person && participant.person.id === id);
};

/**
 * checks to see if the participant id is the same as the passed id for associated devices
 * there are multiple ids that can be used
 * @param {Object} participant the locus participant
 * @param {String} id
 * @returns {Boolean}
 */
MemberUtil.isAssociatedSame = function (participant, id) {
  return participant && participant.associatedUsers && participant.associatedUsers.some(function (user) {
    return user.id === id || user.person && user.person.id === id;
  });
};

/**
 * @param {Object} participant the locus participant
 * @param {Boolean} isGuest
 * @param {String} status
 * @returns {Boolean}
 */
MemberUtil.isNotAdmitted = function (participant, isGuest, status) {
  return participant && participant.guest && participant.devices && participant.devices[0] && participant.devices[0].intent && participant.devices[0].intent.type === _constants.WAIT && isGuest && status === _constants.IN_LOBBY;
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isAudioMuted = function (participant) {
  if (!participant) {
    throw new Error('Audio could not be processed, participant is undefined.');
  }
  var mutedStatus = MemberUtil.isMuted(participant.status, _constants.AUDIO_STATUS);
  if (participant.controls && participant.controls.audio) {
    if (participant.controls.audio.muted) {
      return true;
    }
    if (mutedStatus) {
      return true;
    }
  }
  return false;
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isVideoMuted = function (participant) {
  if (!participant) {
    throw new Error('Video could not be processed, participant is undefined.');
  }
  return MemberUtil.isMuted(participant.status, _constants.VIDEO_STATUS);
};

/**
 * utility method for audio/video muted status
 * @param {String} status
 * @param {String} accessor
 * @returns {Boolean}
 */
MemberUtil.isMuted = function (status, accessor) {
  if (status) {
    if (status[accessor] === _constants.RECEIVE_ONLY) {
      return true;
    }
    if (status[accessor] === _constants.SEND_RECEIVE) {
      return false;
    }
  }
  return null;
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isRecording = function (participant) {
  if (!participant) {
    throw new Error('Recording could not be processed, participant is undefined.');
  }
  if (participant.controls && participant.controls.localRecord) {
    return participant.controls.localRecord.recording;
  }
  return false;
};

/**
 * @param {Object} participant the locus participant
 * @returns {String}
 */
MemberUtil.extractStatus = function (participant) {
  if (!(participant && participant.devices && participant.devices.length)) {
    return _constants.NOT_IN_MEETING;
  }
  var device = participant && participant.devices ? participant.devices[0] : null;
  if (device) {
    if (device.state === _constants.JOINED && (!device.intent || device.intent.type === _constants.NONE)) {
      return _constants.IN_MEETING;
    }
    if (device.state === _constants.IDLE && device.intent && (device.intent.type === _constants.WAIT || device.intent.type === _constants.OBSERVE)) {
      return _constants.IN_LOBBY;
    }
    if (device.state === _constants.LEFT || device.state === _constants.IDLE && (!device.intent || device.intent.type === _constants.NONE)) {
      return _constants.NOT_IN_MEETING;
    }
  }
  return _constants.NOT_IN_MEETING;
};

/**
 * @param {Object} participant the locus participant
 * @returns {String}
 */
MemberUtil.extractId = function (participant) {
  if (participant) {
    return participant.id;
  }
  return null;
};

/**
 * @param {Object} participant the locus participant
 * @returns {String}
 */
MemberUtil.extractName = function (participant) {
  if (participant && participant.person) {
    return participant.person.name;
  }
  return null;
};

exports.default = MemberUtil;
//# sourceMappingURL=util.js.map
