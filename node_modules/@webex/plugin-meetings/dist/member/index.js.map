{"version":3,"sources":["index.js"],"names":["Member","participant","options","namespace","MEETINGS","id","name","isAudioMuted","isVideoMuted","isSelf","isHost","isGuest","isInLobby","isInMeeting","isNotAdmitted","isContentSharing","status","isDevice","isUser","associatedUser","isRecording","processParticipant","processParticipantOptions","MemberUtil","extractId","extractName","processStatus","processIsSelf","selfId","processIsHost","hostId","processIsContentSharing","contentSharingId","extractStatus","IN_LOBBY","IN_MEETING","NOT_IN_MEETING","flag","sharingId","isSame","isAssociatedSame"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\nimport {\n  MEETINGS,\n  IN_LOBBY,\n  NOT_IN_MEETING,\n  IN_MEETING\n} from '../constants';\n\nimport MemberUtil from './util.js';\n\n/**\n * @class Member\n */\nexport default class Member {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} participant - the locus participant\n   * @param {Object} options - optional constructor params\n   * @returns {Member}\n   * @memberof Member\n   */\n  constructor(participant, options = {}) {\n    this.participant = null;\n    this.id = null;\n    this.name = null;\n    this.isAudioMuted = null;\n    this.isVideoMuted = null;\n    this.isSelf = null;\n    this.isHost = null;\n    this.isGuest = null;\n    this.isInLobby = null;\n    this.isInMeeting = null;\n    this.isNotAdmitted = null;\n    this.isContentSharing = null;\n    this.status = null;\n    this.isDevice = null;\n    this.isUser = null;\n    this.associatedUser = null;\n    this.isRecording = null;\n    // TODO: more participant types\n    this.processParticipant(participant);\n    this.processParticipantOptions(participant, options);\n  }\n\n  /**\n   * set all the participant values extracted directly from locus participant\n   * @param {Object} participant the locus participant object\n   * @returns {undefined}\n   * @memberof Member\n   */\n  processParticipant(participant) {\n    this.participant = participant;\n    if (participant) {\n      this.id = MemberUtil.extractId(participant);\n      this.name = MemberUtil.extractName(participant);\n      this.isAudioMuted = MemberUtil.isAudioMuted(participant);\n      this.isVideoMuted = MemberUtil.isVideoMuted(participant);\n      this.isRecording = MemberUtil.isRecording(participant);\n      this.isGuest = MemberUtil.isGuest(participant);\n      this.isUser = MemberUtil.isUser(participant);\n      this.isDevice = MemberUtil.isDevice(participant);\n      this.processStatus(participant);\n      // must be done last\n      this.isNotAdmitted = MemberUtil.isNotAdmitted(participant, this.isGuest, this.status);\n    }\n  }\n\n  /**\n   * Use the members options and participant values to set on the member\n   * @param {Object} participant the locus participant object\n   * @param {Object} options the passed in options, what was set on members\n   * @returns {undefined}\n   * @memberof Member\n   */\n  processParticipantOptions(participant, options) {\n    if (participant && options) {\n      this.processIsSelf(participant, options.selfId);\n      this.processIsHost(participant, options.hostId);\n      this.processIsContentSharing(participant, options.contentSharingId);\n    }\n  }\n\n  /**\n   * set the status on member object\n   * @param {Object} participant the locus participant object\n   * @returns {undefined}\n   * @memberof Member\n   */\n  processStatus(participant) {\n    this.status = MemberUtil.extractStatus(participant);\n    switch (this.status) {\n      case IN_LOBBY:\n        this.isInLobby = true;\n        this.isInMeeting = false;\n        break;\n      case IN_MEETING:\n        this.isInLobby = false;\n        this.isInMeeting = true;\n        break;\n      case NOT_IN_MEETING:\n        this.isInLobby = false;\n        this.isInMeeting = false;\n        break;\n      default:\n        this.isInLobby = false;\n        this.isInMeeting = false;\n    }\n  }\n\n  /**\n   * set the isContentSharing on member\n   * @param {Boolean} flag\n   * @returns {undefined}\n   * @memberof Member\n   */\n  setIsContentSharing(flag) {\n    this.isContentSharing = flag;\n  }\n\n  /**\n   * set the isHost on member\n   * @param {Boolean} flag\n   * @returns {undefined}\n   * @memberof Member\n   */\n  setIsHost(flag) {\n    this.isHost = flag;\n  }\n\n  /**\n   * set the isSelf on member\n   * @param {Boolean} flag\n   * @returns {undefined}\n   * @memberof Member\n   */\n  setIsSelf(flag) {\n    this.isSelf = flag;\n  }\n\n  /**\n   * determine if this member is content sharing\n   * @param {Object} participant\n   * @param {String} sharingId\n   * @returns {undefined}\n   * @memberof Member\n   */\n  processIsContentSharing(participant, sharingId) {\n    if (MemberUtil.isUser(participant)) {\n      this.isContentSharing = MemberUtil.isSame(participant, sharingId);\n    }\n    else if (MemberUtil.isDevice(participant)) {\n      this.isContentSharing = MemberUtil.isAssociatedSame(participant, sharingId);\n    }\n  }\n\n  /**\n   * determine if this member is the self\n   * @param {Object} participant\n   * @param {String} selfId\n   * @returns {undefined}\n   * @memberof Member\n   */\n  processIsSelf(participant, selfId) {\n    if (MemberUtil.isUser(participant)) {\n      this.isSelf = MemberUtil.isSame(participant, selfId);\n    }\n    else if (MemberUtil.isDevice(participant)) {\n      this.isSelf = MemberUtil.isAssociatedSame(participant, selfId);\n      this.associatedUser = selfId;\n    }\n  }\n\n  /**\n   * determine if this member is the host\n   * @param {Object} participant\n   * @param {String} hostId\n   * @returns {undefined}\n   * @memberof Member\n   */\n  processIsHost(participant, hostId) {\n    if (MemberUtil.isUser(participant)) {\n      this.isHost = MemberUtil.isSame(participant, hostId);\n    }\n    else if (MemberUtil.isDevice(participant)) {\n      this.isHost = MemberUtil.isAssociatedSame(participant, hostId);\n    }\n  }\n}\n"]}