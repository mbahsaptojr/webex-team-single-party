{"version":3,"sources":["index.js"],"names":["Members","attrs","options","namespace","MEETINGS","membersRequest","MembersRequest","membersCollection","MembersCollection","locusUrl","hostId","selfId","mediaShareContentId","setUpLocusInfoListeners","setUpLocusUrlListener","setUpLocusHostListener","setUpLocusSelfListener","setUpLocusParticipantsListener","setUpLocusMediaSharesListener","Events","on","EVENTS","LOCUS_INFO_UPDATE_SELF","payload","newSelfId","oldSelfId","newSelf","id","oldSelf","theSelf","get","setIsSelf","notSelf","trigger","EVENT_TRIGGERS","MEMBERS_SELF_UPDATE","activeSelfId","endedSelfId","LOCUS_INFO_UPDATE_HOST","newHostId","oldHostId","newHost","oldHost","theHost","setIsHost","notHost","MEMBERS_HOST_UPDATE","activeHostId","endedHostId","LOCUS_INFO_UPDATE_PARTICIPANTS","handleParticipantsPayload","delta","handleLocusInfoUpdatedParticipants","full","handleMembersUpdate","MEMBERS_UPDATE","membersUpdate","updated","constructMembers","added","getAll","list","forEach","member","set","LOCUS_INFO_UPDATE_MEDIA_SHARES","currentContent","current","whoSharing","whoStopped","contentId","disposition","FLOOR_ACTION","GRANTED","RELEASED","shareMember","setIsContentSharing","stopMember","MEMBERS_CONTENT_UPDATE","activeContentSharingId","endedContentSharingId","LOCUS_INFO_UPDATE_URL","setLocusUrl","participants","Error","memberUpdate","update","locus","url","owner","info","self","person","mediaShares","length","name","CONTENT","floor","beneficiary","participant","hideInRoster","existing","push","Member","contentSharingId","invitee","alertIfActive","emailAddress","email","reject","MembersUtil","generateAddMemberOptions","addMember","then","res","catch","error","memberIds","generateAdmitMemberOptions","admitMember","StatelessSparkPlugin"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.\n */\nimport {isEmpty} from 'lodash';\nimport {StatelessSparkPlugin} from '@ciscospark/spark-core';\n\nimport Events from '../events';\nimport {MEETINGS, EVENT_TRIGGERS, EVENTS, FLOOR_ACTION, CONTENT} from '../constants';\nimport Member from '../member';\n\nimport MembersCollection from './collection';\nimport MembersRequest from './request';\nimport MembersUtil from './util';\n\n/**\n * @class Members\n */\nexport default class Members extends StatelessSparkPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   * @memberof Members\n   */\n  constructor(attrs, options) {\n    super({}, options);\n    this.membersRequest = new MembersRequest({}, options);\n    this.membersCollection = new MembersCollection();\n    this.locusUrl = null;\n    this.hostId = null;\n    // locus has a self object, sent individually to the client\n    // i.e., each person in the call gets their own self object from locus\n    // we need to maintain that self object, because we also get information about all the participants\n    // and differentiate those participants from self\n    // the self id shouldnt ever change, but it does have properties in that will change\n    // and we use values in locus-info, such as to determine if i am admitted to the meeting or not as guest\n    this.selfId = null;\n    this.mediaShareContentId = null;\n    this.setUpLocusInfoListeners();\n  }\n\n  /**\n   * set up all the listeners used for locus info\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setUpLocusInfoListeners() {\n    this.setUpLocusUrlListener();\n    this.setUpLocusHostListener();\n    this.setUpLocusSelfListener();\n    this.setUpLocusParticipantsListener();\n    this.setUpLocusMediaSharesListener();\n  }\n\n  /**\n   * set up the locus info self listener\n   * update self value for members and updates the member\n   * notifies consumer with members:self:update {activeSelfId endedSelfId}\n   * @returns {undefined}\n   * @event {members:self:update}\n   * @memberof Members\n   */\n  setUpLocusSelfListener() {\n    Events.on(EVENTS.LOCUS_INFO_UPDATE_SELF, (payload) => {\n      let newSelfId = null;\n      let oldSelfId = null;\n      if (payload) {\n        if (payload.newSelf) {\n          newSelfId = payload.newSelf.id;\n        }\n        if (payload.oldSelf) {\n          oldSelfId = payload.oldSelf.id;\n        }\n      }\n      if (newSelfId) {\n        const theSelf = this.membersCollection.get(newSelfId);\n        if (theSelf) {\n          theSelf.setIsSelf(true);\n        }\n      }\n      if (oldSelfId) {\n        const notSelf = this.membersCollection.get(oldSelfId);\n        if (notSelf) {\n          notSelf.setIsSelf(false);\n        }\n      }\n      this.selfId = newSelfId;\n      this.trigger(EVENT_TRIGGERS.MEMBERS_SELF_UPDATE, {\n        activeSelfId: newSelfId,\n        endedSelfId: oldSelfId\n      });\n    });\n  }\n\n  /**\n   * set up the locus info host listener\n   * update host value for members and updates the member\n   * notifies consumer with members:host:update: {activeHostId, endedHostId}\n   * @returns {undefined}\n   * @event {members:host:update}\n   * @memberof Members\n   */\n  setUpLocusHostListener() {\n    Events.on(EVENTS.LOCUS_INFO_UPDATE_HOST, (payload) => {\n      let newHostId = null;\n      let oldHostId = null;\n      if (payload) {\n        if (payload.newHost) {\n          newHostId = payload.newHost.id;\n        }\n        if (payload.oldHost) {\n          oldHostId = payload.oldHost.id;\n        }\n      }\n      if (newHostId) {\n        const theHost = this.membersCollection.get(newHostId);\n        if (theHost) {\n          theHost.setIsHost(true);\n        }\n      }\n      if (oldHostId) {\n        const notHost = this.membersCollection.get(oldHostId);\n        if (notHost) {\n          notHost.setIsHost(false);\n        }\n      }\n      this.hostId = newHostId;\n      this.trigger(EVENT_TRIGGERS.MEMBERS_HOST_UPDATE, {\n        activeHostId: newHostId,\n        endedHostId: oldHostId\n      });\n    });\n  }\n\n  /**\n   * set up the locus info participants update listener\n   * update members collection value for members\n   * notifies consumer with members:update\n   * @returns {undefined}\n   * @event {members:update}\n   * @memberof Members\n   */\n  setUpLocusParticipantsListener() {\n    Events.on(EVENTS.LOCUS_INFO_UPDATE_PARTICIPANTS, (payload) => {\n      this.handleParticipantsPayload(payload);\n    });\n  }\n\n  /**\n   * when new participant updates come in, both delta and full participants, update them in members collection\n   * delta object in the event will have {updated, added} and full will be the full membersCollection\n   * @param {Object} payload\n   * @event members:update {delta, full}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  handleParticipantsPayload(payload) {\n    if (payload) {\n      const delta = this.handleLocusInfoUpdatedParticipants(payload);\n      const full = this.handleMembersUpdate(delta); // SDK should propagate the full list for both delta and non delta updates\n      this.trigger(EVENT_TRIGGERS.MEMBERS_UPDATE, {delta, full});\n    }\n  }\n\n  /**\n   * sets values in the members collection for updated and added properties from delta\n   * @param {Object} membersUpdate {updated: [], added: []}\n   * @returns {Object} membersCollection\n   * @memberof Members\n   */\n  handleMembersUpdate(membersUpdate) {\n    if (membersUpdate) {\n      if (membersUpdate.updated) {\n        this.constructMembers(membersUpdate.updated);\n      }\n      if (membersUpdate.added) {\n        this.constructMembers(membersUpdate.added);\n      }\n    }\n    return this.membersCollection.getAll();\n  }\n\n  /**\n   * set members to the member collection from each updated/added lists as passed in\n   * @param {Array} list\n   * @returns {undefined}\n   * @memberof Members\n   */\n  constructMembers(list) {\n    list.forEach((member) => {\n      this.membersCollection.set(member.id, member);\n    });\n  }\n\n  /**\n   * set up the locus info media shares listener\n   * update content sharing id value for members, and updates the member\n   * notifies consumer with members:content:update {activeContentSharingId, endedContentSharingId}\n   * @returns {undefined}\n   * @event {members:content:update}\n   * @memberof Members\n   */\n  setUpLocusMediaSharesListener() {\n    Events.on(EVENTS.LOCUS_INFO_UPDATE_MEDIA_SHARES, (payload) => {\n      const currentContent = payload.current;\n      let whoSharing = null;\n      let whoStopped = null;\n      if (currentContent && currentContent.contentId) {\n        if (currentContent.disposition === FLOOR_ACTION.GRANTED) {\n          whoSharing = currentContent.contentId;\n        }\n        else if (currentContent.disposition === FLOOR_ACTION.RELEASED) {\n          whoStopped = currentContent.contentId;\n        }\n      }\n      if (whoSharing) {\n        const shareMember = this.membersCollection.get(whoSharing);\n        if (shareMember) {\n          shareMember.setIsContentSharing(true);\n        }\n      }\n      if (whoStopped) {\n        const stopMember = this.membersCollection.get(whoStopped);\n        if (stopMember) {\n          stopMember.setIsContentSharing(false);\n        }\n      }\n      this.mediaShareContentId = whoSharing;\n      this.trigger(EVENT_TRIGGERS.MEMBERS_CONTENT_UPDATE, {\n        activeContentSharingId: whoSharing,\n        endedContentSharingId: whoStopped\n      });\n    });\n  }\n\n  /**\n   * set up the locus info self listener\n   * update locus_url value for members\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setUpLocusUrlListener() {\n    Events.on(EVENTS.LOCUS_INFO_UPDATE_URL, (payload) => {\n      if (payload) {\n        this.setLocusUrl(null, payload);\n      }\n    });\n  }\n\n  /**\n   * @param {Object} payload\n   * @returns {Object}\n   * @memberof Members\n   */\n  handleLocusInfoUpdatedParticipants(payload) {\n    this.hostId = payload.hostId || this.hostId;\n    this.selfId = payload.selfId || this.selfId;\n    if (!payload.participants) {\n      throw new Error('Members update could not occur, participants payload was not present.');\n    }\n    const memberUpdate = this.update(payload.participants);\n    return memberUpdate;\n  }\n\n  /**\n   * update the locus Url\n   * @param {Object} locus\n   * @param {String} locusUrl optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setLocusUrl(locus, locusUrl = null) {\n    if (locusUrl) {\n      this.locusUrl = locusUrl;\n    }\n    else if (locus && (locus.locusUrl || locus.url)) {\n      this.locusUrl = locus.locusUrl || locus.url;\n    }\n    else {\n      throw new Error('Setting locusUrl for the Members module should be done with a locus object or locusUrl');\n    }\n  }\n\n  /**\n   * update the locus Url\n   * @param {Object} locus\n   * @param {String} hostId optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setHostId(locus, hostId = null) {\n    if (hostId) {\n      this.hostId = hostId;\n    }\n    else if (locus) {\n      this.hostId = locus && locus.owner && locus.owner.info ? locus.owner.info : null;\n    }\n    else {\n      throw new Error('Setting hostid for the Members module should be done with a locus object or hostId');\n    }\n  }\n\n  /**\n   * update the locus Url\n   * @param {Object} locus\n   * @param {String} selfId optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setSelfId(locus, selfId = null) {\n    if (selfId) {\n      this.selfId = selfId;\n    }\n    else if (locus) {\n      this.selfId = locus && locus.self && locus.self.person && locus.self.person.id ? locus.self.person.id : null;\n    }\n    else {\n      throw new Error('Setting selfid for the Members module should be done with a locus object or selfId');\n    }\n  }\n\n  /**\n   * update the locus Url\n   * @param {Object} locus\n   * @param {String} contentId optional, takes precedence\n   * @throws {Error}\n   * @returns {undefined}\n   * @memberof Members\n   */\n  setMediaShareContentId(locus, contentId) {\n    if (contentId) {\n      this.mediaShareContentId = contentId;\n    }\n    else if (locus) {\n      this.mediaShareContentId = locus\n      && locus.mediaShares && locus.mediaShares.length && locus.mediaShares[0] && locus.mediaShares[0].name === CONTENT\n      && locus.mediaShares[0].floor && locus.mediaShares[0].floor.beneficiary ? locus.mediaShares[0].floor.beneficiary.id\n        : null;\n    }\n    else {\n      throw new Error('Setting hostid for the Members module should be done with a locus object or hostId');\n    }\n  }\n\n  /**\n   * find all the updates, and added members\n   * removed/left members will end up in updates\n   * each array contains only members\n   * @param {Array} participants the locus participants\n   * @returns {Object} {added: {Array}, updated: {Array}}\n   * @memberof Members\n   */\n  update(participants) {\n    const membersUpdate = {added: [], updated: []};\n    if (participants) {\n      participants.forEach((participant) => {\n        if (participant.hideInRoster) {\n          return;\n        }\n        const existing = this.membersCollection.get(participant.id);\n        if (existing) {\n          // TODO: compare existing member to new participant coming in properties and determine if updated (this helps for non delta events)\n          // on client re renders, but we will have to determine what values to compare to determine difference, premature optimization\n          membersUpdate.updated.push(new Member(participant, {selfId: this.selfId, hostId: this.hostId, contentSharingId: this.mediaShareContentId}));\n        }\n        else {\n          membersUpdate.added.push(new Member(participant, {selfId: this.selfId, hostId: this.hostId, contentSharingId: this.mediaShareContentId}));\n        }\n      });\n    }\n    return membersUpdate;\n  }\n\n  /**\n   * adds a guest Member to the associated meeting\n   * @param {String} invitee\n   * @param {Boolean} alertIfActive optional parameter\n   * @returns {Promise}\n   * @memberof Members\n   */\n  addMember(invitee, alertIfActive) {\n    if (!(!invitee || (!invitee.emailAddress || !invitee.email) || !this.locusUrl)) {\n      return Promise.reject(new Error('invitee must be passed and the associated locus url for this meeting object must be defined.'));\n    }\n    const options = MembersUtil.generateAddMemberOptions(invitee, this.locusUrl, alertIfActive);\n    return this.membersRequest.addMember(options).then((res) => res).catch((error) => error);\n  }\n\n  /**\n   * admits waiting members (invited guests to meeting)\n   * @param {Array} memberIds\n   * @returns {Promise}\n   * @memberof Members\n   */\n  admitMembers(memberIds) {\n    if (isEmpty(memberIds)) {\n      return Promise.reject(new Error('No member ids provided to admit.'));\n    }\n    const options = MembersUtil.generateAdmitMemberOptions(memberIds, this.locusUrl);\n    return this.membersRequest.admitMember(options).then((res) => res).catch((error) => error);\n  }\n}\n"]}