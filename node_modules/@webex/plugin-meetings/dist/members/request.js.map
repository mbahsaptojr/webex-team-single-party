{"version":3,"sources":["request.js"],"names":["MembersRequest","namespace","MEETINGS","options","invitee","emailAddress","email","locusUrl","Error","requestParams","MembersUtil","getAddMemberRequestParams","request","participantIds","getAdmitMemberRequestParams","StatelessSparkPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;;;;;AACA;;;IAGqBA,c;;;;;;;;;;;;;;4NACnBC,S,GAAYC,mB;;;;;;;AAEZ;;;;;;;+BAOWC,O,EAAS;AAClB,UAAI,EAAE,CAACA,OAAD,IAAY,CAACA,QAAQC,OAArB,IAAiC,CAACD,QAAQC,OAAR,CAAgBC,YAAjB,IAAiC,CAACF,QAAQC,OAAR,CAAgBE,KAAnF,IAA6F,CAACH,QAAQI,QAAxG,CAAJ,EAAuH;AACrH,cAAM,IAAIC,KAAJ,CAAU,8FAAV,CAAN;AACD;AACD,UAAMC,gBAAgBC,eAAYC,yBAAZ,CAAsCR,OAAtC,CAAtB;AACA,aAAO,KAAKS,OAAL,CAAaH,aAAb,CAAP;AACD;;AAED;;;;;;;;;;gCAOYN,O,EAAS;AACnB,UAAI,CAACA,OAAD,IAAY,CAACA,QAAQI,QAArB,IAAiC,CAACJ,QAAQU,cAA9C,EAA8D;AAC5D,cAAM,IAAIL,KAAJ,CAAU,yGAAV,CAAN;AACD;AACD,UAAMC,gBAAgBC,eAAYI,2BAAZ,CAAwCX,OAAxC,CAAtB;AACA,aAAO,KAAKS,OAAL,CAAaH,aAAb,CAAP;AACD;;;EA/ByCM,+B;;kBAAvBf,c","file":"request.js","sourcesContent":["import {StatelessSparkPlugin} from '@ciscospark/spark-core';\n\nimport {MEETINGS} from '../constants';\n\nimport MembersUtil from './util';\n/**\n * @class MembersRequest\n */\nexport default class MembersRequest extends StatelessSparkPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} options with format of {invitee: string, locusUrl: string}\n   * @returns {Promise}\n   * @throws {Error} if the options are not valid and complete, must have invitee with emailAddress OR email AND locusUrl\n   * @memberof MembersRequest\n   */\n  addMembers(options) {\n    if (!(!options || !options.invitee || (!options.invitee.emailAddress || !options.invitee.email) || !options.locusUrl)) {\n      throw new Error('invitee must be passed and the associated locus url for this meeting object must be defined.');\n    }\n    const requestParams = MembersUtil.getAddMemberRequestParams(options);\n    return this.request(requestParams);\n  }\n\n  /**\n   *\n   * @param {Object} options\n   * @returns {Promise}\n   * @throws {Error} if the options are not valid and complete, must have memberIds AND locusUrl\n   * @memberof MembersRequest\n   */\n  admitMember(options) {\n    if (!options || !options.locusUrl || !options.participantIds) {\n      throw new Error('memberIds must be an array passed and the associated locus url for this meeting object must be defined.');\n    }\n    const requestParams = MembersUtil.getAdmitMemberRequestParams(options);\n    return this.request(requestParams);\n  }\n}\n"]}