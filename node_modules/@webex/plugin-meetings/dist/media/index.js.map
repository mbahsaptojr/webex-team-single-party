{"version":3,"sources":["index.js"],"names":["Media","setLocalTracks","audio","video","stream","setLocalAudioTracks","setLocalVideoTracks","getAudioTracks","audioTrack","enabled","mute","getVideoTracks","videoTrack","generateLocalMedias","mediaId","localSdp","audioMuted","videoMuted","getLocalMedia","options","sendAudio","sendVideo","sendShare","getMedia","getDisplayMedia","resolve","undefined","attachMedia","mediaDirection","pcManager","audioVideo","localShare","mappedPCs","promises","receiveVideo","receiveAudio","push","createOffer","streams","peerConnection","mediaPeerConnection","receiveShare","sharePeerConnection","all","navigator","mediaDevices","sendScreen","mediaConfig","reject","getUserMedia","then","catch","err","Error","name","localMediaFailed","cameraFailed","permissionDenied","getSupportedDevice","enumerateDevices","devices","supported","filter","device","kind","AUDIO_INPUT","length","VIDEO_INPUT","toggleStream","stopStream","getTracks","forEach","track","stop","mediaSetting","localStream","shareStream"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2018 Cisco Systems, Inc. See LICENSE file.\n */\n/* globals navigator */\n\n/* eslint-disable no-logger */\nimport {AUDIO_INPUT, VIDEO_INPUT} from '../constants';\n/**\n *\n * @export\n * Mimic browser APIs as \"the ultimate browser\".\n * Handles the quirks of each browser.\n * Extends and enhances adapter.js, i.e., the \"media\" file from the web client.\n */\nconst Media = {};\n\nMedia.setLocalTracks = (audio, video, stream) => {\n  Media.setLocalAudioTracks(audio, stream);\n  Media.setLocalVideoTracks(video, stream);\n};\n\nMedia.setLocalAudioTracks = (audio, stream) => {\n  if (stream) {\n    if (stream.getAudioTracks) {\n      const [audioTrack] = stream.getAudioTracks();\n      if (audioTrack) {\n        audioTrack.enabled = !audio.mute;\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nMedia.setLocalVideoTracks = (video, stream) => {\n  if (stream) {\n    if (stream.getVideoTracks) {\n      const [videoTrack] = stream.getVideoTracks();\n      if (videoTrack) {\n        videoTrack.enabled = !video.mute;\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nMedia.generateLocalMedias = (mediaId, audio, video) => {\n  if (mediaId) {\n    return [\n      {\n        localSdp: JSON.stringify({\n          audioMuted: audio.mute,\n          videoMuted: video.mute\n        }),\n        mediaId\n      }\n    ];\n  }\n  return [];\n};\n\nMedia.getLocalMedia = (options) => {\n  const {sendAudio, sendVideo, sendShare} = options;\n  // we return undefined here as the second param until screen share is implemented\n\n  if (sendAudio || sendVideo) {\n    return Media.getMedia(sendAudio, sendVideo);\n  }\n\n  if (sendShare) {\n    return Media.getDisplayMedia(\n      {\n        sendAudio: false,\n        sendShare: true\n      }\n    );\n  }\n\n  return Promise.resolve(undefined);\n};\n/**\n * creates peerconnection and attaches streams\n * @param {object} mediaDirection mediaDirection\n * @param {Object} pcManager peerConnectionManager instance\n * @param {Object} audioVideo audioVideo streams\n * @param {Object} localShare sendScreen: {Boolean} sendShare constraints\n * @param {Object} mappedPCs {mediaPeerConnection, sharePeerConnection}\n * @returns {Array} [mediaPeerConnection, sharePeerConnection ]\n */\nMedia.attachMedia = (mediaDirection, pcManager, audioVideo, localShare, mappedPCs = {}) => {\n  const promises = [];\n  // Create a peer\n  if (mediaDirection.receiveVideo || mediaDirection.receiveAudio\n  || audioVideo) {\n    promises.push(\n      pcManager.createOffer({\n        receiveAudio: mediaDirection.receiveAudio,\n        receiveVideo: mediaDirection.receiveVideo,\n        // After you get the localStream\n        streams: audioVideo,\n        peerConnection: mappedPCs.mediaPeerConnection\n      })\n    );\n  }\n  else {\n    promises.push(undefined);\n  }\n\n  if (mediaDirection.receiveShare || localShare) {\n    promises.push(\n      pcManager.createOffer({\n        // its for screen sharing but can change in future when user wants just share with audio\n        receiveAudio: false,\n        receiveVideo: mediaDirection.receiveShare,\n        // After you get the localStream\n        streams: localShare,\n        peerConnection: mappedPCs.sharePeerConnection\n      })\n    );\n  }\n  return Promise.all(promises);\n};\n/**\n * generates share streams (chrome)\n * @param {object} options parameter\n * @param {Object} options.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} options.sendScreen sendScreen: {Boolean} sendShare constraints\n * @returns {Object} {streams}\n */\nMedia.getDisplayMedia = (options) =>\n  navigator.mediaDevices.getDisplayMedia({audio: options.sendAudio, video: options.sendScreen});\n\n/**\n * generates audio and video using constraints (often called after getSupportedDevices)\n * @param {Object} audio audio: {Boolean} gum constraints\n * @param {Object} video video: {Boolean} gum constraints\n * @returns {Object} {streams}\n */\nMedia.getMedia = (audio, video) => {\n  const mediaConfig = {\n    audio,\n    video\n  };\n\n  return new Promise((resolve, reject) => {\n    navigator.mediaDevices\n      .getUserMedia(mediaConfig)\n      .then((stream) => {\n        resolve(stream);\n      })\n      .catch((err) => {\n        reject(\n          new Error({\n            name: err.name,\n            localMediaFailed: true,\n            cameraFailed: err === mediaConfig.permissionDenied\n          })\n        );\n      });\n  });\n};\n\n/**\n * Checks if the machine has at least one audio or video device (Dont use this for screen share)\n * @param {object} options optional parameter\n * {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n * }\n * @returns {Object} {\n *    sendAudio: true/false,\n *    sendVideo: true/false\n *}\n */\nMedia.getSupportedDevice = ({sendAudio, sendVideo}) =>\n  Promise.resolve().then(() => {\n    if (!navigator.mediaDevices || navigator.mediaDevices.enumerateDevices === undefined) {\n      return {\n        sendAudio: true,\n        sendVideo: true\n      };\n    }\n\n    return navigator.mediaDevices.enumerateDevices().then((devices) => {\n      const supported = {\n        audio: devices.filter((device) => device.kind === AUDIO_INPUT).length > 0,\n        video: devices.filter((device) => device.kind === VIDEO_INPUT).length > 0\n      };\n      return {\n        sendAudio: (supported.audio && sendAudio) || true,\n        sendVideo: (supported.video && sendVideo) || true\n      };\n    });\n  });\n\n/**\n *\n * Toggle a specific stream\n * @returns {null}\n */\nMedia.toggleStream = () => {};\n\n/**\n *\n * Stop input stream\n * @param {Stream} stream A media stream\n * @returns {null}\n * @memberof Media\n */\nMedia.stopStream = (stream) => {\n  if (!stream) {\n    return Promise.resolve();\n  }\n  /*\n   * To release local media\n   * 1) Chrome requires all tracks to be stopped (stream.stop got deprecated)\n   * 2) Firefox requires the stream to be stopped\n   */\n  return Promise.resolve().then(() => {\n    if (stream.getTracks) {\n      stream.getTracks().forEach((track) => {\n        track.stop();\n      });\n    }\n    else if (stream.stop) {\n      stream.stop();\n    }\n  });\n};\n\n/**\n * generates streams for audio video and share\n * @param {object} mediaSetting parameter\n * @param {Object} mediaSetting.sendAudio sendAudio: {Boolean} sendAudio constraints\n * @param {Object} mediaSetting.sendVideo sendVideo: {Boolean} sendVideo constraints\n * @param {Object} mediaSetting.sendScreen sendScreen: {Boolean} sendShare constraints\n * @returns {Array} [localStream, shareStream]\n */\nMedia.getUserMedia = (mediaSetting) => Media.getLocalMedia({\n  sendAudio: mediaSetting.sendAudio,\n  sendVideo: mediaSetting.sendVideo\n})\n  .then((localStream) => Media.getLocalMedia({\n    sendShare: mediaSetting.sendShare\n  }).then((shareStream) => [localStream, shareStream]));\n\n\nexport default Media;\n"]}