import uuid from 'uuid';
import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import Events from '../events';
import Roap from '../roap/index';
import Media from '../media';
import MediaProperties from '../media/properties';
import MeetingStateMachine from '../meeting/state';
import AudioStateMachine from '../meeting/audio';
import VideoStateMachine from '../meeting/video';
import LocusInfo from '../locus-info';
import PeerConnectionManager from '../peer-connection-manager';
import ReconnectionManager from '../reconnection-manager';
import MeetingRequest from '../meeting/request';
import Members from '../members/index';
import MeetingUtil from '../meeting/util';
import WebRTCStats from '../stats/index';
import IntentToJoinError from '../errors/intent-to-join';
import JoinMeetingError from '../errors/join-meeting';
import ReconnectionError from '../errors/reconnection';
import {MEETINGS, EVENT_TRIGGERS, EVENT_TYPES, EVENTS, FLOOR_ACTION, BUSY, INCOMING, STOP, ONLINE, ONE_ON_ONE, CONTENT} from '../constants';

/**
  * Media Ready Event
  * Emitted when a stream is ready to be rendered
  * @event media:ready
  * @instance
  * @type {Object}
  * @property {MediaStream} stream the media stream
  * @property {String} type what type of stream, remote, local
  * @memberof Meetings
  */

/**
  * Media Stopped Event
  * Emitted when a stream has stopped sending
  * @event media:stopped
  * @instance
  * @type {Object}
  * @property {String} type what type of stream, remote, local
  * @memberof Meetings
  */

/**
  * Reconnection Success Event
  * Emitted when reconnection of media to the active meeting was successful
  * @event meeting:reconnectionSuccess
  * @instance
  * @type {Object}
  * @property {Object} reconnect
  * @memberof Meetings
  */

/**
  * Reconnection Failure Event
  * Emitted when reconnection of media to the active meeting was successful
  * @event meeting:reconnectionFailure
  * @instance
  * @type {Object}
  * @property {Error} error
  * @memberof Meetings
  */

/**
  * Ringing Event
  * Emitted when a ring should occur or stop, outgoing or incoming
  * @event meeting:reconnectionFailure
  * @instance
  * @type {Object}
  * @property {String} type indicating if it's out or in
  * @property {Boolean} ringing if it should ring or not
  * @memberof Meetings
  */

/**
 * @class Meeting
 */
export default class Meeting extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   * Create an instance of Meeting
   *
   * @param {Object} attrs
   * @param {Object} options
   * @constructor
   * @memberof Meeting
   */
  constructor(attrs, options) {
    super({}, options);
    /**
     * @instance
     * @type {Object}
     * @readonly
     * @private
     * @memberof Meeting
     */
    this.attrs = attrs;
    /**
     * @instance
     * @type {Object}
     * @readonly
     * @private
     * @memberof Meeting
     */
    this.options = options;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.id = uuid.v4();
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.userId = attrs.userId;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.resource = attrs.resource;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.deviceUrl = attrs.deviceUrl;
    /**
     * @instance
     * @type {Number}
     * @readonly
     * @private
     * @memberof Meeting
     */
    this.roapSeq = 0;
    /**
     * @instance
     * @type {Object}
     * @readonly
     * @public
     * @todo needs to be defined as a class
     * @memberof Meeting
     */
    this.meetingInfo = {};
    /**
     * @instance
     * @type {Members}
     * @public
     * @memberof Meeting
     */
    this.members = new Members({}, {parent: this.spark});
    /**
     * @instance
     * @type {Roap}
     * @readonly
     * @private
     * @memberof Meeting
     */
    this.roap = new Roap({}, options);
    /**
     * created later
     * @instance
     * @type {ReconnectionManager}
     * @readonly
     * @private
     * @memberof Meeting
     */
    this.reconnectionManager = null;
    /**
     * created later
     * @instance
     * @type {AudioStateMachine}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.audio = null;
    /**
     * created later
     * @instance
     * @type {VideoStateMachine}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.video = null;
    /**
     * @instance
     * @type {MeetingStateMachine}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.state = MeetingStateMachine.create(this);
    /**
     * created later on user demand
     * @instance
     * @type {WebRTCStats}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.stats = null;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.convoId = null;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.locusUrl = (attrs.locus && attrs.locus.url) || null;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.sipUri = null;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.partner = null;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.type = null;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.owner = null;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.hostId = null;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @public
     * @memberof Meeting
     */
    this.policy = null;
    /**
     * @instance
     * @type {MeetingRequest}
     * @private
     * @memberof Meeting
     */
    this.meetingRequest = new MeetingRequest({}, options);
    /**
     * Passing only info as we send basic info for meeting added event
     * @instance
     * @type {MeetingRequest}
     * @private
     * @memberof Meeting
     */
    this.locusInfo = new LocusInfo(this.updateMeetingObject.bind(this), attrs.locus ? attrs.locus : {}, this.spark);
    /**
     * Passing only info as we send basic info for meeting added event
     * @instance
     * @type {MediaProperties}
     * @public
     * @memberof Meeting
     */
    this.mediaProperties = new MediaProperties();
    this.setUpLocusInfoListeners();
  }

  /**
   * @returns {undefined}
   * @private
   * @memberof Meeting
   */
  setUpLocusInfoListeners() {
    this.setUpLocusInfoSelfListener();
  }

  /**
   * @returns {undefined}
   * @private
   * @memberof Meeting
   */
  setUpLocusInfoSelfListener() {
    Events.on(EVENTS.SELF_UNADMITTED_GUEST, (payload) => {
      if (payload) {
        this.trigger(EVENT_TRIGGERS.MEETING_SELF_LOBBY_WAITING, {
          payload
        });
      }
    });
    Events.on(EVENTS.SELF_ADMITTED_GUEST, (payload) => {
      if (payload) {
        this.trigger(EVENT_TRIGGERS.MEETING_SELF_GUEST_ADMITTED, {
          payload
        });
      }
    });
  }

  /**
   * @param {Object} object
   * @returns {undefined}
   * @private
   * @memberof Meeting
   * // TODO: is this function necessary?
   */
  updateMeetingObject(object) {
    // Validate if these are valid meeting object property
    // TODO: add a check to make sure the value passed in the constructor
    // is not changed by any delta event
    if (object && Object.keys(object).length) {
      Object.keys(object).forEach((key) => {
        this[key] = object[key];
      });
    }
  }

  /**
   * invite a guest to the call that isn't normally part of this call
   * @param {Object} invitee
   * @param {String} invitee.emailAddress
   * @param {String} invitee.email
   * @param {Boolean} alertIfActive optional
   * @returns {Promise} see #members.addMember
   * @public
   * @memberof Meeting
   */
  invite(invitee, alertIfActive = true) {
    return this.members.addMember(invitee, alertIfActive);
  }

  /**
   * admit the guest(s) to the call once they are waiting
   * @param {Array} memberIds
   * @returns {Promise} see #members.admitMembers
   * @public
   * @memberof Meeting
   */
  admit(memberIds) {
    return this.members.admitMembers(memberIds);
  }

  /**
   * Reference to the Members object
   * @returns {Members}
   * @public
   * @memberof Meeting
   */
  getMembers() {
    return this.members;
  }

  /**
   * Reference to the stats builder object
   * @param {Object} options - optional
   * @param {Object} options.media
   * @param {Object} options.screen
   * @returns {WebRTCStats}
   * @public
   * @memberof Meeting
   */
  getStats(options) {
    if (!this.stats) {
      return this.createStats(options);
    }
    return this.stats;
  }

  /**
   * Overwrite the stats builder object
   * @param {Object} options - optional
   * @param {Object} options.media
   * @param {Object} options.screen
   * @returns {WebRTCStats}
   * @public
   * @memberof Meeting
   */
  createStats(options = {}) {
    this.stats = new WebRTCStats(this.attrs, this.options, options);
    return this.stats;
  }

  /**
   * Convenience function to tell whether a meeting is muted
   * @returns {Boolean} if meeting audio muted or not
   * @public
   * @memberof Meeting
   */
  isAudioMuted() {
    return this.audio && this.audio.isMuted();
  }

  /**
   * Convenience function to tell if the end user last changed the audio state
   * @returns {Boolean} if audio was manipulated by the end user
   * @public
   * @memberof Meeting
   */
  isAudioSelf() {
    return this.audio && this.audio.isSelf();
  }

  /**
   * Convenience function to tell whether video is muted
   * @returns {Boolean} if meeting video is muted or not
   * @public
   * @memberof Meeting
   */
  isVideoMuted() {
    return this.video && this.video.isMuted();
  }

  /**
   * Convenience function to tell whether the end user changed the video state
   * @returns {Boolean} if meeting video is muted or not
   * @public
   * @memberof Meeting
   */
  isVideoSelf() {
    return this.video && this.video.isSelf();
  }

  /**
   * Sets the meeting info on the class instance
   * @param {Object} meetingInfo
   * @param {String} meetingInfo.convoId
   * @param {String} meetingInfo.locusUrl
   * @param {String} meetingInfo.sipUri
   * @param {Object} meetingInfo.owner
   * @returns {undefined}
   * @private
   * @memberof Meeting
   */
  parseMeetingInfo(meetingInfo) {
    // MeetingInfo will be undefined for 1:1 calls
    if (meetingInfo && meetingInfo.body && !(meetingInfo.errors && meetingInfo.errors.length > 0)) {
      this.convoId = meetingInfo.body.convoId || this.convoId;
      this.locusUrl = meetingInfo.body.locusUrl || this.locusUrl;
      this.sipUri = meetingInfo.body.sipMeetingUri || this.sipUri;
      this.owner = meetingInfo.body.owner || this.owner;
    }
  }

  /**
   * Sets the first locus info on the class instance
   * @param {Object} locus
   * @param {String} locus.url
   * @param {Array} locus.participants
   * @param {Object} locus.self
   * @returns {undefined}
   * @private
   * @memberof Meeting
   */
  parseLocus(locus) {
    if (locus) {
      this.locusUrl = locus.url;
      // TODO: move this to parse participants module
      this.setLocus(locus);

      // check if we can extract this info from partner
      // Parsing of locus object must be finished at this state
      if (locus.participants && locus.self) {
        this.partner = MeetingUtil.getLocusPartner(locus.participants, locus.self);
      }

      // For webex meeting the sipUrl gets updated in info parser
      if (!this.sipUri && this.partner && this.type === ONE_ON_ONE) {
        this.sipUri = this.partner.person.sipUrl || this.partner.person.emailAddress || this.partner.person.email;
      }
    }
  }

  /**
   * Sets the sip uri on the class instance
   * uses meeting info as precedence
   * @param {String} sipUri
   * @returns {undefined}
   * @private
   * @memberof Meeting
   */
  setSipUri(sipUri) {
    // This can be tel no, device id or a sip uri, user Id
    this.sipUri = sipUri;
  }

  /**
   * Set the roap seq on the class instance
   * @param {Number} seq
   * @returns {undefined}
   * @private
   * @memberof Meeting
   */
  setRoapSeq(seq) {
    if (seq) {
      this.roapSeq = seq;
    }
  }

  /**
   * Set the locus info the class instance
   * @param {Object} locus
   * @param {Array} locus.mediaConnections
   * @param {String} locus.locusUrl
   * @param {String} locus.locusId
   * @param {String} locus.mediaId
   * @param {Object} locus.host
   * @todo change name to genertic parser
   * @returns {undefined}
   * @private
   * @memberof Meeting
   */
  setLocus(locus) {
    const mtgLocus = locus.locus || locus;
    // LocusInfo object saves the locus object
    // this.locus = mtgLocus;
    this.mediaConnections = locus.mediaConnections;
    this.locusUrl = locus.locusUrl || locus.url;
    this.locusId = locus.locusId;
    this.selfId = locus.selfId;
    this.mediaId = locus.mediaId;
    this.hostId = mtgLocus.host ? mtgLocus.host.id : this.hostId;
    this.locusInfo.initialSetup(mtgLocus);
  }

  /**
   * Sets the remote stream on the class instance and emits and
   * event to developers
   * @param {Object} pc The remote stream peer connection
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  setRemoteStream(pc) {
    if (!pc) {
      return;
    }
    // eslint-disable-next-line no-param-reassign
    pc.ontrack = (event) => {
      [this.mediaProperties.remoteStream] = event.streams;

      // eslint-disable-next-line no-warning-comments
      // TODO: It's possible for media to not be present
      // so we might need to either
      // A) wait until we have media flowing
      // B) trigger a second event when video is flowing
      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {
        type: EVENT_TYPES.REMOTE,
        stream: this.mediaProperties.remoteStream
      });
    };
  }

  /**
   * Removes the remote stream on the class instance and triggers an event
   * to developers
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  unsetRemoteStream() {
    this.mediaProperties.unsetRemoteStream();
  }

  /**
   * Removes the remote stream on the class instance and triggers an event
   * to developers
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  closeRemoteStream() {
    return Media.stopStream(this.mediaProperties.remoteStream).then(() => {
      this.trigger(EVENT_TRIGGERS.MEDIA_STOPPED, {
        type: EVENT_TYPES.REMOTE
      });
    });
  }

  /**
   * Sets the sceen stream on the class instance and triggers and event to developers
   * @param {Object} pc a peer connection instance for the screen
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  setShareStream(pc) {
    if (!pc) {
      return;
    }
    // eslint-disable-next-line no-param-reassign
    pc.ontrack = (event) => {
      [this.mediaProperties.remoteShare] = event.streams;

      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {
        type: EVENT_TYPES.REMOTE_SHARE,
        stream: this.mediaProperties.remoteShare
      });
    };
  }

  /**
   * Sets the local media stream on the class and emits an event to the developer
   * @param {Stream} localStream the local media stream
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  setLocalStream(localStream) {
    if (localStream) {
      this.mediaProperties.setLocalStream(localStream);
      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {
        type: EVENT_TYPES.LOCAL,
        stream: this.mediaProperties.localStream
      });
    }
  }

  /**
   * Sets the local media stream on the class and emits an event to the developer
   * @param {Stream} localShare the local media stream
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  setLocalShare(localShare) {
    if (localShare) {
      this.mediaProperties.setLocalShare(localShare);
      const contentTracks = this.mediaProperties.localShare.getVideoTracks();
      contentTracks.forEach((track) => {
        track.onended = () => {
          this.stopShare();
        };
      });

      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {
        type: EVENT_TYPES.LOCAL_SHARE,
        stream: this.mediaProperties.localShare
      });
    }
  }

  /**
   * Closes the local stream from the class and emits an event to the developer
   * @returns {undefined}
   * @event media:stopped
   * @public
   * @memberof Meeting
   */
  closeLocalStream() {
    return Media.stopStream(this.mediaProperties.localStream).then(() => {
      this.trigger(EVENT_TRIGGERS.MEDIA_STOPPED, {
        type: EVENT_TYPES.LOCAL
      });
    });
  }

  /**
   * Closes the local stream from the class and emits an event to the developer
   * @returns {undefined}
   * @event media:stopped
   * @public
   * @memberof Meeting
   */
  closeLocalShare() {
    return Media.stopStream(this.mediaProperties.localShare).then(() => {
      this.trigger(EVENT_TRIGGERS.MEDIA_STOPPED, {
        type: EVENT_TYPES.LOCAL_SHARE
      });
    });
  }

  /**
   * Removes the local stream from the class and emits an event to the developer
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  unsetLocalStream() {
    this.mediaProperties.unsetLocalStream();
  }

  /**
   * Removes the local share from the class and emits an event to the developer
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  unsetLocalShare() {
    this.mediaProperties.unsetLocalShare();
  }

  /**
   * Sets the peer connections on the class
   * sets up reconnection logic
   * @param {PeerConnection} mediaPeerConnection
   * @param {PeerConnection} sharePeerConnection
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  setPeerConnections(mediaPeerConnection, sharePeerConnection) {
    this.mediaProperties.setPeerConnections(mediaPeerConnection, sharePeerConnection);
    // TODO: need to test more with the triggers for reconnect, we also need to add triggers based on getStats reports
    if (this.config.reconnection.detection) {
      this.reconnectionManager = new ReconnectionManager(this);
      PeerConnectionManager.detectFailures(
        this.mediaProperties.mediaPeerConnection,
        this.mediaProperties.sharePeerConnection,
        this.reconnect
      );
      // Client will have a socket manager and handle reconnecting to mercury, when we reconnect to mercury
      // if the meeting has active peer connections, it should try to reconnect.
      this.spark.internal.mercury.on(ONLINE, () => {
        this.reconnect();
      });
    }
  }

  /**
   * Close the peer connections and remove them from the class. Triggers an event
   * when each is closed.
   * @returns {Promise} returns a resolved promise with an array of closed peer connections
   * @public
   * @memberof Meeting
   */
  closePeerConnections() {
    return Promise.all([
      PeerConnectionManager.close(this.mediaProperties.mediaPeerConnection),
      PeerConnectionManager.close(this.mediaProperties.sharePeerConnection)
    ]);
  }

  /**
   * Unsets the peer connections on the class
   * warning DO NOT CALL WITHOUT CLOSING PEER CONNECTIONS FIRST
   * @param {PeerConnection} mediaPeerConnection
   * @param {PeerConnection} sharePeerConnection
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  unsetPeerConnections() {
    this.mediaProperties.unsetPeerConnections();
    if (this.config.reconnection.detection) {
      this.spark.internal.mercury.off(ONLINE);
    }
  }

  /**
   * Convenience method to set the correlation id for the Meeting
   * @param {String} id correlation id to set on the class
   * @returns {undefined}
   * @private
   * @memberof Meeting
   */
  setCorrelationId(id) {
    this.correlationId = id;
  }

  /**
   * Mute the audio for a meeting
   * @returns {Promise} resolves the data from muting audio {mute, self} or rejects if there is no audio set
   * @public
   * @memberof Meeting
   */
  muteAudio() {
    if (!this.audio || (this.audio && !this.audio.toggle)) {
      return Promise.reject(new Error('no audio control associated to the meeting'));
    }
    return this.audio.toggle({
      mute: true,
      self: true
    });
  }

  /**
   * Unmute meeting audio
   * @returns {Promise} resolves data from muting audio {mute, self} or rejects if there is no audio set
   * @public
   * @memberof Meeting
   */
  unmuteAudio() {
    if (!this.audio || (this.audio && !this.audio.toggle)) {
      return Promise.reject(new Error('no audio control associated to the meeting'));
    }
    return this.audio.toggle({
      mute: false,
      self: true
    });
  }

  /**
   * Mute the video for a meeting
   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set
   * @public
   * @memberof Meeting
   */
  muteVideo() {
    if (!this.video || (this.video && !this.video.toggle)) {
      return Promise.reject(new Error('no video control associated to the meeting'));
    }
    return this.video.toggle({
      mute: true,
      self: true
    });
  }

  /**
   * Unmute meeting video
   * @returns {Promise} resolves data from muting video {mute, self} or rejects if there is no video set
   * @public
   * @memberof Meeting
   */
  unmuteVideo() {
    if (!this.video || (this.video && !this.video.toggle)) {
      return Promise.reject(new Error('no audio control associated to the meeting'));
    }
    const options = {};
    options.mute = false;
    options.self = true;
    return this.video.toggle({
      mute: false,
      self: true
    });
  }

  /**
   * @param {Object} joinOptions - see #join()
   * @param {Object} mediaOptions - see #addMedia()
   * @param {object} streamsOptions - see #getMediaStreams()
   * @returns {Promise} -- {join: see join(), media: see addMedia(), local: see getMediaStreams()}
   * @public
   * @memberof Meeting
   */
  joinWithMedia(joinOptions, mediaOptions, streamsOptions) {
    this.join(joinOptions)
      .then((joinResponse) =>
        this.getMediaStreams(streamsOptions).then(([localStream, localShare]) =>
          this.addMedia({
            mediaSettings: mediaOptions,
            localShare,
            localStream
          }).then((mediaResponse) => {
            Promise.resolve({
              join: joinResponse,
              media: mediaResponse,
              local: [localStream, localShare]
            });
          })))
      .catch((error) => Promise.reject(error));
  }

  /**
   * initiates the reconnection of the media in the meeting
   * @returns {Promise} resolves with {reconnect} or errors with {error}
   * @public
   * @memberof Meeting
   */
  reconnect() {
    if (!this.reconnectionManager || !this.reconnectionManager.reconnect) {
      throw new Error('Cannot reconnect, ReconnectionManager must first be defined.');
    }
    return this.reconnectionManager
      .reconnect(this)
      .then((reconnect) => {
        this.trigger(EVENT_TRIGGERS.MEETING_RECONNECTION_SUCCESS, {
          reconnect
        });
        return Promise.resolve(reconnect);
      })
      .catch((error) => {
        this.trigger(EVENT_TRIGGERS.MEETING_RECONNECTION_FAILURE, {
          error: new ReconnectionError(error)
        });
        return Promise.reject(new ReconnectionError(error));
      })
      .finally((reconnect) => {
        this.reconnectionManager.reset();
        return Promise.resolve(reconnect);
      });
  }

  /**
   *
   * Specify joining via audio (option: pstn), video, screenshare
   * @param {Object} options A configurable options object for joining a meeting
   * @param {String} options.resourceId pass the deviceId
   * @param {Number} options.hostPin pass the host pin
   * @param {Boolean} options.moderator pass the moderator flag
   * @returns {Promise} the join response
   * @public
   * @memberof Meeting
   * Scenario A: Joining own claimed personal meeting room, don't pass hostPin, do pass moderator
   * Scenario B: Joining other's claimed personal meeting room, do pass hostPin (if desired to join as host, or nullify), do pass moderator
   * Scenario C: Joining an unclaimed personal meeting room, -do not- pass hostPin or moderator on first try, -do- pass hostPin and moderator
   *             if joining as host on second loop, -do not- pass hostPin do pass moderator if joining as guest on second loop
   * Scenario D: Joining any other way (sip, pstn, convoId, link just need to specify resourceId)
   */
  join(options = {}) {
    this.ringing(STOP, false);
    this.resourceId = this.resourceId || options.resourceId;
    this.setCorrelationId(this.id);
    // this.state.join();
    // TODO: this should be removed following locus changes.
    options = MeetingUtil.cleanOptions(options, this.meetingInfo, this.owner, this.userId);
    // normal join meeting, scenario A, D
    return MeetingUtil.joinMeeting(this, options)
      .then((response) => {
        this.setLocus(response);
        return response;
        // this.state.connect();
      })
      .catch((err) => {
        // joining a claimed PMR that is not my own, scenario B
        if (MeetingUtil.isPinOrGuest(err)) {
          if (MeetingUtil.hasOwner(this.meetingInfo)) {
            return MeetingUtil.joinMeeting(this, options).then((response) => {
              this.setLocus(response);
              return response;
              // this.state.connect();
            });
          }
          // request host pin or non host for unclaimed PMR, start of Scenario C
          // see https://sqbu-github.cisco.com/WebExSquared/locus/wiki/Locus-Lobby-and--IVR-Feature
          return Promise.reject(new IntentToJoinError(err));
        }
        this.logger.log('Meeting:index#join --> Error joining the call on getLocalMedia, ', err);
        return Promise.reject(new JoinMeetingError(err, options));
      });
  }

  /**
   * get local media streams based on options passed
   * @param {Object} mediaDirection A configurable options object for joining a meeting
   * @returns {Promise} see #Media.getUserMedia
   * @public
   * @todo should be static
   * @memberof Meeting
   */
  getMediaStreams = (mediaDirection) => Media.getUserMedia(mediaDirection);

  /**
   * Specify joining via audio (option: pstn), video, screenshare
   * @param {Object} options A configurable options object for joining a meeting
   * @param {Object} options.resourceId pass the deviceId
   * @param {MediaStream} options.localStream
   * @param {MediaStream} options.localShare
   * @returns {Promise}
   * @public
   * @memberof Meeting
   */
  addMedia(options = {}) {
    const {localStream, localShare} = options;
    // eslint-disable-next-line no-warning-comments
    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register
    this.mediaProperties.setMediaDirection(Object.assign(this.config.mediaSettings, options.mediaSettings));
    // add a setup a function move the create and setup media in future
    // TODO: delete old audio and video if stale
    this.audio = this.audio || AudioStateMachine.create(this.mediaProperties.mediaDirection, this);
    this.video = this.video || VideoStateMachine.create(this.mediaProperties.mediaDirection, this);
    // this.state.local();
    this.setLocalStream(localStream);
    this.setLocalShare(localShare);
    return Media.attachMedia(this.mediaProperties.mediaDirection, PeerConnectionManager, localStream, localShare, {
      mediaPeerConnection: this.mediaProperties.mediaPeerConnection,
      sharePeerConnection: this.mediaProperties.sharePeerConnection
    })
      .then(([mediaPeerConnection, sharePeerConnection]) => {
        const updatedsharePeerConnection = PeerConnectionManager.setContentSlides(sharePeerConnection);
        this.setPeerConnections(mediaPeerConnection, updatedsharePeerConnection);
        this.setRemoteStream(this.mediaProperties.mediaPeerConnection);
        this.setShareStream(this.mediaProperties.sharePeerConnection);
      })
      .catch((err) => {
        this.logger.log('Meeting:index#join --> Error joining the call on roap initialization, ', err);
        throw err;
      })
      .then(() =>
        this.roap
          .sendRoapMediaRequest({
            sdps: MeetingUtil.getSdps(this),
            roapSeq: this.roapSeq,
            meeting: this // or can pass meeting ID
          })
          .catch((err) => {
            this.logger.error('Meeting:index#join --> Error joining the call on send roap media request, ', err);
            throw err;
          }))
      .then(() => {
        // this.state.establish();
      });
  }

  /**
   * @param {String} type should be null if ringing is false
   * @param {Boolean} ringing coerced to null if false
   * @returns {undefined}
   * @event meeting:ringing
   * @memberof Meeting
   * TODO: move this to meeting state machine to manage ringing state
   */
  ringing(type, ringing = true) {
    this.trigger(EVENT_TRIGGERS.MEETING_RINGING, {
      type,
      ringing
    });
  }

  /**
   * acknowledge the meeting, outgoing or incoming
   * @param {String} type
   * @param {Boolean} ringing optional
   * @returns {Promise} resolve {message, ringing, response}
   * @public
   * @memberof Meeting
   */
  acknowledge(type, ringing = true) {
    if (!type) {
      return Promise.reject(new Error('Type must be set to acknowledge the meeting.'));
    }
    if (type === INCOMING) {
      return this.meetingRequest
        .acknowledgeMeeting({
          locusUrl: this.locusUrl,
          deviceUrl: this.deviceUrl,
          id: this.id
        })
        .then((response) => Promise.resolve(response))
        .then((response) => {
          this.ringing(type, ringing);
          return Promise.resolve({
            message: `Meeting type: ${type} is acknowledged. Triggered ringing with: ${ringing}.`,
            ringing,
            response
          });
        });
    }
    // TODO: outside of 1:1 incoming, and all outgoing calls
    return Promise.resolve({
      message: 'noop'
    });
  }

  /**
   * Decline this meeting
   * @param {String} reason
   * @returns {undefined}
   * @public
   * @memberof Meeting
   */
  decline(reason = BUSY) {
    return this.meetingRequest
      .declineMeeting({
        locusUrl: this.locusUrl,
        deviceUrl: this.deviceUrl,
        reason
      })
      .then((response) => {
        this.ringing(STOP, false);
        Events.emit(EVENTS.DESTROY_MEETING_1_1, {
          meeting: this,
          response,
          type: EVENTS.DESTROY_MEETING_1_1
        });
      });
  }

  /**
   * Leave the current meeting
   * @param {Object} options An object of options
   * @param {Boolean} options.keepLocalMedia Whether to tear down the local media connections or not.
   * @returns {Promise}
   * @public
   * @memberof Meeting
   */
  leave() {
    // this.state.leave();
    return this.meetingRequest
      .leaveMeeting({
        locusUrl: this.locusUrl,
        selfId: this.selfId,
        correlationId: this.correlationId,
        resourceId: null,
        deviceUrl: this.deviceUrl
      })
      .then(() => this.closeLocalStream())
      .then(() => this.closeLocalShare())
      .then(() => this.closePeerConnections())
      .then(() => {
        this.unsetLocalStream();
        this.unsetLocalShare();
        this.unsetRemoteStream();
        this.unsetPeerConnections();
      })
      .then(() => {
        this.roap.stop(this.correlationId, this.roapSeq);
      })
      .then(() => {
        this.state.end();
      })
      .catch((err) => {
        this.state.error();
        this.logger.error(`An error occured while trying to leave meeting with an id of ${this.id}`, err);
      })
      .finally(() => {
        this.state.clean();
      });
  }
  // /**
  //  *
  //  * Move this meeting to a given device
  //  * only possible if you are paired with the given device
  //  * @param {string} deviceID
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // moveToDevice(deviceID) {
  //   return new Promise((resolve) => resolve(deviceID));
  // }

  // /**
  //  *
  //  * Move this meeting back to the current client device, e.g., personal laptop.
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // moveToClient() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * Update the audio options of this meeting
  //  * @param {string} status
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // updateAudio(status) {
  //   return new Promise((resolve) => resolve(status));
  // }

  // /**
  //  *
  //  * Update the video option of this meeting
  //  * @param {string} status
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // updateVideo(status) {
  //   return new Promise((resolve) => resolve(status));
  // }

  // /**
  //  *
  //  * Update screen sharing preference of this meeting
  //  * @param {string} shareType
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // updateShare(shareType) {
  //   return new Promise((resolve) => resolve(shareType));
  // }

  /**
   * start sharing content
   * @returns {Promise} see #meetingRequest.changeMeetingFloor
   * @public
   * @memberof Meeting
   */
  share() {
    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);
    if (content) {
      return this.meetingRequest.changeMeetingFloor({
        disposition: FLOOR_ACTION.GRANTED,
        personUrl: this.locusInfo.self.url,
        deviceUrl: this.deviceUrl,
        uri: content.url,
        resourceUrl: this.resourceUrl
      });
    }
    return Promise.reject(new Error('Cannot share without content.'));
  }

  /**
   * stops the screen share
   * @returns {Promise} see #meetingRequest.changeMeetingFloor
   * @public
   * @memberof Meeting
   */
  stopShare() {
    const content = this.locusInfo.mediaShares.find((element) => element.name === CONTENT);
    if (content) {
      return this.meetingRequest.changeMeetingFloor({
        disposition: FLOOR_ACTION.RELEASED,
        personUrl: this.locusInfo.self.url,
        deviceUrl: this.deviceUrl,
        uri: content.url,
        resourceUrl: this.resourceUrl
      });
    }
    return Promise.reject(new Error('Cannot stop share without content'));
  }

  // /**
  //  *
  //  * Send this meeting to the phone system
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // sendDtmf() {
  //   return new Promise((resolve) => resolve({}));
  // }
  // /**
  //  *
  //  * Get statistics of the current meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // getStats() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * Lock this meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // lock() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * Unlock this meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // unlock() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * Intiate a recording of this meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // startRecording() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * End the recording of this meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // stopRecording() {
  //   return new Promise((resolve) => resolve({}));
  // }
}
