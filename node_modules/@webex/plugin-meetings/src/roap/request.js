
/* global window */
import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {PARTICIPANT, LOCI, CALL, POST, MEDIA, PUT, API, REACHABILITY} from '../constants';
/**
 * @class RoapRequest
 */
export default class RoapRequest extends StatelessSparkPlugin {
  /**
   * Joins a meeting via ROAP
   * @param {Object} options
   * @returns {Promise} returns a promise that resolves/rejects whatever the request does
   */


  attachRechabilityData(localSdp) {
    const reachabilityData = window.localStorage.getItem(REACHABILITY.localStorage);
    if (reachabilityData) {
      try {
        const reachabilityResult = JSON.parse(reachabilityData);
        /* istanbul ignore else */
        if (reachabilityResult && Object.keys(reachabilityResult).length) {
          localSdp.reachability = reachabilityResult;
        }
      }
      catch (e) {
        console.error(`Exception in parsing reachability data : ${e}`);
      }
    }

    return localSdp;
  }

  joinMeetingWithRoap(options) {
    this.logger.info('Call->Locus: Join locus with roap');
    this.logger.info('Call-local SDP', options.roapMessage);

    return Promise.resolve().then(() => {
      const deviceUrl = this.spark.internal.device.url;
      let url = '';

      const body = {
        deviceUrl,
        usingResource: options.resourceId || null,
        correlationId: options.correlationId,
        localMedias: [
          {
            localSdp: JSON.stringify(this.attachRechabilityData({
              roapMessage: options.roapMessage,
              audioMuted: false,
              videoMuted: false
            }))
          }
        ]
      };

      if (options.locusUrl) {
        url = `${options.locusUrl}/${PARTICIPANT}`;
      }
      else if (options.sipUrl) {
        url = `${this.spark.internal.device.services.locusServiceUrl}/${LOCI}/${CALL}`;
        body.invitee = {
          address: options.sipTarget
        };
      }
      else {
        throw new Error('Must provide a locusUrl or sipTarget');
      }

      return this.spark
        .request({
          method: POST,
          uri: url,
          body
        })
        .then((res) => {
          const {locus} = res.body;
          locus.roapSeq = options.roapMessage.seq;
          locus.id = locus.url.split('/').pop();
          this.logger.info(`Call-Locus->App: Joined locus [${locus.id}][${locus.fullState.lastActive}]`);
          return locus;
        })
        .catch((err) => {
          this.logger.error('MeetingAdapter#joinMeetingWithRoap failed', err);
          throw err;
        });
    });
  }

  /**
   * Sends a ROAP message
   * @param {Object} options
   * @param {String} options.roapMessage
   * @param {String} options.locusId
   * @param {String} options.locusSelfId
   * @param {String} options.mediaId
   * @param {String} options.correlationId
   * @returns {Promise} returns the response/failure of the request
   */
  sendRoap(options) {
    const {
      roapMessage, locusId, locusSelfId, mediaId, correlationId
    } = options;

    if (!mediaId) {
      this.logger.info('Race Condition /call mediaID not present');
    }

    const mediaUrl = `${LOCI}/${locusId}/${PARTICIPANT}/${locusSelfId}/${MEDIA}`;
    const deviceUrl = this.spark.internal.device.url;

    this.logger.info(`Call-sendRoap: ${mediaUrl} \n ${roapMessage.messageType} \n seq:${roapMessage.seq}`);

    return this.spark
      .request({
        api: API.LOCUS,
        resource: mediaUrl,
        method: PUT,
        body: {
          deviceUrl,
          correlationId,
          localMedias: [
            {
              localSdp: JSON.stringify(this.attachRechabilityData({
                roapMessage,
                // eslint-disable-next-line no-warning-comments
                // TODO: check whats the need for video and audiomute
                audioMuted: !!options.audioMuted,
                videoMuted: !!options.audioVideo
              })),
              mediaId: options.mediaId
            }
          ]
        }
      })
      .then((res) => {
        // always it will be the first mediaConnection Object
        const mediaConnection
          = res.body.mediaConnections && res.body.mediaConnections.length > 0 && res.body.mediaConnections[0];
        this.logger.info(
          `Call-sendRoap:response:${JSON.stringify(mediaConnection, null, 2)}'\n StatusCode:'${res.statusCode}`
        );
        const {locus} = res.body;
        locus.roapSeq = options.roapMessage.seq;
        return locus;
      })
      .catch((err) => {
        this.logger.error(`Call-sendRoap Error:${JSON.stringify(err, null, 2)}`);
        this.logger.error(
          `Call-sendRoap errorBody:${JSON.stringify(roapMessage, null, 2)} + '\\n mediaId:'${options.mediaId}`
        );
        throw err;
      });
  }
}
