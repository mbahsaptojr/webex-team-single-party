/* eslint-disable no-console */
// we need to figure out how to pass a spark logger instace to these util files

import PeerConnectionManager from '../peer-connection-manager';
import {ANSWER, ERROR, CONFLICT, ROAP, SDP} from '../constants';

const RoapUtil = {};
const ROAP_ANSWER = ANSWER.toLowerCase();

RoapUtil.shouldHandleMedia = (meeting) => {
  const mediaOffer
    = meeting.mediaProperties.mediaPeerConnection
    && meeting.mediaProperties.mediaPeerConnection.signalingState === SDP.HAVE_LOCAL_OFFER;
  const screenOffer
    = meeting.mediaProperties.sharePeerConnection
    && meeting.mediaProperties.sharePeerConnection.signalingState === SDP.HAVE_LOCAL_OFFER;
  if (mediaOffer || screenOffer) {
    return false;
  }
  return true;
};

RoapUtil.handleError = (pc) =>
  PeerConnectionManager.rollBackLocalDescription({mediaPeerConnection: pc})
    .then(() => Promise.resolve(true))
    .catch((err) => Promise.reject(err));

RoapUtil.findError = (messageType, errorType, type) =>
  (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG) && messageType === ERROR && errorType === CONFLICT;

RoapUtil.ensureMeeting = (meeting, type) => {
  if (type === ROAP.RECEIVE_ROAP_MSG || type === ROAP.SEND_ROAP_MSG || type === ROAP.SEND_ROAP_MSG_SUCCESS) {
    if (!meeting) {
      return false;
    }
  }
  return true;
};

RoapUtil.compareLastRemoteOffer = (currentOffer, previousOffer) => {
  let index1, index2;
  let difference = false;

  if (previousOffer.length > 0 && previousOffer.length === currentOffer.length) {
    console.log('previous offer', previousOffer[0].slice(0, 20));
    console.log('current offer', currentOffer[0].slice(0, 20));
    previousOffer.forEach((sdp, index) => {
      index1 = sdp.indexOf('IN');
      index2 = currentOffer[index].indexOf('IN');

      if (sdp.substring(index1) !== currentOffer[index].substring(index2)) {
        difference = true;
      }
    });
  }
  return difference;
};

RoapUtil.updatePeerConnection = (meeting, session) => {
  const res = RoapUtil.compareLastRemoteOffer(session.OFFER.sdps, meeting.roap.lastRoapOffer);
  if (!res) {
    const sdpPromises = [];
    if (meeting.mediaProperties.mediaPeerConnection) {
      sdpPromises.push(meeting.mediaProperties.mediaPeerConnection.sdp);
    }
    if (meeting.mediaProperties.sharePeerConnection) {
      sdpPromises.push(meeting.mediaProperties.sharePeerConnection.sdp);
    }
    return Promise.resolve(sdpPromises);
  }
  return PeerConnectionManager.updatePeerConnection({
    offerSdp: session.OFFER.sdps,
    pc: meeting.mediaProperties.mediaPeerConnection,
    sharePeerConnection: meeting.mediaProperties.sharePeerConnection,
    offerToReceiveAudio: true,
    offerToReceiveVideo: true
  })
    .then((res) => {
      meeting.roap.lastRoapOffer = session.OFFER.sdps;
      return res;
    });
};


RoapUtil.setRemoteDescription = (meeting, session) => {
  console.info('Call-RoapHandler: Transmite WAIT_TX_OK', meeting.correlationId);
  if (!(meeting && (meeting.mediaProperties.mediaPeerConnection || meeting.mediaProperties.sharePeerConnection))) {
    console.error('Call-RoapHandler: DANGER no media or screen peer connection', meeting.correlationId);
    return Promise.reject(new Error('Must provide a media or screen peer connection'));
  }
  let promise;
  if (meeting.mediaProperties.mediaPeerConnection && meeting.mediaProperties.sharePeerConnection) {
    promise = Promise.all([
      PeerConnectionManager.setRemoteSessionDetails(
        meeting.mediaProperties.mediaPeerConnection,
        ROAP_ANSWER,
        session.ANSWER.sdps[0],
        meeting.clientIdentifiers
      ),
      PeerConnectionManager.setRemoteSessionDetails(
        meeting.mediaProperties.sharePeerConnection,
        ROAP_ANSWER,
        session.ANSWER.sdps[1],
        meeting.clientIdentifiers
      )
    ]);
  }
  else if (meeting.mediaProperties.sharePeerConnection) {
    promise = PeerConnectionManager.setRemoteSessionDetails(
      meeting.mediaProperties.sharePeerConnection,
      ROAP_ANSWER,
      session.ANSWER.sdps[0],
      meeting.clientIdentifiers
    );
  }
  return promise
    .then(() => {
      console.info('Call-RoapHandler: setRemote Description successfull', meeting.correlationId);
      return {
        seq: session.ANSWER.seq,
        locusId: meeting.locusId,
        locusSelfId: meeting.locusInfo.self.id,
        mediaId: meeting.mediaId,
        correlationId: meeting.correlationId
      };
    })
    .catch((err) => {
      console.error('Call-RoapHandler: Error setting remote and sending Roap Message', err);
      throw err;
    });
};

export default RoapUtil;
