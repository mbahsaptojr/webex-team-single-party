import {
  PUT,
  CONTROLS
} from '../constants';

const MembersUtil = {};

/**
 * @param {Object} invitee with emailAddress or email
 * @param {String} locusUrl
 * @param {Boolean} alertIfActive
 * @returns {Object} the format object
 */
MembersUtil.generateAddMemberOptions = (invitee, locusUrl, alertIfActive) => ({
  invitee,
  locusUrl,
  alertIfActive
});

/**
 * @param {Array} memberIds
 * @param {String} locusUrl
 * @returns {Object} the format object
 */
MembersUtil.generateAdmitMemberOptions = (memberIds, locusUrl) => ({
  locusUrl,
  memberIds
});

/**
 * @param {Object} options with {invitee: {emailAddress, email}, alertIfActive}
 * @returns {Object} with {invitees: [{address}], alertIfActive}
 */
MembersUtil.getAddMemberBody = (options) => ({
  invitees: [
    {
      address: options.invitee.emailAddress || options.invitee.email
    }
  ],
  alertIfActive: options.alertIfActive
});

/**
 * @param {Object} options with {memberIds}
 * @returns {Object} admit with {memberIds}
 */
MembersUtil.getAdmitMemberRequestBody = (options) => ({
  admit: {memberIds: options.memberIds}
});

/**
 * @param {Object} format with {memberIds, locusUrl}
 * @returns {Object} the request parameters (method, uri, body) needed to make a admitMember request
 */
MembersUtil.getAdmitMemberRequestParams = (format) => {
  const body = MembersUtil.getAdmitMemberRequestBody(format);
  return {
    method: PUT,
    uri: `${format.locusUrl}/${CONTROLS}`,
    body
  };
};

/**
 * @param {Object} format with {invitee {emailAddress, email}, locusUrl, alertIfActive}
 * @returns {Object} the request parameters (method, uri, body) needed to make a addMember request
 */
MembersUtil.getAddMemberRequestParams = (format) => {
  const body = MembersUtil.getAddMemberBody(format);
  const requestParams = {
    method: PUT,
    uri: format.locusUrl,
    body
  };
  return requestParams;
};

export default MembersUtil;
