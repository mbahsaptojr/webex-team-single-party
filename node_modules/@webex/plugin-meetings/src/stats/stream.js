import {Readable} from 'stream';
import {EventEmitter} from 'events';

import {safeSetTimeout} from '@ciscospark/common-timers';

import {_ERROR_, _DATA_, _CLOSED_, DEFAULT_STATS_INTERVAL} from '../constants';

const emittersByPc = new WeakMap();
const pcsByEmitter = new WeakMap();
const emittersByStream = new WeakMap();
const timersByEmitter = new WeakMap();

/**
 * Helper function that ensures no matter how many stats streams we create, we
 * don't poll the PeerConnection more than once per interval.
 * @param {EventEmitter} emitter
 * @private
 * @returns {undefined}
 */
const schedule = (emitter) => {
  const timer = safeSetTimeout(() => {
    const pc = pcsByEmitter.get(emitter);
    if (pc) {
      pc.getStats()
        .then((stats) => {
          emitter.emit(_DATA_, stats);
          // TODO: Remove on 1.0 spec adoption
          // "closed" is supposed to be part of the {@link RTCPeerConnectionState}
          // enum according to spec, but at time of writing, was still implemented
          // in the {@link RTCSignalingState} enum.
          if (!(pc.signalingState === _CLOSED_ || pc.connectionState === _CLOSED_)) {
            schedule(emitter);
          }
        })
        .catch((err) => {
          emitter.emit(_ERROR_, err);
        });
    }
  }, DEFAULT_STATS_INTERVAL);

  timersByEmitter.set(emitter, timer);
};

/**
 * Polls an {@link RTCPeerConnection} once per second and emits its {@link RTCStatsReport}
 * {@link RTCStatsReport}
 */
export default class StatsStream extends Readable {
  /**
   * @private
   * @param {RTCPeerConnection} pc
   */
  constructor(pc) {
    super({objectMode: true});

    if (!emittersByPc.has(pc)) {
      emittersByPc.set(pc, new EventEmitter());
    }
    const emitter = emittersByPc.get(pc);

    if (!emittersByStream.has(this)) {
      emittersByStream.set(this, emitter);
    }
    if (!pcsByEmitter.has(emitter)) {
      pcsByEmitter.set(emitter, pc);
    }

    emitter.once(_ERROR_, (err) => {
      this.emit(_ERROR_, err);
    });
  }

  /**
   * See NodeJS Docs
   * @private
   * @returns {undefined}
   */
  _read() {
    const emitter = emittersByStream.get(this);

    emitter.once(_DATA_, (data) => {
      if (!this.isPaused()) {
        this.push(data);
      }
    });

    if (!timersByEmitter.has(emitter)) {
      schedule(emitter);
    }
  }
}

