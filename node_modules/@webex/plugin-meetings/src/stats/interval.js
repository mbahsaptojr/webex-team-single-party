import StatsCalculator from '../stats/calculator';

/**
 * simply calculates the data between two points, assumes updated data is later in the time series
 * and should be subtracted from to calculate the interval
 */
export default class StatsInterval {
  /**
   * @param {Object} options
   * options.previous - the old stats report to compare to
   * options.updated - the new stats report to subtract from
   * options.interval - create a new interval with an already stored interval
   */
  constructor(options = {previous: undefined, updated: undefined, interval: {}}) {
    this.previous = options.previous;
    this.updated = options.updated;
    this.interval = options.interval;
  }

  /**
   * sets the previous data to subtract
   * @param {Object} previous
   * @returns {undefined}
   */
  setPrevious(previous) {
    this.previous = previous;
  }

  /**
   * sets the updateds data to subtract from
   * @param {Object} updated
   * @returns {undefined}
   */
  setUpdated(updated) {
    this.updated = updated;
  }

  /**
   * @returns {Object} the previous data to subtract
   */
  getPrevious() {
    return this.previous;
  }

  /**
   * @returns {Object} the updated data to subtract from
   */
  getUpdated() {
    return this.updated;
  }

  /**
   * @returns {Object} the updated interval data where each key has been subtracted from and the result is stored
   */
  get() {
    return this.interval;
  }

  /**
   * call in to the calculator using the set instance variables
   * @returns {undefined}
   */
  calculateInterval() {
    this.interval = StatsCalculator.interval(this.getPrevious(), this.getUpdated());
  }

  /**
   * update the interval by first passing in the new data, shifting it's spots with the previous updated
   * then calculating the actual interval value
   * @param {WebRTCData} updated
   * @returns {Object} interval the stored interval values post subtraction
   */
  updateInterval(updated) {
    this.setPrevious(this.updated);
    this.setUpdated(updated);
    this.calculateInterval();
    return this.get();
  }
}
