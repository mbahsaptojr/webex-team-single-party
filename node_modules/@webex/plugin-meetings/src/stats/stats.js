import {StatelessSparkPlugin} from '@ciscospark/spark-core';
import uuid from 'uuid';

import {MEETINGS} from '../constants';
import StatsHistory from '../stats/history';
import StatsAggregator from '../stats/aggregator';
import StatsInterval from '../stats/interval';
import StatsStream from '../stats/stream';
import StatsFilter from '../stats/filter';
import StatsEvents from '../stats/events';

/**
 * @class MeetingStats
 */
export default class MeetingStats extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   * @param {Object} attrs
   * @param {Object} options
   * @param {Object} optionalCreateOptions {history: true/false, interval: true/false, aggregator: true/false, stream: RTCPeerConnection, filter: PeerConnection, events: true/false, id: true/false} // if filter is set do not set stream
   */
  constructor(attrs, options, optionalCreateOptions) {
    super({}, options);
    this.attrs = attrs;
    this.options = options;
    // usable values
    this.history = undefined;
    this.interval = undefined;
    this.aggregator = undefined;
    this.stream = undefined;
    this.filter = undefined;
    this.events = undefined;
    this.id = undefined;
    if (optionalCreateOptions && optionalCreateOptions.history) {
      this.withHistory();
    }
    if (optionalCreateOptions && optionalCreateOptions.interval) {
      this.withInterval();
    }
    if (optionalCreateOptions && optionalCreateOptions.aggregator) {
      this.withAggregator();
    }
    if (optionalCreateOptions && optionalCreateOptions.filter && !optionalCreateOptions.stream) {
      this.withFilter(optionalCreateOptions.filter);
    }
    if (optionalCreateOptions && optionalCreateOptions.stream && !optionalCreateOptions.filter) {
      this.withStream(optionalCreateOptions.stream);
    }
    if (optionalCreateOptions && optionalCreateOptions.events) {
      this.withEvents(optionalCreateOptions.events);
    }
    if (optionalCreateOptions && optionalCreateOptions.id) {
      this.withId();
    }
  }

  /**
   * @param {WebRTCData} data
   * @returns {undefined}
   */
  doHistory(data) {
    if (this.history) {
      this.history.addHistory(data);
    }
  }

  /**
   * @param {WebRTCData} data
   * @returns {undefined}
   */
  doInterval(data) {
    if (this.interval) {
      this.interval.updateInterval(data);
    }
  }

  /**
   * @param {WebRTCData} data
   * @returns {undefined}
   */
  doAggregator(data) {
    if (this.aggregator) {
      this.aggregator.aggregate(data);
    }
  }

  /**
   * @param {WebRTCData} data
   * @returns {undefined}
   */
  doEvents(data) {
    if (this.events) {
      this.events.event(data);
    }
  }

  /**
   * does all the work for the built properties
   * calls back a function with data from piped stream filter
   * @param {Function} cbFn
   * @returns {undefined}
   * @throws {Error} if the filter stream does not exist
   */
  onData(cbFn) {
    if (!this.filter) {
      throw new Error('The stats peer connection filter must be set up before data can be worked upon.');
    }
    this.filter.on('data', (filtered) => {
      this.doHistory(filtered);
      this.doInterval(filtered);
      this.doAggregator(filtered);
      this.doEvents(filtered);
      if (cbFn) {
        cbFn(filtered);
      }
    });
  }

  /**
   * constructs an event object on this instance
   * @param {String} id - the event payloads will all be sent with this id
   * @returns {MeetingStats}
   */
  withEvents() {
    const events = new StatsEvents(this.attrs, this.options);
    this.setEvents(events);
    return this;
  }

  /**
   * constructs a history object on this instance
   * @returns {MeetingStats}
   */
  withHistory() {
    const history = new StatsHistory();
    this.setHistory(history);
    return this;
  }

  /**
   * constructs a aggregator object on this instance
   * @returns {MeetingStats}
   */
  withAggregator() {
    const aggregator = new StatsAggregator();
    this.setAggregator(aggregator);
    return this;
  }

  /**
   * constructs a interval object on this instance
   * @returns {MeetingStats}
   */
  withInterval() {
    const interval = new StatsInterval();
    this.setInterval(interval);
    return this;
  }

  /**
   * constructs a stream object on this instance
   * @param {RTCPeerConnection} peerConnection
   * @returns {MeetingStats}
   */
  withStream(peerConnection) {
    const stream = new StatsStream(peerConnection);
    this.setStream(stream);
    return this;
  }

  /**
   * constructs a stream object on this instance
   * adds a filter on that stream, and pipes the stream into the filter
   * @param {RTCPeerConnection} peerConnection
   * @returns {MeetingStats}
   */
  withFilter(peerConnection) {
    const stream = new StatsStream(peerConnection);
    this.setStream(stream);
    const filter = new StatsFilter();
    this.setFilter(filter);
    stream.pipe(filter);
    return this;
  }

  /**
   * constructs an id to match this stats object
   * takes params as precedence
   * @param {String} id
   * @returns {MeetingStats}
   */
  withId(id) {
    if (id) {
      this.setId(id);
      return this;
    }
    const guid = uuid.v4();
    this.setId(guid);
    return this;
  }

  /**
   * @returns {MeetingStats}
   */
  build() {
    return this;
  }

  /**
   * @param {String} id
   * @returns {undefined}
   */
  setId(id) {
    this.id = id;
  }

  /**
   * @param {StatsHistory} history
   * @returns {undefined}
   */
  setHistory(history) {
    this.history = history;
  }

  /**
   * @param {StatsInterval} interval
   * @returns {undefined}
   */
  setInterval(interval) {
    this.interval = interval;
  }

  /**
   * @param {StatsAggregator} aggregator
   * @returns {undefined}
   */
  setAggregator(aggregator) {
    this.aggregator = aggregator;
  }

  /**
   * @param {StatsEvent} events
   * @returns {undefined}
   */
  setEvents(events) {
    this.events = events;
  }

  /**
   * @param {Readable} stream
   * @returns {undefined}
   */
  setStream(stream) {
    this.stream = stream;
  }

  /**
   * @param {Transform} filter
   * @returns {undefined}
   */
  setFilter(filter) {
    this.filter = filter;
  }

  /**
   * @returns {String}
   */
  getId() {
    return this.id;
  }

  /**
   * @returns {StatsHistory}
   */
  getHistory() {
    return this.history;
  }

  /**
   * @returns {StatsInterval}
   */
  getInterval() {
    return this.interval;
  }

  /**
   * @returns {StatsAggregator}
   */
  getAggregator() {
    return this.aggregator;
  }

  /**
   * @returns {StatsEvents}
   */
  getEvents() {
    return this.events;
  }

  /**
   * @returns {Readable}
   */
  getStream() {
    return this.stream;
  }

  /**
   * @returns {Transform}
   */
  getFilter() {
    return this.filter;
  }
}
