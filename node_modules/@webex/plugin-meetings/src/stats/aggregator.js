import {keys} from 'lodash';

import {DEFAULT_TRANSFORM_KEYS} from '../constants';
import StatsCalculator from '../stats/calculator';

/**
 * simply adds up the properties from filtered stream data
 */
export default class StatsAggregator {
  /**
   * @private
   * @param {Object} options
   * options.format -- the format to store the stats reports as in summary form
   * options.summary -- if it comes prebuilt with another summary
   */
  constructor(options = {format: DEFAULT_TRANSFORM_KEYS, summary: {}}) {
    this.summary = options.summary;
    if (keys(options.summary).length === 0) {
      options.format.forEach((key) => {
        this.summary[key] = {};
      });
    }
  }

  /**
   * @param {Array} format the keys to set up for the summary to fill in later
   * @returns {undefined}
   */
  setFormat(format) {
    this.clearSummary();
    format.forEach((key) => {
      this.summary[key] = {};
    });
  }

  /**
   * @returns {Object} the aggregated summary at time of call
   */
  get() {
    return this.summary;
  }

  /**
   * reset the summary
   * @returns {undefined}
   */
  clear() {
    this.summary = {};
  }

  /**
   * calculate a new aggregation based on the last summary and an incoming data point
   * @param {WebRTCData} data
   * @returns {undefined}
   */
  aggregate(data) {
    this.summary = StatsCalculator.aggregate(data, this.summary);
  }
}
