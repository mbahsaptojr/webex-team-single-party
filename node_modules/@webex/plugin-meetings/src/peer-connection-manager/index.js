/* eslint-disable */
// We need to figure out how to pass a spark logger instance to these util files

/* globals window, RTCSessionDescription */

import bowser from 'bowser';
import sdpTransform from 'sdp-transform'; // https://github.com/clux/sdp-transform

import {
  AUDIO_BANDWIDTH_LIMIT,
  VIDEO_BANDWIDTH_LIMIT,
  RTC_CONFIGURATION,
  RTC_CONFIGURATION_FIREFOX,
  RETRY_TIMEOUT,
  ICE_TIMEOUT,
  AUDIO,
  SDP,
  MEDIA_PEER_CONNECTION_NAME,
  SHARE_PEER_CONNECTION_NAME,
  ICE_STATE,
  ICE_FAIL_TIMEOUT
} from '../constants';

const PC = {};

const insertBandwidthLimit = (sdpLines, index) => {
  // eslint-disable-next-line no-warning-comments
  // TODO convert to sdp parser
  let limit;
  if (sdpLines[index].search(AUDIO) !== -1) {
    limit = AUDIO_BANDWIDTH_LIMIT;
  } else {
    limit = VIDEO_BANDWIDTH_LIMIT;
  }
  sdpLines.splice(index + 1, 0, `${SDP.B_LINE}:${limit}`);
  return sdpLines;
};

const setMaxFs = (sdp) => {
  // eslint-disable-next-line no-warning-comments
  // TODO convert with sdp parser, no munging
  let replaceSdp = sdp;
  const payloadTypes = sdp.match(/\na=fmtp:(\d+).*level-asymmetry-allowed=1.*/g);
  if (payloadTypes) {
    payloadTypes.forEach((payload) => {
      replaceSdp = replaceSdp.replace(payload, `${payload};${SDP.MAX_FS_8160}`);
    });
  }
  return replaceSdp;
};

const checkH264Support = (sdp) => {
  // eslint-disable-next-line no-warning-comments
  // TODO convert to sdp parser to read rtp.codec
  const videoPresent = sdp.match(/\nm=video.*/g);
  const h264Present = sdp.match(/\na=rtpmap:\d+\sH264.*/g);

  if (videoPresent) {
    return !!h264Present;
  }
  return true;
};

const validateSdp = (sdp) => {
  const parsedSdp = sdpTransform.parse(sdp);

  parsedSdp.media.forEach((mediaLine) => {
    if (mediaLine.candidates && mediaLine.candidates.length === 0) {
      console.error('iceCandidate: Ice candadate never completed');
      return false;
    }
    if (SDP.BAD_MEDIA_PORTS.includes(mediaLine.port)) {
      console.error('iceCandidate: Found invalid port number for the ice candidate');
      return false;
    }
    if (!mediaLine.icePwd || !mediaLine.iceUfrag) {
      console.error('iceCandidate: ice ufrag and password not found');
      return false;
    }
    return true;
  });
};

const limitBandwidth = (sdp) => {
  // TODO convert to sdp parser
  let offerSdp = sdp;
  let sdpLines = offerSdp.split(SDP.CARRIAGE_RETURN);

  for (let i = 0; i < sdpLines.length; i += 1) {
    if (sdpLines[i].search(SDP.M_LINE) !== -1) {
      sdpLines = insertBandwidthLimit(sdpLines, i);
    }
  }
  offerSdp = sdpLines.join(SDP.CARRIAGE_RETURN);
  return offerSdp;
};

PC.iceFailListener = (pc, fn, name) => {
  if (!pc) {
    return;
  }
  pc.oniceconnectionstatechange = () => {
    switch (pc.iceConnectionState) {
      case ICE_STATE.FAILED:
      case ICE_STATE.DISCONNECTED:
        console.error(`${name} Interactive Connectivity Establishment(ICE)${pc.iceConnectionState}!`, new Date());
        setTimeout(() => {
          switch (pc.iceConnectionState) {
            case ICE_STATE.FAILED:
            case ICE_STATE.DISCONNECTED:
              // if ice is still failed after some time, do the reconnect
              // else the browser resolves the ice failure on its own
              fn();
              break;
            default:
            break;
          }
        }, ICE_FAIL_TIMEOUT);
        break;
      default:
        break;
    }
  };
};

PC.detectFailures = (pc, spc, reconnectFn = () => {console.error('Ice failed, no function to reconnect with.')}) => {
  PC.iceFailListener(pc, reconnectFn, MEDIA_PEER_CONNECTION_NAME);
  PC.iceFailListener(spc, reconnectFn, SHARE_PEER_CONNECTION_NAME);
};

PC.setContentSlides = (screenPc) => {
  if (screenPc && screenPc.sdp) {
    screenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;
  }
  return screenPc;
};

/**
 * handles ice trickling and establishes ICE connection onto peer connection object
 * @param {Object} pc
 * @returns {RTCPeerConnection}
 */
PC.iceCandidate = (pc) =>
  new Promise((resolve) => {
    // TODO: we dont need timeout as we can check the api state and validate.
    const timeout = setTimeout(() => {
      pc.sdp = limitBandwidth(pc.localDescription.sdp);
      pc.sdp = setMaxFs(pc.sdp);
      pc.sdp = pc.sdp.replace(/\na=extmap.*/g, '');

      if (!validateSdp(pc.sdp)) {
        setTimeout(() => {
          resolve(pc);
        }, RETRY_TIMEOUT);
      } else {
        resolve(pc);
      }
    }, ICE_TIMEOUT);

    pc.onicecandidate = (evt) => {
      if (!evt.candidate && !pc.sdp) {
        pc.sdp = limitBandwidth(pc.localDescription.sdp);
        pc.sdp = setMaxFs(pc.sdp);
        pc.sdp = pc.sdp.replace(/\na=extmap.*/g, '');

        if (evt.candidate === null) {
          validateSdp(pc.sdp);
          clearTimeout(timeout);
          resolve(pc);
        }
      }
    };
  });

/**
 * swapping tracks
 * @param {Object} pc
 * @param {Object} track
 * @returns {undefined}
 */
PC.replaceTrack = (pc, track) => {
  try {
    const senders = pc.getSenders();
    if (senders.length > 0) {
      senders.forEach((sender) => {
        if (sender.track && sender.track.kind === track.kind) {
          sender.replaceTrack(track);
        }
      });
    }
  } catch (err) {
    console.error('replaceTrack: Error while replacing Tracks ', err);
  }
};

/**
 * adding streams to mediaPeerConnection
 * @param {Object} pc
 * @param {Object} stream
 * @returns {undefined}
 */
PC.addStream = (pc, stream) => {
  console.info('addStream: adding streams to peerconnection');

  try {
    if (stream && !bowser.msedge) {
      const tracksPresent = pc.getSenders && pc.getSenders().find((sender) => sender.track != null);
      if (tracksPresent) {
        stream.getTracks().forEach((track) => {
          PC.replaceTrack(pc, track);
        });
        return;
      }
      stream.getTracks().forEach((track) => {
        pc.addTrack(track, stream);
      });
      // // TODO : may come back disable addTracks for chrome they are moving back to addStream
      // // https://bugs.chromium.org/p/chromium/issues/detail?id=764414
      // // https://bugs.chromium.org/p/chromium/issues/detail?id=738918#c7
      //   pc.addStream(stream);
    } else if (bowser.msedge) {
      pc.addStream(stream);
    } else {
      console.error('addStream: No streams to add');
    }
  } catch (err) {
    console.error('addStream: Error while adding Stream ', err);
  }
};

/**
 * setting the remote description
 * @param {Object} pc
 * @param {String} typeStr
 * @param {String} remoteSdp
 * @returns {undefined}
 */
PC.setRemoteSessionDetails = (pc, typeStr, remoteSdp) => {
  const {sharePeerConnection} = pc;
  console.info(`Setting the remote description type: ${typeStr}State: ${pc.signalingState}`);
  const promiseSdp = [];
  let sdp = remoteSdp;

  sdp = sdp.replace(/\na=extmap.*/g, '');

  const mlines = sdp.split(SDP.M_LINE);
  if (mlines.length === 4 && sharePeerConnection) {
    sdp = `${mlines[0]}${SDP.M_LINE}${mlines[1]}${SDP.M_LINE}${mlines[2]}`;
    const contentSdp = `${mlines[0]}${SDP.M_LINE}${mlines[3]}`;
    promiseSdp.push(
      sharePeerConnection.setRemoteDescription(
        new window.RTCSessionDescription({
          type: typeStr,
          sdp: contentSdp
        })
      )
    );
  }

  // making sure that the remoteDescription is only set when there is a answer for offer
  // or there is a offer from the server
  if (pc.signalingState === SDP.HAVE_LOCAL_OFFER || (pc.signalingState === SDP.STABLE && typeStr === SDP.OFFER)) {
    promiseSdp.push(
      pc.setRemoteDescription(
        new window.RTCSessionDescription({
          type: typeStr,
          sdp
        })
      )
    );
  }
  return Promise.all(promiseSdp).catch((err) => {
    console.error('Error setting the remoteDescription', err);
    return Promise.reject(err);
  });
};

/**
 * create offer with a valid paramater
 * @param {Object} params
 * @returns {RTCPeerConnection}
 */
PC.createOffer = (params = {}) => {
  console.info('createOffer: creating a new offer');

  try {
    const pc =
      params.peerConnection ||
      new window.RTCPeerConnection(bowser.firefox ? RTC_CONFIGURATION_FIREFOX : RTC_CONFIGURATION);
    if (params.streams) {
      if (Array.isArray(params.streams)) {
        PC.addStream(pc, params.streams[0]);
      } else {
        PC.addStream(pc, params.streams);
      }
    }

    const sdpConstraints = {
      offerToReceiveAudio: params.receiveAudio,
      offerToReceiveVideo: params.receiveVideo
    };

    return pc
      .createOffer(sdpConstraints)
      .then((description) => pc.setLocalDescription(description))
      .then(() => PC.iceCandidate(pc))
      .then(() => {
        pc.sdp = limitBandwidth(pc.localDescription.sdp);
        pc.sdp = setMaxFs(pc.sdp);
        if (!checkH264Support(pc.sdp)) {
          throw new Error('openH264 is downloading please Wait. Upload logs if not working on second try');
        }

        pc.sdp = pc.sdp.replace(/\na=extmap.*/g, '');

        return pc;
      })
      .catch((err) => {
        PC.close(pc);
        throw err;
      });
  } catch (err) {
    console.error('createOffer: error while creating a offer ', err);
    throw err;
  }
};

/**
 * rollBack local description in peerconnection
 * @param {Object} pc
 * @returns {RTCPeerConnection}
 */
PC.rollBackLocalDescription = (pc) => {
  console.info('rollBackLocalDescription: rollingbacking peerconnection');

  return pc
    .setLocalDescription(new RTCSessionDescription({type: SDP.ROLLBACK}))
    .then(() => pc)
    .catch((err) => {
      console.error('rollBackLocalDescription: Error while setting the Local Description ', err);
      return Promise.error(err);
    });
};

/**
 * @param {Object} params {
 *  offerToReceiveAudio: {Boolean} sdp constraints
 *  offerToReceiveVideo: {Boolean} sdp constraints
 *  offerSdp: {sdp}
 *  stream: {PCStream}
 * }
 * @returns {Array} [MediaSDP, ScreenSDP]
 */
PC.updatePeerConnection = (params) => {
  console.info('updatePeerConnection: updating the pc');

  const {pc, sharePeerConnection} = params;

  const screenConstraints = {
    offerToReceiveAudio: false,
    offerToReceiveVideo: true
  };
  const sdpConstraints = {
    offerToReceiveAudio: params.offerToReceiveAudio,
    offerToReceiveVideo: params.offerToReceiveVideo
  };

  if (pc === undefined && sharePeerConnection) {
    return PC.createAnswer({
      pc: sharePeerConnection,
      screenConstraints,
      offerSdp: params.offerSdp[0]
    }).then((updatedScreenPc) => {
      updatedScreenPc.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;
      return [updatedScreenPc.sdp];
    });
  }

  return Promise.all([
    PC.createAnswer({
      pc,
      sdpConstraints,
      offerSdp: params.offerSdp[0]
    }),
    PC.createAnswer({
      pc: sharePeerConnection,
      offerSdp: params.offerSdp[1],
      sdpConstraints: screenConstraints
    })
  ]).then(([updatedPc, updatedScreenPc]) => {
    sharePeerConnection.sdp += `${SDP.A_CONTENT_SLIDES}${SDP.CARRIAGE_RETURN}`;
    return [updatedPc.sdp, updatedScreenPc.sdp];
  });
};

/**
 * @param {Object} params {
 *  pc: {Object} mediaPeerConnection
 *  sdpConstraints: {Object} sdp constraints
 * }
 * @returns {RTCPeerConnection} pc
 */
PC.createAnswer = (params) => {
  const {pc} = params;

  // TODO: Some times to many mercury event comes at the same time
  // Need to maintain state of peerconnection
  if (pc.signalingState === 'have-remote-offer') {
    return Promise.resolve(pc);
  }

  return PC.setRemoteSessionDetails(pc, 'offer', params.offerSdp)
    .then(() => pc.createAnswer(params.sdpConstraints))
    .then((answer) =>
      //   if (edonusHack()) {
      //     answer.sdp = answer.sdp.replace(/recvonly.*/g, 'sendrecv');
      //   }
      pc.setLocalDescription(answer)
    )
    .then(() => PC.iceCandidate(pc))
    .then(() => {
      pc.sdp = limitBandwidth(pc.localDescription.sdp);
      pc.sdp = setMaxFs(pc.sdp);
      if (!checkH264Support(pc.sdp)) {
        throw new Error('openH264 is downloading please Wait. Upload logs if not working on second try');
      }

      pc.sdp = pc.sdp.replace(/\na=extmap.*/g, '');

      return pc;
    })
    .catch((err) => {
      console.error('updatePeerConnection: error while updating the PC ', err);
    });
};

/**
 * shut down the peer connection
 * @param {Object} pc
 * @returns {undefined}
 */
PC.close = (pc) => {
  // pc.close() fails on firefox on network changes and gives a Dom exception
  // To avoid this we have added a try catch block.
  // Please refer to https://bugzilla.mozilla.org/show_bug.cgi?id=1274407 for more information
  console.info('PC: close() -> closing the mediaPeerConnection');
  return Promise.resolve()
    .then(() => {
      if (pc && pc.close) {
        pc.close();
      } else {
        console.warn('Peer connection has no close');
      }
    })
    .catch((err) => {
      console.error('Error Cleaning Up the PeerConnection', err);
    });
};

export default PC;
