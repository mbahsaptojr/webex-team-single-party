import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import {
  GET,
  API,
  RESOURCE
} from '../constants';

/**
 * @class MeetingRequest
 */
export default class MeetingRequest extends StatelessSparkPlugin {
  /**
     *  get all the active meetings for the user
     * @returns {Array} return locus array
    */
  getActiveMeetings() {
    return this.request({
      api: API.LOCUS,
      resource: RESOURCE.LOCI
    })
      .then((res) => this.determineRedirections(res.body))
      .catch((error) => {
        console.error('meeting-adapter: failed to get locus details error: ', error);
      });
  }

  // locus federation, determines and populate locus if the responseBody has remote URLs to fetch locus details

  /**
   *  Fetches indivdual locus rather then getting all at once
   * @param {object} responseBody determine the locus and fetch them if a remoteUrl is given
   * @returns {Promise}  returns locusObject array
   */
  determineRedirections(responseBody) {
    if (responseBody.remoteLocusClusterUrls && responseBody.remoteLocusClusterUrls.length) {
      return Promise.all(responseBody.remoteLocusClusterUrls.map((url) => this.request({
        method: GET,
        url,
        runWhitelistedDomains: true // allows auth token for whitelisted domain
      })
        .then((res) => {
          responseBody.loci.push(...res.body.loci);
          responseBody.locusUrls.push(...res.body.locusUrls);
        })
        .catch((error) => {
          console.error('failed to get locus details from: ', url, ' Reason: ', error);
        })))
        .then(() => Promise.resolve(responseBody));
    }
    return Promise.resolve(responseBody);
  }
}
