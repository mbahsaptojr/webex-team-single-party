/** *****
 *
 *
 *  Hey there. Glad you found your way here. Please be sure to alphabetize your constants.
 *
 *
 ****** */
export const AUDIO = 'audio';
export const AUDIO_BANDWIDTH_LIMIT = '64000';
export const AUDIO_INPUT = 'audioinput';
export const AUDIO_STATUS = 'audioStatus';
export const ALTERNATE_REDIRECT_TRUE = 'alternateRedirect=true';
export const ANSWER = 'ANSWER';
export const ALERT = 'alert';
export const ACTIVE = 'ACTIVE';

export const BUSY = 'BUSY';

export const CALL = 'call';
export const CREATED = 'CREATED';
export const CONFLICT = 'CONFLICT';
export const CORRELATION_ID = 'correlationId';
export const CONVERSATION_URL = 'CONVERSATION_URL';
export const CONVERSATIONS = 'conversations';
export const CALENDAR = 'calendar';
export const CALENDAR_EVENTS_API = 'calendarEvents';
export const CMR_MEETINGS = 'cmrmeetings';
export const CLAIM = 'claim';
export const CONTROLS = 'controls';
export const CONTENT = 'content';

export const DEVELOPMENT = 'development';
export const DECLINE = 'decline';

export const ERROR = 'ERROR';

export const GET = 'GET';

export const HECATE = 'hecate';
export const HTTPS_PROTOCOL = 'https://';

export const IDLE = 'IDLE';
export const ICE_TIMEOUT = 1000;
export const ICE_FAIL_TIMEOUT = 3000;
export const IN_LOBBY = 'IN_LOBBY';
export const IN_MEETING = 'IN_MEETING';
export const INCOMING = 'INCOMING';
export const INTENT_TO_JOIN = 2423005;


export const JOINED = 'JOINED';
export const JOIN = 'join';

export const LEAVE = 'leave';
export const LOCAL = 'local';
export const LOCI = 'loci';
export const LOCUS_ID = 'LOCUS_ID';
export const LOCUS_URL = 'locusUrl';
export const LEFT = 'LEFT';

export const MEETING_LINK = 'MEETING_LINK';
export const MEETINGS = 'Meetings';
export const MEETING = 'MEETING';
export const MEETING_CENTER = 'MEETING_CENTER';
export const MEETING_ID = 'MEETING_ID';
export const MEETINGINFO = 'meetingInfo';
export const MEDIA_SIP_URI = 'MEDIA_SIP_URI';
export const MEDIA = 'media';
export const MODERATOR_TRUE = true;
export const MODERATOR_FALSE = false;
export const MEDIA_PEER_CONNECTION_NAME = 'MediaPeerConnection';
export const MEET = 'meet';
export const MEET_M = 'm';

export const NOT_IN_MEETING = 'NOT_IN_MEETING';
export const NONE = 'NONE';

export const ONE_ON_ONE = 'ONE_ON_ONE';
export const OFFER = 'OFFER';
export const OBSERVE = 'OBSERVE';
export const OUTGOING = 'OUTGOING';
export const ONLINE = 'online';
export const OTHER = 'OTHER';

export const PARTICIPANT = 'participant';
export const PERSONAL_ROOM = 'PERSONAL_ROOM';
export const PUT = 'PUT';
export const POST = 'POST';

export const RETRY_TIMEOUT = 3000;
export const REMOTE = 'remote';
export const REQUESTED = 'REQUESTED';
export const _ANSWER_ = 'answer';
export const _ERROR_ = 'error';
export const _DATA_ = 'data';
export const _CLOSED_ = 'closed';
export const RTC_CONFIGURATION_FIREFOX = {iceServers: [], bundlePolicy: 'max-compat'};
export const RTC_CONFIGURATION = {iceServers: []};
export const RESOURCE_ROOM = 'RESOURCE_ROOM';
export const READY = 'ready';
export const RECEIVE_ONLY = 'RECVONLY';

export const SIP_URI = 'SIP_URI';
export const STOP = 'STOP';
export const SHARE_PEER_CONNECTION_NAME = 'SharePeerConnection';
export const SELF = 'SELF';
export const SEND_RECEIVE = 'SENDRECV';

export const TEMP_SIP_URI = 'TEMP_SIP_URI';
export const TYPE = 'type';

export const USE_URI_LOOKUP_FALSE = 'useUriLookup=false';
export const USER = 'USER';
export const UNKNOWN = 'UNKNOWN';

export const VALID_PMR_ADDRESS = /([a-z0-9][-a-z0-9, '.']{0,62})@([a-z0-9][-a-z0-9, '.']{0,62})\.webex\.com/i;
export const VALID_PMR_LINK = /(https:\/\/)?([a-z0-9][-a-z0-9, '.']{0,62})\.webex\.com\/(meet|join)\/([a-z0-9][-a-z0-9, '.']{0,62})\/?/i;
export const VALID_PIN = /([0-9]{4,6})/;
export const VIDEO = 'video';
export const VIDEO_BANDWIDTH_LIMIT = '4000000';
export const VIDEO_INPUT = 'videoinput';
export const VIDEO_STATUS = 'videoStatus';

export const WEBEX_DOT_COM = 'webex.com';
export const WEBEX_MEETING = 'WEBEX_MEETING';
export const WAIT = 'WAIT';
export const WWW_DOT = 'www.';


export const ERROR_DICTIONARY = {
  INTENT_TO_JOIN: {
    NAME: 'IntentToJoinError',
    MESSAGE: 'The meeting is locked. This is expected behavior. Call #join again with hostPin and/or moderator option',
    CODE: 1
  },
  JOIN_MEETING: {
    NAME: 'JoinMeetingError',
    MESSAGE: 'Meeting:index#join --> Error joining the call on getLocalMedia',
    CODE: 2
  },
  RECONNECTION: {
    NAME: 'ReconnectionError',
    MESSAGE: 'There was an error in the reconnection flow, the call may not reconnect, disconnect and dial again.',
    CODE: 3
  }
};

// TODO:  move all api params to API section
export const API = {
  CALLIOPEDISCOVERY: 'calliopeDiscovery',
  LOCUS: 'locus'
};

export const DIALER_REGEX = {
  // modified from https://github.com/kirm/sip.js base
  // and with https://tools.ietf.org/html/rfc3261
  // requires the @ symbol
  SIP_ADDRESS: /^(sips?)?:?(?:([^\s>:@]+)(?::([^\s@>]+))?@)([\w\-.]+)(?::(\d+))?((?:;[^\s=?>;]+(?:=[^\s?;]+)?)*)(?:\?(([^\s&=>]+=[^\s&=>]+)(&[^\s&=>]+=[^\s&=>]+)*))?$/,
  // standard telephony num regex
  PHONE_NUMBER: /^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/
};

export const CALENDAR_EVENTS = {
  CREATE: 'event:calendar.meeting.create',
  UPDATE: 'event:calendar.meeting.update',
  CREATE_MINIMAL: 'event:calendar.meeting.create.minimal',
  UPDATE_MINIMAL: 'event:calendar.meeting.update.minimal',
  DELETE: 'event:calendar.meeting.delete'
};

export const FLOOR_ACTION = {
  GRANTED: 'GRANTED',
  RELEASED: 'RELEASED'
};

export const MEETING_STATE_MACHINE = {
  TRANSITIONS: {
    ERROR: 'error',
    START: 'start',
    JOIN: 'join',
    JOINED: 'joined',
    LOCAL: 'local',
    CONNECT: 'connect',
    ESTABLISH: 'establish',
    LEAVE: 'leave',
    END: 'end',
    CLEAN: 'clean'
  },
  STATES: {
    IDLE: 'IDLE',
    INCOMING: 'INCOMING',
    DIALING: 'DIALING',
    ON_GOING: 'ON_GOING',
    CONNECTING_MEDIA_LOCAL: 'CONNECTING_MEDIA_LOCAL',
    CONNECTING_MEDIA_REMOTE: 'CONNECTING_MEDIA_REMOTE',
    ESTABLISHED_MEDIA: 'ESTABLISHED_MEDIA',
    TERMINATING: 'TERMINATING',
    ENDED: 'ENDED',
    ERROR: 'ERROR'
  }
};

export const LOCUS = {
  STATE: {
    INACTIVE: 'inactive'
  },
  SEQUENCE: {
    UN_DEF: 'undef',
    EMPTY: 'empty',
    DEF: 'def',
    NA: 'na',
    RANGE_START: 'rangeStart',
    RANGE_END: 'rangeEnd'
  },
  SYNCDEBUG: 'sync_debug'
};

export const LOCUSEVENT = {
  LOCUS_MERCURY: 'event:locus',

  // update the tp unit status
  CONTROLS_UPDATED: 'locus.controls_updated',

  // delta events
  DIFFERENCE: 'locus.difference',

  // screen sharing
  FLOOR_GRANTED: 'locus.floor_granted',
  FLOOR_RELEASED: 'locus.floor_released',

  // Roap
  MESSAGE_ROAP: 'locus.message.roap',

  // Join events
  PARTICIPANT_JOIN: 'locus.participant_joined',
  PARTICIPANT_LEFT: 'locus.participant_left',
  PARTICIPANT_DECLINED: 'locus.participant_declined',
  PARTICIPANT_UPDATED: 'locus.participant_updated',
  PARTICIPANT_CONTROLS_UPDATED: 'locus.participant_controls_updated',
  PARTICIPANT_ROLES_UPDATED: 'locus.participant_roles_updated',
  PARTICIPANT_AUDIO_MUTED: 'locus.participant_audio_muted',
  PARTICIPANT_AUDIO_UNMUTED: 'locus.participant_audio_unmuted',
  PARTICIPANT_VIDEO_MUTED: 'locus.participant_video_muted',
  PARTICIPANT_VIDEO_UNMUTED: 'locus.participant_video_unmuted',

  RECORDING_STARTED: 'locus.recording_started',
  RECORDING_START_FAILED: 'locus.recording_start_failed',
  RECORDING_STOPPED: 'locus.recording_stopped',

  SELF_CHANGED: 'locus.self_changed'
};

export const RECONNECTION = {
  STATE: {
    IN_PROGRESS: 'IN_PROGRESS',
    COMPLETE: 'COMPLETE',
    FAILURE: 'FAILURE',
    DEFAULT_TRY_COUNT: 0,
    DEFAULT_STATUS: ''
  }
};

// TODO: do we want to scope by meeting, members when they come off those objects themselves?
export const EVENT_TRIGGERS = {
  MEETINGS_READY: 'meetings:ready',
  MEDIA_AUDIO_CHANGED: 'media:audioChanged',
  MEDIA_VIDEO_CHANGED: 'media:videoChanged',
  MEDIA_READY: 'media:ready',
  MEDIA_STOPPED: 'media:stopped',
  MEDIA_UPDATE: 'media:update',
  STATS_UPDATE: 'stats:update',
  MEETING_ADDED: 'meeting:added',
  MEETING_REMOVED: 'meeting:removed',
  MEETING_RINGING: 'meeting:ringing',
  MEETING_SELF_LOBBY_WAITING: 'meeting:self:lobbyWaiting',
  MEETING_SELF_GUEST_ADMITTED: 'meeting:self:guestAdmitted',
  MEMBERS_UPDATE: 'members:update',
  MEMBERS_CONTENT_UPDATE: 'members:content:update',
  MEMBERS_HOST_UPDATE: 'members:host:update',
  MEMBERS_SELF_UPDATE: 'members:self:update',
  MEETING_RECONNECTION_STARTING: 'meeting:reconnectionStarting',
  MEETING_RECONNECTION_SUCCESS: 'meeting:reconnectionSuccess',
  MEETING_RECONNECTION_FAILURE: 'meeting:reconnectionFailure'
};

export const EVENT_STATS_MAP = {
  BYTES_SENT: 'bytesSent',
  BYTES_RECEIVED: 'bytesReceived'
};

export const EVENT_TYPES = {
  SELF: 'self',
  OTHER: 'other',
  LOCAL: 'local',
  REMOTE: 'remote',
  REMOTE_SHARE: 'remoteShare',
  LOCAL_SHARE: 'localShare',
  ERROR: 'error'
};

export const DELTAEVENT = {
  GT: 'GT',
  CF: 'CF',
  EQ: 'EQ',
  LT: 'LT'
};

export const MEETING_AUDIO_STATE_MACHINE = {
  TRANSITIONS: {
    TOGGLE: 'toggle',
    INIT: 'init'
  },
  STATES: {
    MUTE_SELF: 'SELF_AUDIO_OFF',
    UNMUTE_SELF: 'SELF_AUDIO_ON'
  }
};

export const MEETING_VIDEO_STATE_MACHINE = {
  TRANSITIONS: {
    TOGGLE: 'toggle',
    INIT: 'init'
  },
  STATES: {
    MUTE_SELF: 'SELF_VIDEO_OFF',
    UNMUTE_SELF: 'SELF_VIDEO_ON'
  }
};

export const SDP = {
  A_CONTENT_SLIDES: 'a=content:slides',
  ROLLBACK: 'rollback',
  HAVE_LOCAL_OFFER: 'have-local-offer',
  STABLE: 'stable',
  OFFER: 'offer',
  M_LINE: 'm=',
  MAX_FS_8160: 'max-fs=8160',
  B_LINE: 'b=TIAS',
  CARRIAGE_RETURN: '\r\n',
  BAD_MEDIA_PORTS: [9, 0]
};

export const ICE_STATE = {
  CHECKING: 'checking',
  CONNECTED: 'connected',
  FAILED: 'failed',
  DISCONNECTED: 'disconnected'
};

export const RESOURCE = {
  CLUSTERS: 'clusters',
  REACHABILITY: 'reachability',
  LOCI: 'loci'
};

export const REACHABILITY = {
  localStorage: 'reachability.result'
};

export const ROAP = {
  ROAP_TRANSITIONS: {
    STEP: 'step'
  },
  ROAP_TYPES: {
    OFFER: 'OFFER',
    ANSWER: 'ANSWER',
    OK: 'OK',
    ERROR: 'ERROR',
    SHUTDOWN: 'SHUTDOWN',
    OFFER_REQUEST: 'OFFER_REQUEST'
  },
  ROAP_STATE: {
    INIT: 'INIT',
    WAIT_RX_OFFER: 'WAIT_RX_OFFER',
    WAIT_RX_ANSWER: 'WAIT_RX_ANSWER',
    WAIT_RX_OK: 'WAIT_RX_OK',
    WAIT_TX_OFFER: 'WAIT_TX_OFFER',
    WAIT_TX_ANSWER: 'WAIT_TX_ANSWER',
    WAIT_TX_OK: 'WAIT_TX_OK',
    IDLE_LOCAL_OFFER: 'IDLE_LOCAL_OFFER',
    IDLE_REMOTE_OFFER: 'IDLE_REMOTE_OFFER',
    GLARE: 'GLARE',
    ERROR: 'ERROR'
  },
  ROAP_SIGNAL: {
    RX_OFFER: 'RX_OFFER',
    TX_OFFER: 'TX_OFFER',
    RX_ANSWER: 'RX_ANSWER',
    TX_ANSWER: 'TX_ANSWER',
    RX_OK: 'RX_OK',
    TX_OK: 'TX_OK',
    GLARE_RESOLVED: 'GLARE_RESOLVED'
  },
  RECEIVE_ROAP_MSG: 'RECEIVE_ROAP_MSG',
  SEND_ROAP_MSG: 'SEND_ROAP_MSG',
  SEND_ROAP_MSG_SUCCESS: 'SEND_ROAP_MSG_SUCCESS',
  RESET_ROAP_STATE: 'RESET_ROAP_STATE',
  RECEIVE_CALL_LEAVE: 'RECEIVE_CALL_LEAVE',
  ROAP_MERCURY: 'event:locus.message.roap',
  ROAP_VERSION: '2',
  RX_: 'RX_',
  TX_: 'TX_'
};

export const EVENTS = {
  ROAP_OK: 'ROAP_OK',
  ROAP_ANSWER: 'ROAP_ANSWER',
  SELF_UNADMITTED_GUEST: 'SELF_UNADMITTED_GUEST',
  SELF_ADMITTED_GUEST: 'SELF_ADMITTED_GUEST',
  CONVERSATION_URL_UPDATE: 'CONVERSATION_URL_UPDATE',
  DESTROY_MEETING_DECLINE_1_1: 'DESTROY_MEETING_DECLINE_1_1',
  LOCUS_INFO_UPDATE_PARTICIPANTS: 'LOCUS_INFO_UPDATE_PARTICIPANTS',
  LOCUS_INFO_UPDATE_HOST: 'LOCUS_INFO_UPDATE_HOST',
  LOCUS_INFO_UPDATE_MEDIA_SHARES: 'LOCUS_INFO_UPDATE_MEDIA_SHARES',
  LOCUS_INFO_UPDATE_SELF: 'LOCUS_INFO_UPDATE_SELF',
  LOCUS_INFO_UPDATE_URL: 'LOCUS_INFO_UPDATE_URL'
};

// TODO: move to config?
export const DEFAULT_GET_STATS_FILTER = {
  types: ['track', 'transport', 'candidate-pair', 'outbound-rtp', 'outboundrtp', 'inbound-rtp', 'inboundrtp']
};
export const DEFAULT_EVENT_VIDEO_SEND_KEYS = ['rtpOutVideo', 'rtcOutVideo', 'rtcTransVideo'];
export const DEFAULT_EVENT_AUDIO_SEND_KEYS = ['rtpOutAudio', 'rtcOutAudio', 'rtcTransAudio'];
export const DEFAULT_EVENT_VIDEO_RECEIVE_KEYS = ['rtpInVideo', 'rtcInVideo', 'rtcTransVideo'];
export const DEFAULT_EVENT_AUDIO_RECEIVE_KEYS = ['rtpInAudio', 'rtcInAudio', 'rtcTransAudio'];
export const DEFAULT_TRANSFORM_KEYS = [
  'rtpOutVideo',
  'rtpOutAudio',
  'rtpInVideo',
  'rtpInAudio',
  'rtcOutAudio',
  'rtcOutVideo',
  'rtcInAudio',
  'rtcInVideo',
  'rtcTransAudio',
  'rtcTransVideo',
  'rtcCandidatePairAudio',
  'rtcCandidatePairVideo'
];
export const DEFAULT_TRANSFORM_REGEX = {
  rtpOutVideo: {
    regex: new RegExp('^(?:RTC)?[Oo]utbound_?[Rr][Tt][Pp]_?[Vv]ideo')
  },
  rtpOutAudio: {
    regex: new RegExp('^(?:RTC)?[Oo]utbound_?[Rr][Tt][Pp]_?[Aa]udio')
  },
  rtpInVideo: {
    regex: new RegExp('^(?:RTC)?[Ii]nbound_?[Rr][Tt][Pp]_?[Vv]ideo')
  },
  rtpInAudio: {
    regex: new RegExp('^(?:RTC)?[Ii]nbound_?[Rr][Tt][Pp]_?[Aa]udio')
  },
  rtcOutAudio: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:local|sender)_'),
    profiler: {
      type: 'kind',
      value: 'audio'
    }
  },
  rtcOutVideo: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:local|sender)_'),
    profiler: {
      type: 'kind',
      value: 'video'
    }
  },
  rtcInAudio: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:remote|receiver)_'),
    profiler: {
      type: 'kind',
      value: 'audio'
    }
  },
  rtcInVideo: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:remote|receiver)_'),
    profiler: {
      type: 'kind',
      value: 'video'
    }
  },
  rtcTransAudio: {
    regex: new RegExp('^RTCTransport_[Aa]udio')
  },
  rtcTransVideo: {
    regex: new RegExp('^RTCTransport_[Vv]ideo')
  },
  rtcCandidatePairAudio: {
    regex: new RegExp('^RTCIceCandidatePair_'),
    decider: 'nominated',
    selector: true,
    profiler: {
      type: 'transportId',
      value: 'audio'
    }
  },
  rtcCandidatePairVideo: {
    regex: new RegExp('^RTCIceCandidatePair_'),
    decider: 'nominated',
    selector: true,
    profiler: {
      type: 'transportId',
      value: 'video'
    }
  }
};
export const DEFAULT_STATS_INTERVAL = 1000;
export const DEFAULT_STATS_HISTORY_MAX = 1800;
export const DEFAULT_EXCLUDED_STATS = ['timestamp', 'ssrc', 'priority'];
