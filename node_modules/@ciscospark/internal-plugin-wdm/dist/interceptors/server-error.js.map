{"version":3,"sources":["server-error.js"],"names":["ServerErrorInterceptor","options","reason","SparkHttpError","InternalServerError","uri","feature","spark","internal","device","features","developer","get","value","metrics","submitClientMetrics","fields","success","tags","action","error","message","url","markUrlFailedAndGetNew","then","reject","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AACA;;;;AACA;;;AANA;;;;IASqBA,sB;;;;;;;;;;;;AAUnB;;;;;;oCAMgBC,O,EAASC,M,EAAQ;AAC/B,UAAKA,kBAAkBC,0BAAeC,mBAAlC,IAA0DH,QAAQI,GAAtE,EAA2E;AACzE,YAAMC,UAAU,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,QAA3B,CAAoCC,SAApC,CAA8CC,GAA9C,CAAkD,kBAAlD,CAAhB;AACA,YAAIN,WAAWA,QAAQO,KAAvB,EAA8B;AAC5B,eAAKN,KAAL,CAAWC,QAAX,CAAoBM,OAApB,CAA4BC,mBAA5B,CAAgD,QAAhD,EAA0D;AACxDC,oBAAQ,EAACC,SAAS,KAAV,EADgD;AAExDC,kBAAM,EAACC,QAAQ,QAAT,EAAmBC,OAAOlB,OAAOmB,OAAjC,EAA0CC,KAAKrB,QAAQI,GAAvD;AAFkD,WAA1D;;AAKA,iBAAO,KAAKE,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2Bc,sBAA3B,CAAkDtB,QAAQI,GAA1D,EACJmB,IADI,CACC;AAAA,mBAAM,kBAAQC,MAAR,CAAevB,MAAf,CAAN;AAAA,WADD,CAAP;AAED;AACF;AACD,aAAO,kBAAQuB,MAAR,CAAevB,MAAf,CAAP;AACD;;;;AA7BD;;;6BAGgB;AACd;AACA,aAAO,IAAIF,sBAAJ,CAA2B,EAACO,OAAO,IAAR,EAA3B,CAAP;AACD;;;EAPiDmB,qB;;kBAA/B1B,sB","file":"server-error.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\nimport {SparkHttpError} from '@ciscospark/spark-core';\n/**\n * Changes server url when it fails\n */\nexport default class ServerErrorInterceptor extends Interceptor {\n  /**\n  * @returns {HAMessagingInterceptor}\n  */\n  static create() {\n    // eslint-disable-next-line no-invalid-this\n    return new ServerErrorInterceptor({spark: this});\n  }\n\n\n  /**\n   * @see Interceptor#onResponseError\n   * @param {Object} options\n   * @param {Object} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    if ((reason instanceof SparkHttpError.InternalServerError) && options.uri) {\n      const feature = this.spark.internal.device.features.developer.get('web-ha-messaging');\n      if (feature && feature.value) {\n        this.spark.internal.metrics.submitClientMetrics('web-ha', {\n          fields: {success: false},\n          tags: {action: 'failed', error: reason.message, url: options.uri}\n        });\n\n        return this.spark.internal.device.markUrlFailedAndGetNew(options.uri)\n          .then(() => Promise.reject(reason));\n      }\n    }\n    return Promise.reject(reason);\n  }\n}\n"]}