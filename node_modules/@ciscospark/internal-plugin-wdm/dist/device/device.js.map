{"version":3,"sources":["device.js"],"names":["decider","config","ephemeral","Device","SparkPlugin","extend","children","features","FeaturesModel","collections","serviceCatalog","ServiceCollection","idAttribute","namespace","props","clientMessagingGiphy","customerCompanyName","customerLogoUrl","deviceType","helpUrl","intranetInactivityDuration","intranetInactivityCheckUrl","ecmEnabledForAllUsers","type","default","ecmSupportedStorageProviders","modificationTime","partnerCompanyName","partnerLogoUrl","reportingSiteDesc","reportingSiteUrl","searchEncryptionKeyUrl","services","serviceHostMap","serviceLinks","hostCatalog","showSupportText","supportProviderCompanyName","supportProviderLogoUrl","url","userId","webFileShareControl","webSocketUrl","whiteboardFileShareControl","derived","registered","deps","fn","Boolean","session","logoutTimer","lastUserActivityDate","determineService","feature","developer","get","value","key","serviceUrl","startsWith","resolve","substr","length","reject","Error","getServiceUrl","service","_getServiceUrl","then","isServiceUrl","getPreDiscoveryServiceUrl","preDiscoveryServices","getWebSocketUrl","useServiceCatalogUrl","uri","inferServiceFromUrl","s","replaceUrlWithCurrentHost","markUrlFailedAndGetNew","logger","info","markFailedAndCycleUrl","spark","internal","metrics","submitClientMetrics","tags","action","failedUrl","newUrl","catch","_resetAllAndRetry","resetAllAndRetry","fetchNewUrls","refresh","on","initialize","args","prototype","forEach","collectionName","model","options","trigger","_updateServiceCatalog","listenToAndRun","_resetLogoutTimer","listenTo","Date","now","inspect","depth","util","serialize","isPreDiscoveryService","_isService","isPreDiscoveryServiceUrl","_isServiceUrl","isService","_isServiceUrlFromCatalog","isSpecificService","includes","target","hostName","Url","parse","hostname","availableHost","host","register","body","ttl","ephemeralDeviceTTL","request","method","res","_processRegistrationSuccess","reason","statusCode","clear","defaults","resource","unregister","warn","clearTimeout","refreshTimer","set","delay","newRegistration","hosts","defaultUrl","availableHosts","remove","off","unset","enableInactivityEnforcement","timer","headers","trackingid","logout","oneFlight"],"mappings":"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","file":"device.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {oneFlight} from '@ciscospark/common';\nimport {safeSetTimeout} from '@ciscospark/common-timers';\nimport {omit, find} from 'lodash';\nimport util from 'util';\nimport FeaturesModel from './features-model';\nimport ServiceCollection from './service-collection';\nimport {persist, waitForValue, SparkPlugin} from '@ciscospark/spark-core';\nimport Url from 'url';\n\n/**\n * Decides if this device should be persisted to boundedStorage, based on\n * this.config.ephemeral.\n * @returns {Boolean}\n */\nfunction decider() {\n  return !this.config.ephemeral;\n}\n\nconst Device = SparkPlugin.extend({\n  children: {\n    features: FeaturesModel\n  },\n\n  collections: {\n    serviceCatalog: ServiceCollection\n  },\n\n  idAttribute: 'url',\n\n  namespace: 'Device',\n\n  props: {\n    /**\n     * Notifies the client if giphys are enabled.\n     * Currently, the values for it are:\n     * - ALLOW\n     * - BLOCK\n     * @instance\n     * @memberof Device\n     * @type {string}\n     */\n    clientMessagingGiphy: 'string',\n    customerCompanyName: 'string',\n    customerLogoUrl: 'string',\n    // deviceType doesn't have any real value, but we need to send it during\n    // device refresh to make sure we don't get back an ios device url\n    deviceType: 'string',\n    helpUrl: 'string',\n    intranetInactivityDuration: 'number',\n    intranetInactivityCheckUrl: 'string',\n    /**\n     * Is ECM (external content management) enabled for the whole org\n     * @instance\n     * @memberof Device\n     * @type {boolean}\n     */\n    ecmEnabledForAllUsers: {\n      type: 'boolean',\n      default: () => false\n    },\n    /**\n     * What ECM providers are available\n     * @instance\n     * @memberof Device\n     * @type {string[]}\n     */\n    ecmSupportedStorageProviders: {\n      type: 'array',\n      default: () => []\n    },\n    modificationTime: 'string',\n    partnerCompanyName: 'string',\n    partnerLogoUrl: 'string',\n    reportingSiteDesc: 'string',\n    reportingSiteUrl: 'string',\n    searchEncryptionKeyUrl: 'string',\n    // services is obsoleted and will be deprecated\n    services: {\n      // Even though @jodykstr will tell you the docs claim you don't need to\n      // initialize `object` properties, the docs lie.\n      default() {\n        return {};\n      },\n      type: 'object'\n    },\n    serviceHostMap: {\n      default() {\n        return {\n          serviceLinks: {},\n          hostCatalog: {}\n        };\n      },\n      type: 'object'\n    },\n    showSupportText: 'boolean',\n    supportProviderCompanyName: 'string',\n    supportProviderLogoUrl: 'string',\n    url: 'string',\n    userId: 'string',\n    /**\n     * Notifies the client if file sharing is disabled.\n     * Currently, the values for it are:\n     * - BLOCK_BOTH\n     * - BLOCK_UPLOAD\n     * @instance\n     * @memberof Device\n     * @type {string}\n     */\n    webFileShareControl: 'string',\n    webSocketUrl: 'string',\n    /**\n     * Notifies the client if whiteboarding should be allowed\n     * regardless of webFileShareControl settings.\n     * Currently, the values for it are:\n     * - ALLOW\n     * - BLOCK\n     * @instance\n     * @memberof Device\n     * @type {string}\n     */\n    whiteboardFileShareControl: 'string'\n  },\n\n  derived: {\n    registered: {\n      deps: ['url'],\n      fn() {\n        return Boolean(this.url);\n      }\n    }\n  },\n\n  session: {\n    // Fun Fact: setTimeout returns a Timer object instead of a Number in Node 6\n    // or later\n    logoutTimer: 'any',\n    lastUserActivityDate: 'number'\n  },\n\n  @waitForValue('@')\n  determineService(url) {\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      for (const key of Object.keys(this.serviceHostMap.serviceLinks)) {\n        const serviceUrl = this.serviceHostMap.serviceLinks[key];\n        if (url.startsWith(serviceUrl)) {\n          return Promise.resolve(key);\n        }\n      }\n    }\n    else {\n      for (const key of Object.keys(this.services)) {\n        const serviceUrl = this.services[key];\n        if (url.startsWith(serviceUrl)) {\n          // \"ServiceUrl\" is 10 characters\n          return Promise.resolve(key.substr(0, key.length - 10));\n        }\n      }\n    }\n    return Promise.reject(new Error(`${url} does not reflect a known service`));\n  },\n\n  @waitForValue('@')\n  getServiceUrl(service) {\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      return this._getServiceUrl(this.serviceHostMap.serviceLinks, service)\n        .then((isServiceUrl) => isServiceUrl || this.getPreDiscoveryServiceUrl(service));\n    }\n    return this._getServiceUrl(this.services, service)\n      .then((isServiceUrl) => isServiceUrl || this.getPreDiscoveryServiceUrl(service));\n  },\n\n  getPreDiscoveryServiceUrl(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._getServiceUrl(this.config.preDiscoveryServices, service));\n  },\n\n  getWebSocketUrl() {\n    return this.useServiceCatalogUrl(this.webSocketUrl);\n  },\n\n  useServiceCatalogUrl(uri) {\n    return this.serviceCatalog.inferServiceFromUrl(uri)\n      .then((s) => s.replaceUrlWithCurrentHost(uri));\n  },\n\n  markUrlFailedAndGetNew(url) {\n    if (!url) {\n      return Promise.reject(new Error('`url` is a required parameter'));\n    }\n\n    this.logger.info(`device: marking ${url} as failed`);\n    return this.serviceCatalog.markFailedAndCycleUrl(url)\n      .then((uri) => {\n        this.spark.internal.metrics.submitClientMetrics('web-ha', {\n          tags: {\n            action: 'replace_url',\n            failedUrl: url,\n            newUrl: uri\n          }\n        });\n        return uri;\n      })\n      // it's likely we fail here because we've cycled though all hosts,\n      // reset all hosts and then retry connecting\n      .catch(() => this._resetAllAndRetry(url));\n  },\n\n  _resetAllAndRetry(url) {\n    if (!url) {\n      return Promise.reject(new Error('`url` is a required parameter'));\n    }\n\n    this.logger.info(`device: reset available hosts and retry ${url}`);\n    return this.serviceCatalog.resetAllAndRetry(url);\n  },\n\n  // this function is exposed beyond the device file\n  fetchNewUrls(url) {\n    // we want to get the current service first, just in case the\n    // refreshed catalog has different host names\n    return new Promise((resolve) => this.serviceCatalog.inferServiceFromUrl(url)\n      .then((s) => {\n        this.logger.info(`device: refresh to ${s.service} get new urls`);\n        this.refresh();\n        this.on('serviceCatalogUpdated', () => resolve(s.url));\n      }));\n  },\n\n  @persist('@', decider)\n  initialize(...args) {\n    Reflect.apply(SparkPlugin.prototype.initialize, this, args);\n\n    // Propagate change(:[attribute]) events from collections\n    ['developer', 'entitlement', 'user'].forEach((collectionName) => {\n      this.features.on(`change:${collectionName}`, (model, value, options) => {\n        this.trigger('change', this, options);\n        this.trigger('change:features', this, this.features, options);\n      });\n    });\n\n    this.on('change:serviceHostMap', this._updateServiceCatalog);\n\n    this.listenToAndRun(this, 'change:intranetInactivityCheckUrl', () => this._resetLogoutTimer());\n    this.listenToAndRun(this, 'change:intranetInactivityDuration', () => this._resetLogoutTimer());\n    this.listenTo(this.spark, 'user-activity', () => { this.lastUserActivityDate = Date.now(); });\n  },\n\n  /**\n   * Don't log the features object\n   * @param {number} depth\n   * @returns {Object}\n   */\n  inspect(depth) {\n    return util.inspect(omit(this.serialize(), 'features'), {depth});\n  },\n\n  isPreDiscoveryService(service) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isService(this.config.preDiscoveryServices, service));\n  },\n\n  isPreDiscoveryServiceUrl(uri) {\n    if (!uri) {\n      return Promise.reject(new Error('`uri` is a required parameter'));\n    }\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    return Promise.resolve(this._isServiceUrl(this.config.preDiscoveryServices, uri));\n  },\n\n  @waitForValue('@')\n  isService(service) {\n    if (service === 'idbroker') {\n      return Promise.resolve(false);\n    }\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      return this._isService(this.serviceHostMap.serviceLinks, service)\n        .then((_isService) => _isService || this.isPreDiscoveryService(service));\n    }\n    return this._isService(this.services, service)\n      .then((_isService) => _isService || this.isPreDiscoveryService(service));\n  },\n\n  @waitForValue('@')\n  isServiceUrl(uri) {\n    // The Promise.resolve here is temporary. A future PR will make the\n    // corresponding _ method async to allow for lazy device registration\n    if (!uri) {\n      return Promise.reject(new Error('`uri` is a required parameter'));\n    }\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      if (this._isServiceUrl(this.serviceHostMap.serviceLinks, uri)\n        || this._isServiceUrlFromCatalog(this.serviceHostMap.hostCatalog, uri)) {\n        return Promise.resolve(true);\n      }\n      return Promise.resolve(false);\n    }\n    return Promise.resolve(this._isServiceUrl(this.services, uri));\n  },\n\n  @waitForValue('@')\n  isSpecificService(service, key) {\n    if (key === service) {\n      return Promise.resolve(true);\n    }\n\n    return this.getServiceUrl(service)\n      .then((serviceUrl) => key.includes(serviceUrl));\n  },\n\n  _getServiceUrl(target, service) {\n    /* istanbul ignore if */\n    if (!service) {\n      return Promise.reject(new Error('`service` is a required parameter'));\n    }\n\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      const s = this.serviceCatalog.get(service);\n      if (s) {\n        return Promise.resolve(s.url);\n      }\n    }\n\n    if (!target) {\n      return Promise.reject(new Error('`target` is a required parameter'));\n    }\n\n    return Promise.resolve(target[`${service}ServiceUrl`]);\n  },\n\n  _isService(target, service) {\n    return this._getServiceUrl(target, service)\n      .then((url) => Boolean(url));\n  },\n\n  _isServiceUrl(target, uri) {\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      for (const key of Object.keys(target)) {\n        const serviceUrl = target[key];\n        if (key !== 'idbroker' && uri.startsWith(serviceUrl)) {\n          return true;\n        }\n      }\n    }\n    else {\n      for (const value of Object.values(target)) {\n        if (value && uri.startsWith(value)) {\n          return Promise.resolve(true);\n        }\n      }\n    }\n    return false;\n  },\n\n  _isServiceUrlFromCatalog(hostCatalog, uri) {\n    const hostName = Url.parse(uri).hostname;\n    if (hostName && !hostName.includes('idbroker')\n      && find(hostCatalog, (service) => find(service, (availableHost) => availableHost.host === hostName))) {\n      return true;\n    }\n    return false;\n  },\n\n  @oneFlight\n    @waitForValue('@')\n  refresh() {\n    this.logger.info('device: refreshing');\n\n    if (!this.registered) {\n      this.logger.info('device: device not registered, registering');\n      return this.register();\n    }\n\n    const body = omit(this.serialize(), 'features', 'mediaClusters');\n    if (this.config.ephemeral) {\n      body.ttl = this.config.ephemeralDeviceTTL;\n    }\n\n    return this.request({\n      method: 'PUT',\n      uri: this.url,\n      body\n    })\n      .then((res) => this._processRegistrationSuccess(res))\n      .catch((reason) => {\n        if (reason.statusCode === 404) {\n          // If we get a 404, it means the device is no longer valid and we need\n          // to register a new one.\n          this.logger.info('device: refresh failed with 404, attempting to register new device');\n          this.clear();\n          return this.register();\n        }\n        return Promise.reject(reason);\n      });\n  },\n\n  @oneFlight\n    @waitForValue('@')\n  register() {\n    /* eslint no-invalid-this: [0] */\n    this.logger.info('device: registering');\n\n    if (this.registered) {\n      this.logger.info('device: device already registered, refreshing');\n      return this.refresh();\n    }\n\n    const body = this.config.defaults;\n    if (this.config.ephemeral) {\n      body.ttl = this.config.ephemeralDeviceTTL;\n    }\n\n    return this.request({\n      method: 'POST',\n      service: 'wdm',\n      resource: 'devices',\n      body\n    })\n      .then((res) => this._processRegistrationSuccess(res));\n  },\n\n  @oneFlight\n    @waitForValue('@')\n  unregister() {\n    this.logger.info('device: unregistering');\n\n    if (!this.url) {\n      this.logger.warn('device: not registered');\n      return Promise.resolve();\n    }\n\n    return this.request({\n      uri: this.url,\n      method: 'DELETE'\n    })\n      .then(() => this.clear());\n  },\n\n  clear(...args) {\n    clearTimeout(this.refreshTimer);\n    Reflect.apply(SparkPlugin.prototype.clear, this, args);\n  },\n\n  _processRegistrationSuccess(res) {\n    this.logger.info('device: received registration payload');\n    this.set(res.body);\n    if (this.config.ephemeral) {\n      this.logger.info('device: enqueing device refresh');\n      const delay = (this.config.ephemeralDeviceTTL / 2 + 60) * 1000;\n      this.refreshTimer = safeSetTimeout(() => this.refresh(), delay);\n    }\n  },\n\n  _updateServiceCatalog(newRegistration) {\n    const feature = this.features.developer.get('web-ha-messaging');\n    if (feature && feature.value) {\n      if (newRegistration.serviceHostMap\n        && newRegistration.serviceHostMap.serviceLinks\n        && newRegistration.serviceHostMap.hostCatalog) {\n        Object.keys(newRegistration.serviceHostMap.serviceLinks).forEach((key) => {\n          const hostName = Url.parse(newRegistration.serviceHostMap.serviceLinks[key]).hostname;\n          const hosts = newRegistration.serviceHostMap.hostCatalog[hostName];\n          this.serviceCatalog.set({\n            service: key,\n            defaultUrl: newRegistration.serviceHostMap.serviceLinks[key],\n            availableHosts: hosts || []\n          }, {remove: false});\n        });\n        this.trigger('serviceCatalogUpdated');\n      }\n      else {\n        // if user has old device in localStorage, refresh device\n        this.refresh();\n      }\n    }\n  },\n\n  _resetLogoutTimer() {\n    clearTimeout(this.logoutTimer);\n    this.off('change:lastUserActivityDate'); // removes previous event listener\n    this.unset('logoutTimer');\n    if (this.config.enableInactivityEnforcement && this.intranetInactivityCheckUrl && this.intranetInactivityDuration) {\n      this.on('change:lastUserActivityDate', () => this._resetLogoutTimer());\n      const timer = safeSetTimeout(() => {\n        this.spark.request({\n          headers: {\n            'cisco-no-http-redirect': null,\n            'spark-user-agent': null,\n            trackingid: null\n          },\n          method: 'GET',\n          uri: this.intranetInactivityCheckUrl\n        })\n          .catch(() => {\n            this.logger.info('device: did not reach internal ping endpoint; logging out after inactivity on a public network');\n            return this.spark.logout();\n          })\n          .catch((reason) => {\n            this.logger.warn('device: logout failed', reason);\n          });\n      }, this.intranetInactivityDuration * 1000);\n\n      this.logoutTimer = timer;\n    }\n  }\n});\n\nexport default Device;\n"]}