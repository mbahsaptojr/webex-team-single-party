import {readonly} from 'core-decorators';
import AmpEvents from 'ampersand-events';

// hold onto weak references to parent' Sparks to help avoid retain cycles
const sparks = new WeakMap();

/**
 * Base plugin class. Doesn't depend on Ampersand State
 */
export default class StatelessSparkPlugin {
  /**
   * The config for this plugin's namespace. If no namespace has been set
   * returns all of spark's config.
   * @type {Object}
   */
  get config() {
    let namespace = this.getNamespace ? this.getNamespace() : this.namespace;
    if (namespace) {
      namespace = namespace.toLowerCase();
      return this.spark.config[namespace];
    }
    return this.spark.config;
  }

  /**
   * A reference to the spark logger.
   * @type {Logger}
   */
  get logger() {
    return this.spark.logger;
  }

  /**
   * A reference to the main sdk instance
   * @type {SparkCore}
   */
  get spark() {
    return sparks.get(this);
  }

  @readonly
  /**
   * Mostly here for compatibility with legacy SparkPlugins.
   * StatelessSparkPlugins will never have a state other than ready, however, if
   * we implement stateful SparkPlugins as es6 classes, they may have the option
   * to have ready be false
   * @private
   * @type {boolean}
   */
  ready = true;

  /**
   * Constructor. One of attrs.spark or options.parent is required
   * @param {Object} attrs
   * @param {SparkCore} [attrs.spark]
   * @param {Object} options
   * @param {SparkCore} [options.parent]
   */
  constructor(attrs = {}, options = {}) {
    let spark = attrs.spark || options.parent;
    if (!spark) {
      throw new Error('One of `attrs.spark` or `options.parent` must be supplied when initializing a StatelessSparkPlugin');
    }

    while (spark.parent || spark.collection) {
      spark = spark.parent || spark.collection;
    }
    sparks.set(this, spark);
  }

  /**
   * Proxies to {@link SparkPlugin#spark}'s `request()` method.
   * @see SparkCore#request
   * @param {Array<mixed>} args
   * @returns {Promise}
   */
  request(...args) {
    return this.spark.request(...args);
  }

  /**
   * Proxies to {@link SparkPlugin#spark}'s `upload()` method.
   * @see SparkCore#upload
   * @param {Array<mixed>} args
   * @returns {Promise}
   */
  upload(...args) {
    return this.spark.upload(...args);
  }
}

Object.assign(StatelessSparkPlugin.prototype, AmpEvents);
