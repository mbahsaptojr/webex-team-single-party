'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _desc, _value, _class, _descriptor;

var _coreDecorators = require('core-decorators');

var _ampersandEvents = require('ampersand-events');

var _ampersandEvents2 = _interopRequireDefault(_ampersandEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  (0, _defineProperty2.default)(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

// hold onto weak references to parent' Sparks to help avoid retain cycles
var sparks = new _weakMap2.default();

/**
 * Base plugin class. Doesn't depend on Ampersand State
 */
var StatelessSparkPlugin = (_class = function () {
  (0, _createClass3.default)(StatelessSparkPlugin, [{
    key: 'config',

    /**
     * The config for this plugin's namespace. If no namespace has been set
     * returns all of spark's config.
     * @type {Object}
     */
    get: function get() {
      var namespace = this.getNamespace ? this.getNamespace() : this.namespace;
      if (namespace) {
        namespace = namespace.toLowerCase();
        return this.spark.config[namespace];
      }
      return this.spark.config;
    }

    /**
     * A reference to the spark logger.
     * @type {Logger}
     */

  }, {
    key: 'logger',
    get: function get() {
      return this.spark.logger;
    }

    /**
     * A reference to the main sdk instance
     * @type {SparkCore}
     */

  }, {
    key: 'spark',
    get: function get() {
      return sparks.get(this);
    }
    /**
     * Mostly here for compatibility with legacy SparkPlugins.
     * StatelessSparkPlugins will never have a state other than ready, however, if
     * we implement stateful SparkPlugins as es6 classes, they may have the option
     * to have ready be false
     * @private
     * @type {boolean}
     */

  }]);

  /**
   * Constructor. One of attrs.spark or options.parent is required
   * @param {Object} attrs
   * @param {SparkCore} [attrs.spark]
   * @param {Object} options
   * @param {SparkCore} [options.parent]
   */
  function StatelessSparkPlugin() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, StatelessSparkPlugin);

    _initDefineProp(this, 'ready', _descriptor, this);

    var spark = attrs.spark || options.parent;
    if (!spark) {
      throw new Error('One of `attrs.spark` or `options.parent` must be supplied when initializing a StatelessSparkPlugin');
    }

    while (spark.parent || spark.collection) {
      spark = spark.parent || spark.collection;
    }
    sparks.set(this, spark);
  }

  /**
   * Proxies to {@link SparkPlugin#spark}'s `request()` method.
   * @see SparkCore#request
   * @param {Array<mixed>} args
   * @returns {Promise}
   */


  (0, _createClass3.default)(StatelessSparkPlugin, [{
    key: 'request',
    value: function request() {
      var _spark;

      return (_spark = this.spark).request.apply(_spark, arguments);
    }

    /**
     * Proxies to {@link SparkPlugin#spark}'s `upload()` method.
     * @see SparkCore#upload
     * @param {Array<mixed>} args
     * @returns {Promise}
     */

  }, {
    key: 'upload',
    value: function upload() {
      var _spark2;

      return (_spark2 = this.spark).upload.apply(_spark2, arguments);
    }
  }]);
  return StatelessSparkPlugin;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'ready', [_coreDecorators.readonly], {
  enumerable: true,
  initializer: function initializer() {
    return true;
  }
})), _class);
exports.default = StatelessSparkPlugin;


(0, _assign2.default)(StatelessSparkPlugin.prototype, _ampersandEvents2.default);
//# sourceMappingURL=stateless-spark-plugin.js.map
