{"version":3,"sources":["auth.js"],"names":["AuthInterceptor","options","headers","authorization","resolve","requiresCredentials","then","requires","spark","credentials","getUserToken","token","toString","uri","includes","config","device","preDiscoveryServices","hydra","hydraServiceUrl","internal","isSpecificService","isHydra","service","isService","isServiceUrl","addAuthHeader","undefined","validateDomains","matchingDomains","whitelistedServiceDomains","filter","domain","length","reason","shouldAttemptReauth","logger","info","canRefresh","refresh","replay","reject","replayCount","maxAuthenticationReplays","error","Error","request","shouldRefreshAccessToken","statusCode","Interceptor"],"mappings":"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","file":"auth.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@ciscospark/http-core';\n\n/**\n * @class\n */\nexport default class AuthInterceptor extends Interceptor {\n  /**\n   * @returns {AuthInterceptor}\n   */\n  static create() {\n    return new AuthInterceptor({spark: this});\n  }\n\n  /**\n   * @see {@link Interceptor#onRequest}\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    options.headers = options.headers || {};\n\n    // If Authorizations is already set, don't overwrite it\n    if ('authorization' in options.headers || 'auth' in options) {\n      // If Authorization is set to null, false, or undefined, delete it to\n      // prevent a CORS preflight.\n      if (!options.headers.authorization) {\n        Reflect.deleteProperty(options.headers, 'authorization');\n      }\n      return Promise.resolve(options);\n    }\n\n    return this.requiresCredentials(options)\n      .then((requires) => {\n        if (!requires) {\n          return options;\n        }\n\n        return this.spark.credentials.getUserToken()\n          .then((token) => {\n            options.headers.authorization = token.toString();\n            return options;\n          });\n      });\n  }\n\n  /**\n   * Determines if the provided options object needs an auth header\n   * @param {Object} options\n   * @returns {Promise<boolean>}\n   */\n  requiresCredentials(options) {\n    if (options.uri && (options.uri.includes(this.spark.config.device.preDiscoveryServices.hydra)\n      || options.uri.includes(this.spark.config.device.preDiscoveryServices.hydraServiceUrl))) {\n      return Promise.resolve(true);\n    }\n\n    if (!this.spark.internal.device) {\n      return Promise.resolve(false);\n    }\n\n    return this.spark.internal.device.isSpecificService('hydra', options.uri)\n      .then((isHydra) => {\n        if (isHydra) {\n          return true;\n        }\n\n        if (options.service) {\n          return this.spark.internal.device.isService(options.service);\n        }\n        if (options.uri) {\n          // If service Url then return or else check if whitelisted\n          return this.spark.internal.device.isServiceUrl(options.uri)\n            .then((isServiceUrl) => {\n              if (isServiceUrl) {\n                return true;\n              }\n\n              if (options.addAuthHeader === undefined && this.spark.config.device.validateDomains) {\n                options.addAuthHeader = true;\n              }\n\n              // returns true if uri is in whitelistedServiceDomains and is requested\n              if (options.addAuthHeader) {\n                const matchingDomains = this.spark.config.device.whitelistedServiceDomains.filter((domain) => options.uri.includes(domain));\n                if (matchingDomains.length) {\n                  return Promise.resolve(true);\n                }\n              }\n              return false;\n            });\n        }\n        return false;\n      });\n  }\n\n  /**\n   * @see {@link Interceptor#onResponseError}\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    return this.shouldAttemptReauth(reason, options)\n      .then((shouldAttemptReauth) => {\n        if (shouldAttemptReauth) {\n          this.spark.logger.info('auth: received 401, attempting to reauthenticate');\n\n          if (reason.options.headers) {\n            Reflect.deleteProperty(reason.options.headers, 'authorization');\n          }\n\n          if (this.spark.credentials.canRefresh) {\n            return this.spark.credentials.refresh()\n              .then(() => this.replay(options));\n          }\n        }\n\n        return Promise.reject(reason);\n      });\n  }\n\n  /**\n   * Replays the request\n   * @param {Object} options\n   * @returns {Object}\n   */\n  replay(options) {\n    if (options.replayCount) {\n      options.replayCount += 1;\n    }\n    else {\n      options.replayCount = 1;\n    }\n\n    if (options.replayCount > this.spark.config.maxAuthenticationReplays) {\n      this.spark.logger.error(`auth: failed after ${this.spark.config.maxAuthenticationReplays} replay attempts`);\n      return Promise.reject(new Error(`Failed after ${this.spark.config.maxAuthenticationReplays} replay attempts`));\n    }\n\n    this.spark.logger.info(`auth: replaying request ${options.replayCount} time`);\n\n    return this.spark.request(options);\n  }\n\n  /**\n   * Indicates whether or not the current request should refresh its access\n   * token in event of a 401\n   * @param {Error} reason\n   * @param {Object} options\n   * @returns {Promise<boolean>}\n   */\n  shouldAttemptReauth(reason, options) {\n    if (options && options.shouldRefreshAccessToken === false) {\n      return Promise.resolve(false);\n    }\n\n    if (reason.statusCode === 401) {\n      return Promise.resolve(true);\n    }\n\n    return Promise.resolve(false);\n  }\n}\n"]}